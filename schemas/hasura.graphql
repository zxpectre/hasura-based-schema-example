schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "ActiveStake"
"""
type ActiveStake {
  address: String
  amount: numeric

  """An object relationship"""
  epoch: Epoch
  epochNo: Int
  id: bigint

  """An object relationship"""
  registeredWith: StakePool
  stakePoolHash: bytea
  stakePoolId: String
}

"""
aggregated selection of "ActiveStake"
"""
type ActiveStake_aggregate {
  aggregate: ActiveStake_aggregate_fields
  nodes: [ActiveStake!]!
}

input ActiveStake_aggregate_bool_exp {
  count: ActiveStake_aggregate_bool_exp_count
}

input ActiveStake_aggregate_bool_exp_count {
  arguments: [ActiveStake_select_column!]
  distinct: Boolean
  filter: ActiveStake_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "ActiveStake"
"""
type ActiveStake_aggregate_fields {
  avg: ActiveStake_avg_fields
  count(columns: [ActiveStake_select_column!], distinct: Boolean): Int!
  max: ActiveStake_max_fields
  min: ActiveStake_min_fields
  stddev: ActiveStake_stddev_fields
  stddev_pop: ActiveStake_stddev_pop_fields
  stddev_samp: ActiveStake_stddev_samp_fields
  sum: ActiveStake_sum_fields
  var_pop: ActiveStake_var_pop_fields
  var_samp: ActiveStake_var_samp_fields
  variance: ActiveStake_variance_fields
}

"""
order by aggregate values of table "ActiveStake"
"""
input ActiveStake_aggregate_order_by {
  avg: ActiveStake_avg_order_by
  count: order_by
  max: ActiveStake_max_order_by
  min: ActiveStake_min_order_by
  stddev: ActiveStake_stddev_order_by
  stddev_pop: ActiveStake_stddev_pop_order_by
  stddev_samp: ActiveStake_stddev_samp_order_by
  sum: ActiveStake_sum_order_by
  var_pop: ActiveStake_var_pop_order_by
  var_samp: ActiveStake_var_samp_order_by
  variance: ActiveStake_variance_order_by
}

"""
input type for inserting array relation for remote table "ActiveStake"
"""
input ActiveStake_arr_rel_insert_input {
  data: [ActiveStake_insert_input!]!
}

"""aggregate avg on columns"""
type ActiveStake_avg_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by avg() on columns of table "ActiveStake"
"""
input ActiveStake_avg_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "ActiveStake". All fields are combined with a logical 'AND'.
"""
input ActiveStake_bool_exp {
  _and: [ActiveStake_bool_exp!]
  _not: ActiveStake_bool_exp
  _or: [ActiveStake_bool_exp!]
  address: String_comparison_exp
  amount: numeric_comparison_exp
  epoch: Epoch_bool_exp
  epochNo: Int_comparison_exp
  id: bigint_comparison_exp
  registeredWith: StakePool_bool_exp
  stakePoolHash: bytea_comparison_exp
  stakePoolId: String_comparison_exp
}

"""
input type for inserting data into table "ActiveStake"
"""
input ActiveStake_insert_input {
  address: String
  amount: numeric
  epoch: Epoch_obj_rel_insert_input
  epochNo: Int
  id: bigint
  registeredWith: StakePool_obj_rel_insert_input
  stakePoolHash: bytea
  stakePoolId: String
}

"""aggregate max on columns"""
type ActiveStake_max_fields {
  address: String
  amount: numeric
  epochNo: Int
  id: bigint
  stakePoolId: String
}

"""
order by max() on columns of table "ActiveStake"
"""
input ActiveStake_max_order_by {
  address: order_by
  amount: order_by
  epochNo: order_by
  id: order_by
  stakePoolId: order_by
}

"""aggregate min on columns"""
type ActiveStake_min_fields {
  address: String
  amount: numeric
  epochNo: Int
  id: bigint
  stakePoolId: String
}

"""
order by min() on columns of table "ActiveStake"
"""
input ActiveStake_min_order_by {
  address: order_by
  amount: order_by
  epochNo: order_by
  id: order_by
  stakePoolId: order_by
}

"""Ordering options when selecting data from "ActiveStake"."""
input ActiveStake_order_by {
  address: order_by
  amount: order_by
  epoch: Epoch_order_by
  epochNo: order_by
  id: order_by
  registeredWith: StakePool_order_by
  stakePoolHash: order_by
  stakePoolId: order_by
}

"""
select columns of table "ActiveStake"
"""
enum ActiveStake_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  epochNo

  """column name"""
  id

  """column name"""
  stakePoolHash

  """column name"""
  stakePoolId
}

"""aggregate stddev on columns"""
type ActiveStake_stddev_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by stddev() on columns of table "ActiveStake"
"""
input ActiveStake_stddev_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type ActiveStake_stddev_pop_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "ActiveStake"
"""
input ActiveStake_stddev_pop_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type ActiveStake_stddev_samp_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "ActiveStake"
"""
input ActiveStake_stddev_samp_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""
Streaming cursor of the table "ActiveStake"
"""
input ActiveStake_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ActiveStake_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ActiveStake_stream_cursor_value_input {
  address: String
  amount: numeric
  epochNo: Int
  id: bigint
  stakePoolHash: bytea
  stakePoolId: String
}

"""aggregate sum on columns"""
type ActiveStake_sum_fields {
  amount: numeric
  epochNo: Int
  id: bigint
}

"""
order by sum() on columns of table "ActiveStake"
"""
input ActiveStake_sum_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""aggregate var_pop on columns"""
type ActiveStake_var_pop_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by var_pop() on columns of table "ActiveStake"
"""
input ActiveStake_var_pop_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type ActiveStake_var_samp_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by var_samp() on columns of table "ActiveStake"
"""
input ActiveStake_var_samp_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""aggregate variance on columns"""
type ActiveStake_variance_fields {
  amount: Float
  epochNo: Float
  id: Float
}

"""
order by variance() on columns of table "ActiveStake"
"""
input ActiveStake_variance_order_by {
  amount: order_by
  epochNo: order_by
  id: order_by
}

"""
columns and relationships of "Asset"
"""
type Asset {
  assetId: bytea!
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar

  """An object relationship"""
  firstAppearedInBlock: Block
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String

  """An array relationship"""
  tokenMints(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): [TokenMint!]!

  """An aggregate relationship"""
  tokenMints_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): TokenMint_aggregate!
  url: String
}

"""
aggregated selection of "Asset"
"""
type Asset_aggregate {
  aggregate: Asset_aggregate_fields
  nodes: [Asset!]!
}

"""
aggregate fields of "Asset"
"""
type Asset_aggregate_fields {
  avg: Asset_avg_fields
  count(columns: [Asset_select_column!], distinct: Boolean): Int!
  max: Asset_max_fields
  min: Asset_min_fields
  stddev: Asset_stddev_fields
  stddev_pop: Asset_stddev_pop_fields
  stddev_samp: Asset_stddev_samp_fields
  sum: Asset_sum_fields
  var_pop: Asset_var_pop_fields
  var_samp: Asset_var_samp_fields
  variance: Asset_variance_fields
}

"""aggregate avg on columns"""
type Asset_avg_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
Boolean expression to filter rows from the table "Asset". All fields are combined with a logical 'AND'.
"""
input Asset_bool_exp {
  _and: [Asset_bool_exp!]
  _not: Asset_bool_exp
  _or: [Asset_bool_exp!]
  assetId: bytea_comparison_exp
  assetName: bytea_comparison_exp
  decimals: Int_comparison_exp
  description: String_comparison_exp
  fingerprint: bpchar_comparison_exp
  firstAppearedInBlock: Block_bool_exp
  firstAppearedInSlot: Int_comparison_exp
  logo: String_comparison_exp
  metadataHash: bpchar_comparison_exp
  name: String_comparison_exp
  policyId: bytea_comparison_exp
  ticker: String_comparison_exp
  tokenMints: TokenMint_bool_exp
  tokenMints_aggregate: TokenMint_aggregate_bool_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "Asset"
"""
enum Asset_constraint {
  """
  unique or primary key constraint on columns "assetId"
  """
  Asset_pkey
}

"""
input type for incrementing numeric columns in table "Asset"
"""
input Asset_inc_input {
  decimals: Int
  firstAppearedInSlot: Int
}

"""
input type for inserting data into table "Asset"
"""
input Asset_insert_input {
  assetId: bytea
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInBlock: Block_obj_rel_insert_input
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String
  tokenMints: TokenMint_arr_rel_insert_input
  url: String
}

"""aggregate max on columns"""
type Asset_max_fields {
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  ticker: String
  url: String
}

"""aggregate min on columns"""
type Asset_min_fields {
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  ticker: String
  url: String
}

"""
response of any mutation on the table "Asset"
"""
type Asset_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Asset!]!
}

"""
input type for inserting object relation for remote table "Asset"
"""
input Asset_obj_rel_insert_input {
  data: Asset_insert_input!

  """upsert condition"""
  on_conflict: Asset_on_conflict
}

"""
on_conflict condition type for table "Asset"
"""
input Asset_on_conflict {
  constraint: Asset_constraint!
  update_columns: [Asset_update_column!]! = []
  where: Asset_bool_exp
}

"""Ordering options when selecting data from "Asset"."""
input Asset_order_by {
  assetId: order_by
  assetName: order_by
  decimals: order_by
  description: order_by
  fingerprint: order_by
  firstAppearedInBlock: Block_order_by
  firstAppearedInSlot: order_by
  logo: order_by
  metadataHash: order_by
  name: order_by
  policyId: order_by
  ticker: order_by
  tokenMints_aggregate: TokenMint_aggregate_order_by
  url: order_by
}

"""primary key columns input for table: Asset"""
input Asset_pk_columns_input {
  assetId: bytea!
}

"""
select columns of table "Asset"
"""
enum Asset_select_column {
  """column name"""
  assetId

  """column name"""
  assetName

  """column name"""
  decimals

  """column name"""
  description

  """column name"""
  fingerprint

  """column name"""
  firstAppearedInSlot

  """column name"""
  logo

  """column name"""
  metadataHash

  """column name"""
  name

  """column name"""
  policyId

  """column name"""
  ticker

  """column name"""
  url
}

"""
input type for updating data in table "Asset"
"""
input Asset_set_input {
  assetId: bytea
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String
  url: String
}

"""aggregate stddev on columns"""
type Asset_stddev_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""aggregate stddev_pop on columns"""
type Asset_stddev_pop_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""aggregate stddev_samp on columns"""
type Asset_stddev_samp_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
Streaming cursor of the table "Asset"
"""
input Asset_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Asset_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Asset_stream_cursor_value_input {
  assetId: bytea
  assetName: bytea
  decimals: Int
  description: String
  fingerprint: bpchar
  firstAppearedInSlot: Int
  logo: String
  metadataHash: bpchar
  name: String
  policyId: bytea
  ticker: String
  url: String
}

"""aggregate sum on columns"""
type Asset_sum_fields {
  decimals: Int
  firstAppearedInSlot: Int
}

"""
update columns of table "Asset"
"""
enum Asset_update_column {
  """column name"""
  assetId

  """column name"""
  assetName

  """column name"""
  decimals

  """column name"""
  description

  """column name"""
  fingerprint

  """column name"""
  firstAppearedInSlot

  """column name"""
  logo

  """column name"""
  metadataHash

  """column name"""
  name

  """column name"""
  policyId

  """column name"""
  ticker

  """column name"""
  url
}

input Asset_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Asset_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Asset_set_input

  """filter the rows which have to be updated"""
  where: Asset_bool_exp!
}

"""aggregate var_pop on columns"""
type Asset_var_pop_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""aggregate var_samp on columns"""
type Asset_var_samp_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""aggregate variance on columns"""
type Asset_variance_fields {
  decimals: Float
  firstAppearedInSlot: Float
}

"""
columns and relationships of "Block"
"""
type Block {
  """An object relationship"""
  epoch: Epoch
  epochNo: Int
  fees: bigint
  forgedAt: timestamp
  hash: bytea

  """An object relationship"""
  nextBlock: Block
  nextBlockHash: bytea
  number: Int
  opCert: bytea
  pool_hash_id: bigint

  """An object relationship"""
  previousBlock: Block
  previousBlockHash: bytea
  protocolVersion(
    """JSON select path"""
    path: String
  ): jsonb
  size: Int
  slotInEpoch: Int

  """An object relationship"""
  slotLeader: SlotLeader
  slotNo: bigint
  slot_leader_id: bigint

  """An array relationship"""
  transactions(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!
  transactionsCount: bigint

  """An aggregate relationship"""
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): Transaction_aggregate!
  vrfKey: String
}

"""
aggregated selection of "Block"
"""
type Block_aggregate {
  aggregate: Block_aggregate_fields
  nodes: [Block!]!
}

input Block_aggregate_bool_exp {
  count: Block_aggregate_bool_exp_count
}

input Block_aggregate_bool_exp_count {
  arguments: [Block_select_column!]
  distinct: Boolean
  filter: Block_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Block"
"""
type Block_aggregate_fields {
  avg: Block_avg_fields
  count(columns: [Block_select_column!], distinct: Boolean): Int!
  max: Block_max_fields
  min: Block_min_fields
  stddev: Block_stddev_fields
  stddev_pop: Block_stddev_pop_fields
  stddev_samp: Block_stddev_samp_fields
  sum: Block_sum_fields
  var_pop: Block_var_pop_fields
  var_samp: Block_var_samp_fields
  variance: Block_variance_fields
}

"""
order by aggregate values of table "Block"
"""
input Block_aggregate_order_by {
  avg: Block_avg_order_by
  count: order_by
  max: Block_max_order_by
  min: Block_min_order_by
  stddev: Block_stddev_order_by
  stddev_pop: Block_stddev_pop_order_by
  stddev_samp: Block_stddev_samp_order_by
  sum: Block_sum_order_by
  var_pop: Block_var_pop_order_by
  var_samp: Block_var_samp_order_by
  variance: Block_variance_order_by
}

"""
input type for inserting array relation for remote table "Block"
"""
input Block_arr_rel_insert_input {
  data: [Block_insert_input!]!
}

"""aggregate avg on columns"""
type Block_avg_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by avg() on columns of table "Block"
"""
input Block_avg_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""
Boolean expression to filter rows from the table "Block". All fields are combined with a logical 'AND'.
"""
input Block_bool_exp {
  _and: [Block_bool_exp!]
  _not: Block_bool_exp
  _or: [Block_bool_exp!]
  epoch: Epoch_bool_exp
  epochNo: Int_comparison_exp
  fees: bigint_comparison_exp
  forgedAt: timestamp_comparison_exp
  hash: bytea_comparison_exp
  nextBlock: Block_bool_exp
  nextBlockHash: bytea_comparison_exp
  number: Int_comparison_exp
  opCert: bytea_comparison_exp
  pool_hash_id: bigint_comparison_exp
  previousBlock: Block_bool_exp
  previousBlockHash: bytea_comparison_exp
  protocolVersion: jsonb_comparison_exp
  size: Int_comparison_exp
  slotInEpoch: Int_comparison_exp
  slotLeader: SlotLeader_bool_exp
  slotNo: bigint_comparison_exp
  slot_leader_id: bigint_comparison_exp
  transactions: Transaction_bool_exp
  transactionsCount: bigint_comparison_exp
  transactions_aggregate: Transaction_aggregate_bool_exp
  vrfKey: String_comparison_exp
}

"""
input type for inserting data into table "Block"
"""
input Block_insert_input {
  epoch: Epoch_obj_rel_insert_input
  epochNo: Int
  fees: bigint
  forgedAt: timestamp
  hash: bytea
  nextBlock: Block_obj_rel_insert_input
  nextBlockHash: bytea
  number: Int
  opCert: bytea
  pool_hash_id: bigint
  previousBlock: Block_obj_rel_insert_input
  previousBlockHash: bytea
  protocolVersion: jsonb
  size: Int
  slotInEpoch: Int
  slotLeader: SlotLeader_obj_rel_insert_input
  slotNo: bigint
  slot_leader_id: bigint
  transactions: Transaction_arr_rel_insert_input
  transactionsCount: bigint
  vrfKey: String
}

"""aggregate max on columns"""
type Block_max_fields {
  epochNo: Int
  fees: bigint
  forgedAt: timestamp
  number: Int
  pool_hash_id: bigint
  size: Int
  slotInEpoch: Int
  slotNo: bigint
  slot_leader_id: bigint
  transactionsCount: bigint
  vrfKey: String
}

"""
order by max() on columns of table "Block"
"""
input Block_max_order_by {
  epochNo: order_by
  fees: order_by
  forgedAt: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
  vrfKey: order_by
}

"""aggregate min on columns"""
type Block_min_fields {
  epochNo: Int
  fees: bigint
  forgedAt: timestamp
  number: Int
  pool_hash_id: bigint
  size: Int
  slotInEpoch: Int
  slotNo: bigint
  slot_leader_id: bigint
  transactionsCount: bigint
  vrfKey: String
}

"""
order by min() on columns of table "Block"
"""
input Block_min_order_by {
  epochNo: order_by
  fees: order_by
  forgedAt: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
  vrfKey: order_by
}

"""
input type for inserting object relation for remote table "Block"
"""
input Block_obj_rel_insert_input {
  data: Block_insert_input!
}

"""Ordering options when selecting data from "Block"."""
input Block_order_by {
  epoch: Epoch_order_by
  epochNo: order_by
  fees: order_by
  forgedAt: order_by
  hash: order_by
  nextBlock: Block_order_by
  nextBlockHash: order_by
  number: order_by
  opCert: order_by
  pool_hash_id: order_by
  previousBlock: Block_order_by
  previousBlockHash: order_by
  protocolVersion: order_by
  size: order_by
  slotInEpoch: order_by
  slotLeader: SlotLeader_order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
  transactions_aggregate: Transaction_aggregate_order_by
  vrfKey: order_by
}

"""
select columns of table "Block"
"""
enum Block_select_column {
  """column name"""
  epochNo

  """column name"""
  fees

  """column name"""
  forgedAt

  """column name"""
  hash

  """column name"""
  nextBlockHash

  """column name"""
  number

  """column name"""
  opCert

  """column name"""
  pool_hash_id

  """column name"""
  previousBlockHash

  """column name"""
  protocolVersion

  """column name"""
  size

  """column name"""
  slotInEpoch

  """column name"""
  slotNo

  """column name"""
  slot_leader_id

  """column name"""
  transactionsCount

  """column name"""
  vrfKey
}

"""aggregate stddev on columns"""
type Block_stddev_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by stddev() on columns of table "Block"
"""
input Block_stddev_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""aggregate stddev_pop on columns"""
type Block_stddev_pop_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by stddev_pop() on columns of table "Block"
"""
input Block_stddev_pop_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""aggregate stddev_samp on columns"""
type Block_stddev_samp_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by stddev_samp() on columns of table "Block"
"""
input Block_stddev_samp_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""
Streaming cursor of the table "Block"
"""
input Block_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Block_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Block_stream_cursor_value_input {
  epochNo: Int
  fees: bigint
  forgedAt: timestamp
  hash: bytea
  nextBlockHash: bytea
  number: Int
  opCert: bytea
  pool_hash_id: bigint
  previousBlockHash: bytea
  protocolVersion: jsonb
  size: Int
  slotInEpoch: Int
  slotNo: bigint
  slot_leader_id: bigint
  transactionsCount: bigint
  vrfKey: String
}

"""aggregate sum on columns"""
type Block_sum_fields {
  epochNo: Int
  fees: bigint
  number: Int
  pool_hash_id: bigint
  size: Int
  slotInEpoch: Int
  slotNo: bigint
  slot_leader_id: bigint
  transactionsCount: bigint
}

"""
order by sum() on columns of table "Block"
"""
input Block_sum_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""aggregate var_pop on columns"""
type Block_var_pop_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by var_pop() on columns of table "Block"
"""
input Block_var_pop_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""aggregate var_samp on columns"""
type Block_var_samp_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by var_samp() on columns of table "Block"
"""
input Block_var_samp_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""aggregate variance on columns"""
type Block_variance_fields {
  epochNo: Float
  fees: Float
  number: Float
  pool_hash_id: Float
  size: Float
  slotInEpoch: Float
  slotNo: Float
  slot_leader_id: Float
  transactionsCount: Float
}

"""
order by variance() on columns of table "Block"
"""
input Block_variance_order_by {
  epochNo: order_by
  fees: order_by
  number: order_by
  pool_hash_id: order_by
  size: order_by
  slotInEpoch: order_by
  slotNo: order_by
  slot_leader_id: order_by
  transactionsCount: order_by
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "Cardano"
"""
type Cardano {
  """An object relationship"""
  currentEpoch: Epoch
  currentEpochNo: Int

  """An object relationship"""
  tip: Block
  tipBlockNo: Int
}

"""
aggregated selection of "Cardano"
"""
type Cardano_aggregate {
  aggregate: Cardano_aggregate_fields
  nodes: [Cardano!]!
}

"""
aggregate fields of "Cardano"
"""
type Cardano_aggregate_fields {
  avg: Cardano_avg_fields
  count(columns: [Cardano_select_column!], distinct: Boolean): Int!
  max: Cardano_max_fields
  min: Cardano_min_fields
  stddev: Cardano_stddev_fields
  stddev_pop: Cardano_stddev_pop_fields
  stddev_samp: Cardano_stddev_samp_fields
  sum: Cardano_sum_fields
  var_pop: Cardano_var_pop_fields
  var_samp: Cardano_var_samp_fields
  variance: Cardano_variance_fields
}

"""aggregate avg on columns"""
type Cardano_avg_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""
Boolean expression to filter rows from the table "Cardano". All fields are combined with a logical 'AND'.
"""
input Cardano_bool_exp {
  _and: [Cardano_bool_exp!]
  _not: Cardano_bool_exp
  _or: [Cardano_bool_exp!]
  currentEpoch: Epoch_bool_exp
  currentEpochNo: Int_comparison_exp
  tip: Block_bool_exp
  tipBlockNo: Int_comparison_exp
}

"""aggregate max on columns"""
type Cardano_max_fields {
  currentEpochNo: Int
  tipBlockNo: Int
}

"""aggregate min on columns"""
type Cardano_min_fields {
  currentEpochNo: Int
  tipBlockNo: Int
}

"""Ordering options when selecting data from "Cardano"."""
input Cardano_order_by {
  currentEpoch: Epoch_order_by
  currentEpochNo: order_by
  tip: Block_order_by
  tipBlockNo: order_by
}

"""
select columns of table "Cardano"
"""
enum Cardano_select_column {
  """column name"""
  currentEpochNo

  """column name"""
  tipBlockNo
}

"""aggregate stddev on columns"""
type Cardano_stddev_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""aggregate stddev_pop on columns"""
type Cardano_stddev_pop_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""aggregate stddev_samp on columns"""
type Cardano_stddev_samp_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""
Streaming cursor of the table "Cardano"
"""
input Cardano_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Cardano_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Cardano_stream_cursor_value_input {
  currentEpochNo: Int
  tipBlockNo: Int
}

"""aggregate sum on columns"""
type Cardano_sum_fields {
  currentEpochNo: Int
  tipBlockNo: Int
}

"""aggregate var_pop on columns"""
type Cardano_var_pop_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""aggregate var_samp on columns"""
type Cardano_var_samp_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""aggregate variance on columns"""
type Cardano_variance_fields {
  currentEpochNo: Float
  tipBlockNo: Float
}

"""
columns and relationships of "CollateralInput"
"""
type CollateralInput {
  address: String

  """An object relationship"""
  sourceTransaction: Transaction
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """An object relationship"""
  transaction: Transaction
  txHash: bytea
  value: numeric
}

"""
aggregated selection of "CollateralInput"
"""
type CollateralInput_aggregate {
  aggregate: CollateralInput_aggregate_fields
  nodes: [CollateralInput!]!
}

input CollateralInput_aggregate_bool_exp {
  count: CollateralInput_aggregate_bool_exp_count
}

input CollateralInput_aggregate_bool_exp_count {
  arguments: [CollateralInput_select_column!]
  distinct: Boolean
  filter: CollateralInput_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "CollateralInput"
"""
type CollateralInput_aggregate_fields {
  avg: CollateralInput_avg_fields
  count(columns: [CollateralInput_select_column!], distinct: Boolean): Int!
  max: CollateralInput_max_fields
  min: CollateralInput_min_fields
  stddev: CollateralInput_stddev_fields
  stddev_pop: CollateralInput_stddev_pop_fields
  stddev_samp: CollateralInput_stddev_samp_fields
  sum: CollateralInput_sum_fields
  var_pop: CollateralInput_var_pop_fields
  var_samp: CollateralInput_var_samp_fields
  variance: CollateralInput_variance_fields
}

"""
order by aggregate values of table "CollateralInput"
"""
input CollateralInput_aggregate_order_by {
  avg: CollateralInput_avg_order_by
  count: order_by
  max: CollateralInput_max_order_by
  min: CollateralInput_min_order_by
  stddev: CollateralInput_stddev_order_by
  stddev_pop: CollateralInput_stddev_pop_order_by
  stddev_samp: CollateralInput_stddev_samp_order_by
  sum: CollateralInput_sum_order_by
  var_pop: CollateralInput_var_pop_order_by
  var_samp: CollateralInput_var_samp_order_by
  variance: CollateralInput_variance_order_by
}

"""
input type for inserting array relation for remote table "CollateralInput"
"""
input CollateralInput_arr_rel_insert_input {
  data: [CollateralInput_insert_input!]!
}

"""aggregate avg on columns"""
type CollateralInput_avg_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by avg() on columns of table "CollateralInput"
"""
input CollateralInput_avg_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "CollateralInput". All fields are combined with a logical 'AND'.
"""
input CollateralInput_bool_exp {
  _and: [CollateralInput_bool_exp!]
  _not: CollateralInput_bool_exp
  _or: [CollateralInput_bool_exp!]
  address: String_comparison_exp
  sourceTransaction: Transaction_bool_exp
  sourceTxHash: bytea_comparison_exp
  sourceTxIndex: smallint_comparison_exp
  source_tx_out_id: bigint_comparison_exp
  tokens: TokenInOutput_bool_exp
  tokens_aggregate: TokenInOutput_aggregate_bool_exp
  transaction: Transaction_bool_exp
  txHash: bytea_comparison_exp
  value: numeric_comparison_exp
}

"""
input type for inserting data into table "CollateralInput"
"""
input CollateralInput_insert_input {
  address: String
  sourceTransaction: Transaction_obj_rel_insert_input
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  tokens: TokenInOutput_arr_rel_insert_input
  transaction: Transaction_obj_rel_insert_input
  txHash: bytea
  value: numeric
}

"""aggregate max on columns"""
type CollateralInput_max_fields {
  address: String
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by max() on columns of table "CollateralInput"
"""
input CollateralInput_max_order_by {
  address: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type CollateralInput_min_fields {
  address: String
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by min() on columns of table "CollateralInput"
"""
input CollateralInput_min_order_by {
  address: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""Ordering options when selecting data from "CollateralInput"."""
input CollateralInput_order_by {
  address: order_by
  sourceTransaction: Transaction_order_by
  sourceTxHash: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  tokens_aggregate: TokenInOutput_aggregate_order_by
  transaction: Transaction_order_by
  txHash: order_by
  value: order_by
}

"""
select columns of table "CollateralInput"
"""
enum CollateralInput_select_column {
  """column name"""
  address

  """column name"""
  sourceTxHash

  """column name"""
  sourceTxIndex

  """column name"""
  source_tx_out_id

  """column name"""
  txHash

  """column name"""
  value
}

"""aggregate stddev on columns"""
type CollateralInput_stddev_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev() on columns of table "CollateralInput"
"""
input CollateralInput_stddev_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type CollateralInput_stddev_pop_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "CollateralInput"
"""
input CollateralInput_stddev_pop_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type CollateralInput_stddev_samp_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "CollateralInput"
"""
input CollateralInput_stddev_samp_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
Streaming cursor of the table "CollateralInput"
"""
input CollateralInput_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: CollateralInput_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input CollateralInput_stream_cursor_value_input {
  address: String
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  txHash: bytea
  value: numeric
}

"""aggregate sum on columns"""
type CollateralInput_sum_fields {
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "CollateralInput"
"""
input CollateralInput_sum_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type CollateralInput_var_pop_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "CollateralInput"
"""
input CollateralInput_var_pop_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type CollateralInput_var_samp_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "CollateralInput"
"""
input CollateralInput_var_samp_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type CollateralInput_variance_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by variance() on columns of table "CollateralInput"
"""
input CollateralInput_variance_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
columns and relationships of "CollateralOutput"
"""
type CollateralOutput {
  address: String
  addressHasScript: Boolean

  """An object relationship"""
  datum: Datum
  id: bigint
  index: smallint
  inline_datum_id: bigint
  paymentCredential: bytea
  reference_script_id: bigint

  """An object relationship"""
  script: Script

  """An object relationship"""
  transaction: Transaction
  txHash: bytea
  value: numeric
}

"""
aggregated selection of "CollateralOutput"
"""
type CollateralOutput_aggregate {
  aggregate: CollateralOutput_aggregate_fields
  nodes: [CollateralOutput!]!
}

input CollateralOutput_aggregate_bool_exp {
  bool_and: CollateralOutput_aggregate_bool_exp_bool_and
  bool_or: CollateralOutput_aggregate_bool_exp_bool_or
  count: CollateralOutput_aggregate_bool_exp_count
}

input CollateralOutput_aggregate_bool_exp_bool_and {
  arguments: CollateralOutput_select_column_CollateralOutput_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: CollateralOutput_bool_exp
  predicate: Boolean_comparison_exp!
}

input CollateralOutput_aggregate_bool_exp_bool_or {
  arguments: CollateralOutput_select_column_CollateralOutput_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: CollateralOutput_bool_exp
  predicate: Boolean_comparison_exp!
}

input CollateralOutput_aggregate_bool_exp_count {
  arguments: [CollateralOutput_select_column!]
  distinct: Boolean
  filter: CollateralOutput_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "CollateralOutput"
"""
type CollateralOutput_aggregate_fields {
  avg: CollateralOutput_avg_fields
  count(columns: [CollateralOutput_select_column!], distinct: Boolean): Int!
  max: CollateralOutput_max_fields
  min: CollateralOutput_min_fields
  stddev: CollateralOutput_stddev_fields
  stddev_pop: CollateralOutput_stddev_pop_fields
  stddev_samp: CollateralOutput_stddev_samp_fields
  sum: CollateralOutput_sum_fields
  var_pop: CollateralOutput_var_pop_fields
  var_samp: CollateralOutput_var_samp_fields
  variance: CollateralOutput_variance_fields
}

"""
order by aggregate values of table "CollateralOutput"
"""
input CollateralOutput_aggregate_order_by {
  avg: CollateralOutput_avg_order_by
  count: order_by
  max: CollateralOutput_max_order_by
  min: CollateralOutput_min_order_by
  stddev: CollateralOutput_stddev_order_by
  stddev_pop: CollateralOutput_stddev_pop_order_by
  stddev_samp: CollateralOutput_stddev_samp_order_by
  sum: CollateralOutput_sum_order_by
  var_pop: CollateralOutput_var_pop_order_by
  var_samp: CollateralOutput_var_samp_order_by
  variance: CollateralOutput_variance_order_by
}

"""
input type for inserting array relation for remote table "CollateralOutput"
"""
input CollateralOutput_arr_rel_insert_input {
  data: [CollateralOutput_insert_input!]!
}

"""aggregate avg on columns"""
type CollateralOutput_avg_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by avg() on columns of table "CollateralOutput"
"""
input CollateralOutput_avg_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "CollateralOutput". All fields are combined with a logical 'AND'.
"""
input CollateralOutput_bool_exp {
  _and: [CollateralOutput_bool_exp!]
  _not: CollateralOutput_bool_exp
  _or: [CollateralOutput_bool_exp!]
  address: String_comparison_exp
  addressHasScript: Boolean_comparison_exp
  datum: Datum_bool_exp
  id: bigint_comparison_exp
  index: smallint_comparison_exp
  inline_datum_id: bigint_comparison_exp
  paymentCredential: bytea_comparison_exp
  reference_script_id: bigint_comparison_exp
  script: Script_bool_exp
  transaction: Transaction_bool_exp
  txHash: bytea_comparison_exp
  value: numeric_comparison_exp
}

"""
input type for inserting data into table "CollateralOutput"
"""
input CollateralOutput_insert_input {
  address: String
  addressHasScript: Boolean
  datum: Datum_obj_rel_insert_input
  id: bigint
  index: smallint
  inline_datum_id: bigint
  paymentCredential: bytea
  reference_script_id: bigint
  script: Script_obj_rel_insert_input
  transaction: Transaction_obj_rel_insert_input
  txHash: bytea
  value: numeric
}

"""aggregate max on columns"""
type CollateralOutput_max_fields {
  address: String
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""
order by max() on columns of table "CollateralOutput"
"""
input CollateralOutput_max_order_by {
  address: order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type CollateralOutput_min_fields {
  address: String
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""
order by min() on columns of table "CollateralOutput"
"""
input CollateralOutput_min_order_by {
  address: order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""Ordering options when selecting data from "CollateralOutput"."""
input CollateralOutput_order_by {
  address: order_by
  addressHasScript: order_by
  datum: Datum_order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  paymentCredential: order_by
  reference_script_id: order_by
  script: Script_order_by
  transaction: Transaction_order_by
  txHash: order_by
  value: order_by
}

"""
select columns of table "CollateralOutput"
"""
enum CollateralOutput_select_column {
  """column name"""
  address

  """column name"""
  addressHasScript

  """column name"""
  id

  """column name"""
  index

  """column name"""
  inline_datum_id

  """column name"""
  paymentCredential

  """column name"""
  reference_script_id

  """column name"""
  txHash

  """column name"""
  value
}

"""
select "CollateralOutput_aggregate_bool_exp_bool_and_arguments_columns" columns of table "CollateralOutput"
"""
enum CollateralOutput_select_column_CollateralOutput_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  addressHasScript
}

"""
select "CollateralOutput_aggregate_bool_exp_bool_or_arguments_columns" columns of table "CollateralOutput"
"""
enum CollateralOutput_select_column_CollateralOutput_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  addressHasScript
}

"""aggregate stddev on columns"""
type CollateralOutput_stddev_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by stddev() on columns of table "CollateralOutput"
"""
input CollateralOutput_stddev_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type CollateralOutput_stddev_pop_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "CollateralOutput"
"""
input CollateralOutput_stddev_pop_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type CollateralOutput_stddev_samp_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "CollateralOutput"
"""
input CollateralOutput_stddev_samp_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
Streaming cursor of the table "CollateralOutput"
"""
input CollateralOutput_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: CollateralOutput_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input CollateralOutput_stream_cursor_value_input {
  address: String
  addressHasScript: Boolean
  id: bigint
  index: smallint
  inline_datum_id: bigint
  paymentCredential: bytea
  reference_script_id: bigint
  txHash: bytea
  value: numeric
}

"""aggregate sum on columns"""
type CollateralOutput_sum_fields {
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "CollateralOutput"
"""
input CollateralOutput_sum_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type CollateralOutput_var_pop_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "CollateralOutput"
"""
input CollateralOutput_var_pop_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type CollateralOutput_var_samp_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "CollateralOutput"
"""
input CollateralOutput_var_samp_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type CollateralOutput_variance_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by variance() on columns of table "CollateralOutput"
"""
input CollateralOutput_variance_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
columns and relationships of "Datum"
"""
type Datum {
  bytes: bytea

  """An object relationship"""
  firstIncludedIn: Transaction
  hash: bytea
  id: bigint
  tx_id: bigint
  value(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "Datum"
"""
type Datum_aggregate {
  aggregate: Datum_aggregate_fields
  nodes: [Datum!]!
}

"""
aggregate fields of "Datum"
"""
type Datum_aggregate_fields {
  avg: Datum_avg_fields
  count(columns: [Datum_select_column!], distinct: Boolean): Int!
  max: Datum_max_fields
  min: Datum_min_fields
  stddev: Datum_stddev_fields
  stddev_pop: Datum_stddev_pop_fields
  stddev_samp: Datum_stddev_samp_fields
  sum: Datum_sum_fields
  var_pop: Datum_var_pop_fields
  var_samp: Datum_var_samp_fields
  variance: Datum_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input Datum_append_input {
  value: jsonb
}

"""aggregate avg on columns"""
type Datum_avg_fields {
  id: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "Datum". All fields are combined with a logical 'AND'.
"""
input Datum_bool_exp {
  _and: [Datum_bool_exp!]
  _not: Datum_bool_exp
  _or: [Datum_bool_exp!]
  bytes: bytea_comparison_exp
  firstIncludedIn: Transaction_bool_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
  value: jsonb_comparison_exp
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input Datum_delete_at_path_input {
  value: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input Datum_delete_elem_input {
  value: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input Datum_delete_key_input {
  value: String
}

"""
input type for incrementing numeric columns in table "Datum"
"""
input Datum_inc_input {
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "Datum"
"""
input Datum_insert_input {
  bytes: bytea
  firstIncludedIn: Transaction_obj_rel_insert_input
  hash: bytea
  id: bigint
  tx_id: bigint
  value: jsonb
}

"""aggregate max on columns"""
type Datum_max_fields {
  id: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type Datum_min_fields {
  id: bigint
  tx_id: bigint
}

"""
response of any mutation on the table "Datum"
"""
type Datum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Datum!]!
}

"""
input type for inserting object relation for remote table "Datum"
"""
input Datum_obj_rel_insert_input {
  data: Datum_insert_input!
}

"""Ordering options when selecting data from "Datum"."""
input Datum_order_by {
  bytes: order_by
  firstIncludedIn: Transaction_order_by
  hash: order_by
  id: order_by
  tx_id: order_by
  value: order_by
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input Datum_prepend_input {
  value: jsonb
}

"""
select columns of table "Datum"
"""
enum Datum_select_column {
  """column name"""
  bytes

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  tx_id

  """column name"""
  value
}

"""
input type for updating data in table "Datum"
"""
input Datum_set_input {
  bytes: bytea
  hash: bytea
  id: bigint
  tx_id: bigint
  value: jsonb
}

"""aggregate stddev on columns"""
type Datum_stddev_fields {
  id: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type Datum_stddev_pop_fields {
  id: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type Datum_stddev_samp_fields {
  id: Float
  tx_id: Float
}

"""
Streaming cursor of the table "Datum"
"""
input Datum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Datum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Datum_stream_cursor_value_input {
  bytes: bytea
  hash: bytea
  id: bigint
  tx_id: bigint
  value: jsonb
}

"""aggregate sum on columns"""
type Datum_sum_fields {
  id: bigint
  tx_id: bigint
}

input Datum_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: Datum_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: Datum_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: Datum_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: Datum_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: Datum_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: Datum_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: Datum_set_input

  """filter the rows which have to be updated"""
  where: Datum_bool_exp!
}

"""aggregate var_pop on columns"""
type Datum_var_pop_fields {
  id: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type Datum_var_samp_fields {
  id: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type Datum_variance_fields {
  id: Float
  tx_id: Float
}

"""
columns and relationships of "Delegation"
"""
type Delegation {
  address: String
  id: bigint
  pool_hash_id: bigint

  """An object relationship"""
  redeemer: Redeemer
  redeemerId: bigint

  """An object relationship"""
  stakePool: StakePool

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint
}

"""
columns and relationships of "DelegationVote"
"""
type DelegationVote {
  address: String

  """An object relationship"""
  drep: drep_hash
  drep_hash_id: bigint
  id: bigint

  """An object relationship"""
  redeemer: Redeemer
  redeemerId: bigint

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint
}

"""
aggregated selection of "DelegationVote"
"""
type DelegationVote_aggregate {
  aggregate: DelegationVote_aggregate_fields
  nodes: [DelegationVote!]!
}

"""
aggregate fields of "DelegationVote"
"""
type DelegationVote_aggregate_fields {
  avg: DelegationVote_avg_fields
  count(columns: [DelegationVote_select_column!], distinct: Boolean): Int!
  max: DelegationVote_max_fields
  min: DelegationVote_min_fields
  stddev: DelegationVote_stddev_fields
  stddev_pop: DelegationVote_stddev_pop_fields
  stddev_samp: DelegationVote_stddev_samp_fields
  sum: DelegationVote_sum_fields
  var_pop: DelegationVote_var_pop_fields
  var_samp: DelegationVote_var_samp_fields
  variance: DelegationVote_variance_fields
}

"""aggregate avg on columns"""
type DelegationVote_avg_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "DelegationVote". All fields are combined with a logical 'AND'.
"""
input DelegationVote_bool_exp {
  _and: [DelegationVote_bool_exp!]
  _not: DelegationVote_bool_exp
  _or: [DelegationVote_bool_exp!]
  address: String_comparison_exp
  drep: drep_hash_bool_exp
  drep_hash_id: bigint_comparison_exp
  id: bigint_comparison_exp
  redeemer: Redeemer_bool_exp
  redeemerId: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type DelegationVote_max_fields {
  address: String
  drep_hash_id: bigint
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type DelegationVote_min_fields {
  address: String
  drep_hash_id: bigint
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""Ordering options when selecting data from "DelegationVote"."""
input DelegationVote_order_by {
  address: order_by
  drep: drep_hash_order_by
  drep_hash_id: order_by
  id: order_by
  redeemer: Redeemer_order_by
  redeemerId: order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""
select columns of table "DelegationVote"
"""
enum DelegationVote_select_column {
  """column name"""
  address

  """column name"""
  drep_hash_id

  """column name"""
  id

  """column name"""
  redeemerId

  """column name"""
  tx_id
}

"""aggregate stddev on columns"""
type DelegationVote_stddev_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type DelegationVote_stddev_pop_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type DelegationVote_stddev_samp_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
Streaming cursor of the table "DelegationVote"
"""
input DelegationVote_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: DelegationVote_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input DelegationVote_stream_cursor_value_input {
  address: String
  drep_hash_id: bigint
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type DelegationVote_sum_fields {
  drep_hash_id: bigint
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate var_pop on columns"""
type DelegationVote_var_pop_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type DelegationVote_var_samp_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type DelegationVote_variance_fields {
  drep_hash_id: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
aggregated selection of "Delegation"
"""
type Delegation_aggregate {
  aggregate: Delegation_aggregate_fields
  nodes: [Delegation!]!
}

input Delegation_aggregate_bool_exp {
  count: Delegation_aggregate_bool_exp_count
}

input Delegation_aggregate_bool_exp_count {
  arguments: [Delegation_select_column!]
  distinct: Boolean
  filter: Delegation_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Delegation"
"""
type Delegation_aggregate_fields {
  avg: Delegation_avg_fields
  count(columns: [Delegation_select_column!], distinct: Boolean): Int!
  max: Delegation_max_fields
  min: Delegation_min_fields
  stddev: Delegation_stddev_fields
  stddev_pop: Delegation_stddev_pop_fields
  stddev_samp: Delegation_stddev_samp_fields
  sum: Delegation_sum_fields
  var_pop: Delegation_var_pop_fields
  var_samp: Delegation_var_samp_fields
  variance: Delegation_variance_fields
}

"""
order by aggregate values of table "Delegation"
"""
input Delegation_aggregate_order_by {
  avg: Delegation_avg_order_by
  count: order_by
  max: Delegation_max_order_by
  min: Delegation_min_order_by
  stddev: Delegation_stddev_order_by
  stddev_pop: Delegation_stddev_pop_order_by
  stddev_samp: Delegation_stddev_samp_order_by
  sum: Delegation_sum_order_by
  var_pop: Delegation_var_pop_order_by
  var_samp: Delegation_var_samp_order_by
  variance: Delegation_variance_order_by
}

"""
input type for inserting array relation for remote table "Delegation"
"""
input Delegation_arr_rel_insert_input {
  data: [Delegation_insert_input!]!
}

"""aggregate avg on columns"""
type Delegation_avg_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by avg() on columns of table "Delegation"
"""
input Delegation_avg_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "Delegation". All fields are combined with a logical 'AND'.
"""
input Delegation_bool_exp {
  _and: [Delegation_bool_exp!]
  _not: Delegation_bool_exp
  _or: [Delegation_bool_exp!]
  address: String_comparison_exp
  id: bigint_comparison_exp
  pool_hash_id: bigint_comparison_exp
  redeemer: Redeemer_bool_exp
  redeemerId: bigint_comparison_exp
  stakePool: StakePool_bool_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""
input type for inserting data into table "Delegation"
"""
input Delegation_insert_input {
  address: String
  id: bigint
  pool_hash_id: bigint
  redeemer: Redeemer_obj_rel_insert_input
  redeemerId: bigint
  stakePool: StakePool_obj_rel_insert_input
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
}

"""aggregate max on columns"""
type Delegation_max_fields {
  address: String
  id: bigint
  pool_hash_id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "Delegation"
"""
input Delegation_max_order_by {
  address: order_by
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type Delegation_min_fields {
  address: String
  id: bigint
  pool_hash_id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "Delegation"
"""
input Delegation_min_order_by {
  address: order_by
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""Ordering options when selecting data from "Delegation"."""
input Delegation_order_by {
  address: order_by
  id: order_by
  pool_hash_id: order_by
  redeemer: Redeemer_order_by
  redeemerId: order_by
  stakePool: StakePool_order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""
select columns of table "Delegation"
"""
enum Delegation_select_column {
  """column name"""
  address

  """column name"""
  id

  """column name"""
  pool_hash_id

  """column name"""
  redeemerId

  """column name"""
  tx_id
}

"""aggregate stddev on columns"""
type Delegation_stddev_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "Delegation"
"""
input Delegation_stddev_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type Delegation_stddev_pop_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "Delegation"
"""
input Delegation_stddev_pop_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type Delegation_stddev_samp_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "Delegation"
"""
input Delegation_stddev_samp_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""
Streaming cursor of the table "Delegation"
"""
input Delegation_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Delegation_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Delegation_stream_cursor_value_input {
  address: String
  id: bigint
  pool_hash_id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type Delegation_sum_fields {
  id: bigint
  pool_hash_id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "Delegation"
"""
input Delegation_sum_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate var_pop on columns"""
type Delegation_var_pop_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "Delegation"
"""
input Delegation_var_pop_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type Delegation_var_samp_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "Delegation"
"""
input Delegation_var_samp_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type Delegation_variance_fields {
  id: Float
  pool_hash_id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by variance() on columns of table "Delegation"
"""
input Delegation_variance_order_by {
  id: order_by
  pool_hash_id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""
columns and relationships of "DrepRegistration"
"""
type DrepRegistration {
  DRepId: String
  deposit: bigint
  id: bigint

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint

  """An object relationship"""
  votingAnchor: voting_anchor
  voting_anchor_id: bigint
}

"""
aggregated selection of "DrepRegistration"
"""
type DrepRegistration_aggregate {
  aggregate: DrepRegistration_aggregate_fields
  nodes: [DrepRegistration!]!
}

"""
aggregate fields of "DrepRegistration"
"""
type DrepRegistration_aggregate_fields {
  avg: DrepRegistration_avg_fields
  count(columns: [DrepRegistration_select_column!], distinct: Boolean): Int!
  max: DrepRegistration_max_fields
  min: DrepRegistration_min_fields
  stddev: DrepRegistration_stddev_fields
  stddev_pop: DrepRegistration_stddev_pop_fields
  stddev_samp: DrepRegistration_stddev_samp_fields
  sum: DrepRegistration_sum_fields
  var_pop: DrepRegistration_var_pop_fields
  var_samp: DrepRegistration_var_samp_fields
  variance: DrepRegistration_variance_fields
}

"""aggregate avg on columns"""
type DrepRegistration_avg_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Boolean expression to filter rows from the table "DrepRegistration". All fields are combined with a logical 'AND'.
"""
input DrepRegistration_bool_exp {
  DRepId: String_comparison_exp
  _and: [DrepRegistration_bool_exp!]
  _not: DrepRegistration_bool_exp
  _or: [DrepRegistration_bool_exp!]
  deposit: bigint_comparison_exp
  id: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
  votingAnchor: voting_anchor_bool_exp
  voting_anchor_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type DrepRegistration_max_fields {
  DRepId: String
  deposit: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""aggregate min on columns"""
type DrepRegistration_min_fields {
  DRepId: String
  deposit: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""Ordering options when selecting data from "DrepRegistration"."""
input DrepRegistration_order_by {
  DRepId: order_by
  deposit: order_by
  id: order_by
  transaction: Transaction_order_by
  tx_id: order_by
  votingAnchor: voting_anchor_order_by
  voting_anchor_id: order_by
}

"""
select columns of table "DrepRegistration"
"""
enum DrepRegistration_select_column {
  """column name"""
  DRepId

  """column name"""
  deposit

  """column name"""
  id

  """column name"""
  tx_id

  """column name"""
  voting_anchor_id
}

"""aggregate stddev on columns"""
type DrepRegistration_stddev_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_pop on columns"""
type DrepRegistration_stddev_pop_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_samp on columns"""
type DrepRegistration_stddev_samp_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Streaming cursor of the table "DrepRegistration"
"""
input DrepRegistration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: DrepRegistration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input DrepRegistration_stream_cursor_value_input {
  DRepId: String
  deposit: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""aggregate sum on columns"""
type DrepRegistration_sum_fields {
  deposit: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""aggregate var_pop on columns"""
type DrepRegistration_var_pop_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate var_samp on columns"""
type DrepRegistration_var_samp_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate variance on columns"""
type DrepRegistration_variance_fields {
  deposit: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
columns and relationships of "Epoch"
"""
type Epoch {
  """An array relationship"""
  activeStake(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): [ActiveStake!]!

  """An aggregate relationship"""
  activeStake_aggregate(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): ActiveStake_aggregate!

  """An object relationship"""
  adaPots: ada_pots

  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): [Block!]!
  blocksCount: Int

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): Block_aggregate!
  fees: numeric
  lastBlockTime: timestamp
  nonce: bytea
  number: Int
  output: numeric

  """An object relationship"""
  protocolParams: ProtocolParams
  startedAt: timestamp
  transactionsCount: Int
}

"""
aggregated selection of "Epoch"
"""
type Epoch_aggregate {
  aggregate: Epoch_aggregate_fields
  nodes: [Epoch!]!
}

"""
aggregate fields of "Epoch"
"""
type Epoch_aggregate_fields {
  avg: Epoch_avg_fields
  count(columns: [Epoch_select_column!], distinct: Boolean): Int!
  max: Epoch_max_fields
  min: Epoch_min_fields
  stddev: Epoch_stddev_fields
  stddev_pop: Epoch_stddev_pop_fields
  stddev_samp: Epoch_stddev_samp_fields
  sum: Epoch_sum_fields
  var_pop: Epoch_var_pop_fields
  var_samp: Epoch_var_samp_fields
  variance: Epoch_variance_fields
}

"""aggregate avg on columns"""
type Epoch_avg_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""
Boolean expression to filter rows from the table "Epoch". All fields are combined with a logical 'AND'.
"""
input Epoch_bool_exp {
  _and: [Epoch_bool_exp!]
  _not: Epoch_bool_exp
  _or: [Epoch_bool_exp!]
  activeStake: ActiveStake_bool_exp
  activeStake_aggregate: ActiveStake_aggregate_bool_exp
  adaPots: ada_pots_bool_exp
  blocks: Block_bool_exp
  blocksCount: Int_comparison_exp
  blocks_aggregate: Block_aggregate_bool_exp
  fees: numeric_comparison_exp
  lastBlockTime: timestamp_comparison_exp
  nonce: bytea_comparison_exp
  number: Int_comparison_exp
  output: numeric_comparison_exp
  protocolParams: ProtocolParams_bool_exp
  startedAt: timestamp_comparison_exp
  transactionsCount: Int_comparison_exp
}

"""
input type for inserting data into table "Epoch"
"""
input Epoch_insert_input {
  activeStake: ActiveStake_arr_rel_insert_input
  adaPots: ada_pots_obj_rel_insert_input
  blocks: Block_arr_rel_insert_input
  blocksCount: Int
  fees: numeric
  lastBlockTime: timestamp
  nonce: bytea
  number: Int
  output: numeric
  protocolParams: ProtocolParams_obj_rel_insert_input
  startedAt: timestamp
  transactionsCount: Int
}

"""aggregate max on columns"""
type Epoch_max_fields {
  blocksCount: Int
  fees: numeric
  lastBlockTime: timestamp
  number: Int
  output: numeric
  startedAt: timestamp
  transactionsCount: Int
}

"""aggregate min on columns"""
type Epoch_min_fields {
  blocksCount: Int
  fees: numeric
  lastBlockTime: timestamp
  number: Int
  output: numeric
  startedAt: timestamp
  transactionsCount: Int
}

"""
input type for inserting object relation for remote table "Epoch"
"""
input Epoch_obj_rel_insert_input {
  data: Epoch_insert_input!
}

"""Ordering options when selecting data from "Epoch"."""
input Epoch_order_by {
  activeStake_aggregate: ActiveStake_aggregate_order_by
  adaPots: ada_pots_order_by
  blocksCount: order_by
  blocks_aggregate: Block_aggregate_order_by
  fees: order_by
  lastBlockTime: order_by
  nonce: order_by
  number: order_by
  output: order_by
  protocolParams: ProtocolParams_order_by
  startedAt: order_by
  transactionsCount: order_by
}

"""
select columns of table "Epoch"
"""
enum Epoch_select_column {
  """column name"""
  blocksCount

  """column name"""
  fees

  """column name"""
  lastBlockTime

  """column name"""
  nonce

  """column name"""
  number

  """column name"""
  output

  """column name"""
  startedAt

  """column name"""
  transactionsCount
}

"""aggregate stddev on columns"""
type Epoch_stddev_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""aggregate stddev_pop on columns"""
type Epoch_stddev_pop_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""aggregate stddev_samp on columns"""
type Epoch_stddev_samp_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""
Streaming cursor of the table "Epoch"
"""
input Epoch_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Epoch_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Epoch_stream_cursor_value_input {
  blocksCount: Int
  fees: numeric
  lastBlockTime: timestamp
  nonce: bytea
  number: Int
  output: numeric
  startedAt: timestamp
  transactionsCount: Int
}

"""aggregate sum on columns"""
type Epoch_sum_fields {
  blocksCount: Int
  fees: numeric
  number: Int
  output: numeric
  transactionsCount: Int
}

"""aggregate var_pop on columns"""
type Epoch_var_pop_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""aggregate var_samp on columns"""
type Epoch_var_samp_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""aggregate variance on columns"""
type Epoch_variance_fields {
  blocksCount: Float
  fees: Float
  number: Float
  output: Float
  transactionsCount: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "ProtocolParams"
"""
type ProtocolParams {
  a0: float8
  coinsPerUtxoByte: numeric
  collateralPercent: Int
  costModels(
    """JSON select path"""
    path: String
  ): jsonb
  decentralisationParam: float8
  eMax: Int
  epoch_no: Int
  extraEntropy: bytea
  keyDeposit: numeric
  maxBlockBodySize: Int
  maxBlockExMem: numeric
  maxBlockExSteps: numeric
  maxBlockHeaderSize: Int
  maxCollateralInputs: Int
  maxTxExMem: numeric
  maxTxExSteps: numeric
  maxTxSize: Int
  maxValSize: numeric
  minFeeA: Int
  minFeeB: Int
  minPoolCost: numeric
  minUTxOValue: numeric
  nOpt: Int
  poolDeposit: numeric
  priceMem: float8
  priceStep: float8
  protocolVersion(
    """JSON select path"""
    path: String
  ): jsonb
  rho: float8
  tau: float8
}

"""
aggregated selection of "ProtocolParams"
"""
type ProtocolParams_aggregate {
  aggregate: ProtocolParams_aggregate_fields
  nodes: [ProtocolParams!]!
}

"""
aggregate fields of "ProtocolParams"
"""
type ProtocolParams_aggregate_fields {
  avg: ProtocolParams_avg_fields
  count(columns: [ProtocolParams_select_column!], distinct: Boolean): Int!
  max: ProtocolParams_max_fields
  min: ProtocolParams_min_fields
  stddev: ProtocolParams_stddev_fields
  stddev_pop: ProtocolParams_stddev_pop_fields
  stddev_samp: ProtocolParams_stddev_samp_fields
  sum: ProtocolParams_sum_fields
  var_pop: ProtocolParams_var_pop_fields
  var_samp: ProtocolParams_var_samp_fields
  variance: ProtocolParams_variance_fields
}

"""aggregate avg on columns"""
type ProtocolParams_avg_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""
Boolean expression to filter rows from the table "ProtocolParams". All fields are combined with a logical 'AND'.
"""
input ProtocolParams_bool_exp {
  _and: [ProtocolParams_bool_exp!]
  _not: ProtocolParams_bool_exp
  _or: [ProtocolParams_bool_exp!]
  a0: float8_comparison_exp
  coinsPerUtxoByte: numeric_comparison_exp
  collateralPercent: Int_comparison_exp
  costModels: jsonb_comparison_exp
  decentralisationParam: float8_comparison_exp
  eMax: Int_comparison_exp
  epoch_no: Int_comparison_exp
  extraEntropy: bytea_comparison_exp
  keyDeposit: numeric_comparison_exp
  maxBlockBodySize: Int_comparison_exp
  maxBlockExMem: numeric_comparison_exp
  maxBlockExSteps: numeric_comparison_exp
  maxBlockHeaderSize: Int_comparison_exp
  maxCollateralInputs: Int_comparison_exp
  maxTxExMem: numeric_comparison_exp
  maxTxExSteps: numeric_comparison_exp
  maxTxSize: Int_comparison_exp
  maxValSize: numeric_comparison_exp
  minFeeA: Int_comparison_exp
  minFeeB: Int_comparison_exp
  minPoolCost: numeric_comparison_exp
  minUTxOValue: numeric_comparison_exp
  nOpt: Int_comparison_exp
  poolDeposit: numeric_comparison_exp
  priceMem: float8_comparison_exp
  priceStep: float8_comparison_exp
  protocolVersion: jsonb_comparison_exp
  rho: float8_comparison_exp
  tau: float8_comparison_exp
}

"""
input type for inserting data into table "ProtocolParams"
"""
input ProtocolParams_insert_input {
  a0: float8
  coinsPerUtxoByte: numeric
  collateralPercent: Int
  costModels: jsonb
  decentralisationParam: float8
  eMax: Int
  epoch_no: Int
  extraEntropy: bytea
  keyDeposit: numeric
  maxBlockBodySize: Int
  maxBlockExMem: numeric
  maxBlockExSteps: numeric
  maxBlockHeaderSize: Int
  maxCollateralInputs: Int
  maxTxExMem: numeric
  maxTxExSteps: numeric
  maxTxSize: Int
  maxValSize: numeric
  minFeeA: Int
  minFeeB: Int
  minPoolCost: numeric
  minUTxOValue: numeric
  nOpt: Int
  poolDeposit: numeric
  priceMem: float8
  priceStep: float8
  protocolVersion: jsonb
  rho: float8
  tau: float8
}

"""aggregate max on columns"""
type ProtocolParams_max_fields {
  a0: float8
  coinsPerUtxoByte: numeric
  collateralPercent: Int
  decentralisationParam: float8
  eMax: Int
  epoch_no: Int
  keyDeposit: numeric
  maxBlockBodySize: Int
  maxBlockExMem: numeric
  maxBlockExSteps: numeric
  maxBlockHeaderSize: Int
  maxCollateralInputs: Int
  maxTxExMem: numeric
  maxTxExSteps: numeric
  maxTxSize: Int
  maxValSize: numeric
  minFeeA: Int
  minFeeB: Int
  minPoolCost: numeric
  minUTxOValue: numeric
  nOpt: Int
  poolDeposit: numeric
  priceMem: float8
  priceStep: float8
  rho: float8
  tau: float8
}

"""aggregate min on columns"""
type ProtocolParams_min_fields {
  a0: float8
  coinsPerUtxoByte: numeric
  collateralPercent: Int
  decentralisationParam: float8
  eMax: Int
  epoch_no: Int
  keyDeposit: numeric
  maxBlockBodySize: Int
  maxBlockExMem: numeric
  maxBlockExSteps: numeric
  maxBlockHeaderSize: Int
  maxCollateralInputs: Int
  maxTxExMem: numeric
  maxTxExSteps: numeric
  maxTxSize: Int
  maxValSize: numeric
  minFeeA: Int
  minFeeB: Int
  minPoolCost: numeric
  minUTxOValue: numeric
  nOpt: Int
  poolDeposit: numeric
  priceMem: float8
  priceStep: float8
  rho: float8
  tau: float8
}

"""
input type for inserting object relation for remote table "ProtocolParams"
"""
input ProtocolParams_obj_rel_insert_input {
  data: ProtocolParams_insert_input!
}

"""Ordering options when selecting data from "ProtocolParams"."""
input ProtocolParams_order_by {
  a0: order_by
  coinsPerUtxoByte: order_by
  collateralPercent: order_by
  costModels: order_by
  decentralisationParam: order_by
  eMax: order_by
  epoch_no: order_by
  extraEntropy: order_by
  keyDeposit: order_by
  maxBlockBodySize: order_by
  maxBlockExMem: order_by
  maxBlockExSteps: order_by
  maxBlockHeaderSize: order_by
  maxCollateralInputs: order_by
  maxTxExMem: order_by
  maxTxExSteps: order_by
  maxTxSize: order_by
  maxValSize: order_by
  minFeeA: order_by
  minFeeB: order_by
  minPoolCost: order_by
  minUTxOValue: order_by
  nOpt: order_by
  poolDeposit: order_by
  priceMem: order_by
  priceStep: order_by
  protocolVersion: order_by
  rho: order_by
  tau: order_by
}

"""
select columns of table "ProtocolParams"
"""
enum ProtocolParams_select_column {
  """column name"""
  a0

  """column name"""
  coinsPerUtxoByte

  """column name"""
  collateralPercent

  """column name"""
  costModels

  """column name"""
  decentralisationParam

  """column name"""
  eMax

  """column name"""
  epoch_no

  """column name"""
  extraEntropy

  """column name"""
  keyDeposit

  """column name"""
  maxBlockBodySize

  """column name"""
  maxBlockExMem

  """column name"""
  maxBlockExSteps

  """column name"""
  maxBlockHeaderSize

  """column name"""
  maxCollateralInputs

  """column name"""
  maxTxExMem

  """column name"""
  maxTxExSteps

  """column name"""
  maxTxSize

  """column name"""
  maxValSize

  """column name"""
  minFeeA

  """column name"""
  minFeeB

  """column name"""
  minPoolCost

  """column name"""
  minUTxOValue

  """column name"""
  nOpt

  """column name"""
  poolDeposit

  """column name"""
  priceMem

  """column name"""
  priceStep

  """column name"""
  protocolVersion

  """column name"""
  rho

  """column name"""
  tau
}

"""aggregate stddev on columns"""
type ProtocolParams_stddev_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""aggregate stddev_pop on columns"""
type ProtocolParams_stddev_pop_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""aggregate stddev_samp on columns"""
type ProtocolParams_stddev_samp_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""
Streaming cursor of the table "ProtocolParams"
"""
input ProtocolParams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ProtocolParams_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ProtocolParams_stream_cursor_value_input {
  a0: float8
  coinsPerUtxoByte: numeric
  collateralPercent: Int
  costModels: jsonb
  decentralisationParam: float8
  eMax: Int
  epoch_no: Int
  extraEntropy: bytea
  keyDeposit: numeric
  maxBlockBodySize: Int
  maxBlockExMem: numeric
  maxBlockExSteps: numeric
  maxBlockHeaderSize: Int
  maxCollateralInputs: Int
  maxTxExMem: numeric
  maxTxExSteps: numeric
  maxTxSize: Int
  maxValSize: numeric
  minFeeA: Int
  minFeeB: Int
  minPoolCost: numeric
  minUTxOValue: numeric
  nOpt: Int
  poolDeposit: numeric
  priceMem: float8
  priceStep: float8
  protocolVersion: jsonb
  rho: float8
  tau: float8
}

"""aggregate sum on columns"""
type ProtocolParams_sum_fields {
  a0: float8
  coinsPerUtxoByte: numeric
  collateralPercent: Int
  decentralisationParam: float8
  eMax: Int
  epoch_no: Int
  keyDeposit: numeric
  maxBlockBodySize: Int
  maxBlockExMem: numeric
  maxBlockExSteps: numeric
  maxBlockHeaderSize: Int
  maxCollateralInputs: Int
  maxTxExMem: numeric
  maxTxExSteps: numeric
  maxTxSize: Int
  maxValSize: numeric
  minFeeA: Int
  minFeeB: Int
  minPoolCost: numeric
  minUTxOValue: numeric
  nOpt: Int
  poolDeposit: numeric
  priceMem: float8
  priceStep: float8
  rho: float8
  tau: float8
}

"""aggregate var_pop on columns"""
type ProtocolParams_var_pop_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""aggregate var_samp on columns"""
type ProtocolParams_var_samp_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""aggregate variance on columns"""
type ProtocolParams_variance_fields {
  a0: Float
  coinsPerUtxoByte: Float
  collateralPercent: Float
  decentralisationParam: Float
  eMax: Float
  epoch_no: Float
  keyDeposit: Float
  maxBlockBodySize: Float
  maxBlockExMem: Float
  maxBlockExSteps: Float
  maxBlockHeaderSize: Float
  maxCollateralInputs: Float
  maxTxExMem: Float
  maxTxExSteps: Float
  maxTxSize: Float
  maxValSize: Float
  minFeeA: Float
  minFeeB: Float
  minPoolCost: Float
  minUTxOValue: Float
  nOpt: Float
  poolDeposit: Float
  priceMem: Float
  priceStep: Float
  rho: Float
  tau: Float
}

"""
columns and relationships of "Redeemer"
"""
type Redeemer {
  """An object relationship"""
  datum: RedeemerDatum
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  redeemer_datum_id: bigint
  scriptHash: bytea

  """An object relationship"""
  transaction: Transaction
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""
columns and relationships of "RedeemerDatum"
"""
type RedeemerDatum {
  bytes: bytea

  """An object relationship"""
  firstIncludedIn: Transaction
  hash: bytea
  id: bigint
  tx_id: bigint
  value(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "RedeemerDatum"
"""
type RedeemerDatum_aggregate {
  aggregate: RedeemerDatum_aggregate_fields
  nodes: [RedeemerDatum!]!
}

"""
aggregate fields of "RedeemerDatum"
"""
type RedeemerDatum_aggregate_fields {
  avg: RedeemerDatum_avg_fields
  count(columns: [RedeemerDatum_select_column!], distinct: Boolean): Int!
  max: RedeemerDatum_max_fields
  min: RedeemerDatum_min_fields
  stddev: RedeemerDatum_stddev_fields
  stddev_pop: RedeemerDatum_stddev_pop_fields
  stddev_samp: RedeemerDatum_stddev_samp_fields
  sum: RedeemerDatum_sum_fields
  var_pop: RedeemerDatum_var_pop_fields
  var_samp: RedeemerDatum_var_samp_fields
  variance: RedeemerDatum_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input RedeemerDatum_append_input {
  value: jsonb
}

"""aggregate avg on columns"""
type RedeemerDatum_avg_fields {
  id: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "RedeemerDatum". All fields are combined with a logical 'AND'.
"""
input RedeemerDatum_bool_exp {
  _and: [RedeemerDatum_bool_exp!]
  _not: RedeemerDatum_bool_exp
  _or: [RedeemerDatum_bool_exp!]
  bytes: bytea_comparison_exp
  firstIncludedIn: Transaction_bool_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
  value: jsonb_comparison_exp
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input RedeemerDatum_delete_at_path_input {
  value: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input RedeemerDatum_delete_elem_input {
  value: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input RedeemerDatum_delete_key_input {
  value: String
}

"""
input type for incrementing numeric columns in table "RedeemerDatum"
"""
input RedeemerDatum_inc_input {
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "RedeemerDatum"
"""
input RedeemerDatum_insert_input {
  bytes: bytea
  firstIncludedIn: Transaction_obj_rel_insert_input
  hash: bytea
  id: bigint
  tx_id: bigint
  value: jsonb
}

"""aggregate max on columns"""
type RedeemerDatum_max_fields {
  id: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type RedeemerDatum_min_fields {
  id: bigint
  tx_id: bigint
}

"""
response of any mutation on the table "RedeemerDatum"
"""
type RedeemerDatum_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [RedeemerDatum!]!
}

"""
input type for inserting object relation for remote table "RedeemerDatum"
"""
input RedeemerDatum_obj_rel_insert_input {
  data: RedeemerDatum_insert_input!
}

"""Ordering options when selecting data from "RedeemerDatum"."""
input RedeemerDatum_order_by {
  bytes: order_by
  firstIncludedIn: Transaction_order_by
  hash: order_by
  id: order_by
  tx_id: order_by
  value: order_by
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input RedeemerDatum_prepend_input {
  value: jsonb
}

"""
select columns of table "RedeemerDatum"
"""
enum RedeemerDatum_select_column {
  """column name"""
  bytes

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  tx_id

  """column name"""
  value
}

"""
input type for updating data in table "RedeemerDatum"
"""
input RedeemerDatum_set_input {
  bytes: bytea
  hash: bytea
  id: bigint
  tx_id: bigint
  value: jsonb
}

"""aggregate stddev on columns"""
type RedeemerDatum_stddev_fields {
  id: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type RedeemerDatum_stddev_pop_fields {
  id: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type RedeemerDatum_stddev_samp_fields {
  id: Float
  tx_id: Float
}

"""
Streaming cursor of the table "RedeemerDatum"
"""
input RedeemerDatum_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: RedeemerDatum_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input RedeemerDatum_stream_cursor_value_input {
  bytes: bytea
  hash: bytea
  id: bigint
  tx_id: bigint
  value: jsonb
}

"""aggregate sum on columns"""
type RedeemerDatum_sum_fields {
  id: bigint
  tx_id: bigint
}

input RedeemerDatum_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: RedeemerDatum_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: RedeemerDatum_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: RedeemerDatum_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: RedeemerDatum_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: RedeemerDatum_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: RedeemerDatum_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: RedeemerDatum_set_input

  """filter the rows which have to be updated"""
  where: RedeemerDatum_bool_exp!
}

"""aggregate var_pop on columns"""
type RedeemerDatum_var_pop_fields {
  id: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type RedeemerDatum_var_samp_fields {
  id: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type RedeemerDatum_variance_fields {
  id: Float
  tx_id: Float
}

"""
aggregated selection of "Redeemer"
"""
type Redeemer_aggregate {
  aggregate: Redeemer_aggregate_fields
  nodes: [Redeemer!]!
}

input Redeemer_aggregate_bool_exp {
  count: Redeemer_aggregate_bool_exp_count
}

input Redeemer_aggregate_bool_exp_count {
  arguments: [Redeemer_select_column!]
  distinct: Boolean
  filter: Redeemer_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Redeemer"
"""
type Redeemer_aggregate_fields {
  avg: Redeemer_avg_fields
  count(columns: [Redeemer_select_column!], distinct: Boolean): Int!
  max: Redeemer_max_fields
  min: Redeemer_min_fields
  stddev: Redeemer_stddev_fields
  stddev_pop: Redeemer_stddev_pop_fields
  stddev_samp: Redeemer_stddev_samp_fields
  sum: Redeemer_sum_fields
  var_pop: Redeemer_var_pop_fields
  var_samp: Redeemer_var_samp_fields
  variance: Redeemer_variance_fields
}

"""
order by aggregate values of table "Redeemer"
"""
input Redeemer_aggregate_order_by {
  avg: Redeemer_avg_order_by
  count: order_by
  max: Redeemer_max_order_by
  min: Redeemer_min_order_by
  stddev: Redeemer_stddev_order_by
  stddev_pop: Redeemer_stddev_pop_order_by
  stddev_samp: Redeemer_stddev_samp_order_by
  sum: Redeemer_sum_order_by
  var_pop: Redeemer_var_pop_order_by
  var_samp: Redeemer_var_samp_order_by
  variance: Redeemer_variance_order_by
}

"""
input type for inserting array relation for remote table "Redeemer"
"""
input Redeemer_arr_rel_insert_input {
  data: [Redeemer_insert_input!]!
}

"""aggregate avg on columns"""
type Redeemer_avg_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by avg() on columns of table "Redeemer"
"""
input Redeemer_avg_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""
Boolean expression to filter rows from the table "Redeemer". All fields are combined with a logical 'AND'.
"""
input Redeemer_bool_exp {
  _and: [Redeemer_bool_exp!]
  _not: Redeemer_bool_exp
  _or: [Redeemer_bool_exp!]
  datum: RedeemerDatum_bool_exp
  fee: numeric_comparison_exp
  id: bigint_comparison_exp
  index: Int_comparison_exp
  purpose: scriptpurposetype_comparison_exp
  redeemer_datum_id: bigint_comparison_exp
  scriptHash: bytea_comparison_exp
  transaction: Transaction_bool_exp
  txId: bigint_comparison_exp
  unitMem: bigint_comparison_exp
  unitSteps: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "Redeemer"
"""
input Redeemer_inc_input {
  fee: numeric
  id: bigint
  index: Int
  redeemer_datum_id: bigint
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""
input type for inserting data into table "Redeemer"
"""
input Redeemer_insert_input {
  datum: RedeemerDatum_obj_rel_insert_input
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  redeemer_datum_id: bigint
  scriptHash: bytea
  transaction: Transaction_obj_rel_insert_input
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""aggregate max on columns"""
type Redeemer_max_fields {
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  redeemer_datum_id: bigint
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""
order by max() on columns of table "Redeemer"
"""
input Redeemer_max_order_by {
  fee: order_by
  id: order_by
  index: order_by
  purpose: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""aggregate min on columns"""
type Redeemer_min_fields {
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  redeemer_datum_id: bigint
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""
order by min() on columns of table "Redeemer"
"""
input Redeemer_min_order_by {
  fee: order_by
  id: order_by
  index: order_by
  purpose: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""
response of any mutation on the table "Redeemer"
"""
type Redeemer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Redeemer!]!
}

"""
input type for inserting object relation for remote table "Redeemer"
"""
input Redeemer_obj_rel_insert_input {
  data: Redeemer_insert_input!
}

"""Ordering options when selecting data from "Redeemer"."""
input Redeemer_order_by {
  datum: RedeemerDatum_order_by
  fee: order_by
  id: order_by
  index: order_by
  purpose: order_by
  redeemer_datum_id: order_by
  scriptHash: order_by
  transaction: Transaction_order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""
select columns of table "Redeemer"
"""
enum Redeemer_select_column {
  """column name"""
  fee

  """column name"""
  id

  """column name"""
  index

  """column name"""
  purpose

  """column name"""
  redeemer_datum_id

  """column name"""
  scriptHash

  """column name"""
  txId

  """column name"""
  unitMem

  """column name"""
  unitSteps
}

"""
input type for updating data in table "Redeemer"
"""
input Redeemer_set_input {
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  redeemer_datum_id: bigint
  scriptHash: bytea
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""aggregate stddev on columns"""
type Redeemer_stddev_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by stddev() on columns of table "Redeemer"
"""
input Redeemer_stddev_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""aggregate stddev_pop on columns"""
type Redeemer_stddev_pop_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by stddev_pop() on columns of table "Redeemer"
"""
input Redeemer_stddev_pop_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""aggregate stddev_samp on columns"""
type Redeemer_stddev_samp_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by stddev_samp() on columns of table "Redeemer"
"""
input Redeemer_stddev_samp_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""
Streaming cursor of the table "Redeemer"
"""
input Redeemer_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Redeemer_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Redeemer_stream_cursor_value_input {
  fee: numeric
  id: bigint
  index: Int
  purpose: scriptpurposetype
  redeemer_datum_id: bigint
  scriptHash: bytea
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""aggregate sum on columns"""
type Redeemer_sum_fields {
  fee: numeric
  id: bigint
  index: Int
  redeemer_datum_id: bigint
  txId: bigint
  unitMem: bigint
  unitSteps: bigint
}

"""
order by sum() on columns of table "Redeemer"
"""
input Redeemer_sum_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

input Redeemer_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Redeemer_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Redeemer_set_input

  """filter the rows which have to be updated"""
  where: Redeemer_bool_exp!
}

"""aggregate var_pop on columns"""
type Redeemer_var_pop_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by var_pop() on columns of table "Redeemer"
"""
input Redeemer_var_pop_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""aggregate var_samp on columns"""
type Redeemer_var_samp_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by var_samp() on columns of table "Redeemer"
"""
input Redeemer_var_samp_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""aggregate variance on columns"""
type Redeemer_variance_fields {
  fee: Float
  id: Float
  index: Float
  redeemer_datum_id: Float
  txId: Float
  unitMem: Float
  unitSteps: Float
}

"""
order by variance() on columns of table "Redeemer"
"""
input Redeemer_variance_order_by {
  fee: order_by
  id: order_by
  index: order_by
  redeemer_datum_id: order_by
  txId: order_by
  unitMem: order_by
  unitSteps: order_by
}

"""
columns and relationships of "ReferenceInput"
"""
type ReferenceInput {
  address: String

  """An object relationship"""
  sourceTransaction: Transaction
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """An object relationship"""
  transaction: Transaction
  txHash: bytea
  value: numeric
}

"""
aggregated selection of "ReferenceInput"
"""
type ReferenceInput_aggregate {
  aggregate: ReferenceInput_aggregate_fields
  nodes: [ReferenceInput!]!
}

input ReferenceInput_aggregate_bool_exp {
  count: ReferenceInput_aggregate_bool_exp_count
}

input ReferenceInput_aggregate_bool_exp_count {
  arguments: [ReferenceInput_select_column!]
  distinct: Boolean
  filter: ReferenceInput_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "ReferenceInput"
"""
type ReferenceInput_aggregate_fields {
  avg: ReferenceInput_avg_fields
  count(columns: [ReferenceInput_select_column!], distinct: Boolean): Int!
  max: ReferenceInput_max_fields
  min: ReferenceInput_min_fields
  stddev: ReferenceInput_stddev_fields
  stddev_pop: ReferenceInput_stddev_pop_fields
  stddev_samp: ReferenceInput_stddev_samp_fields
  sum: ReferenceInput_sum_fields
  var_pop: ReferenceInput_var_pop_fields
  var_samp: ReferenceInput_var_samp_fields
  variance: ReferenceInput_variance_fields
}

"""
order by aggregate values of table "ReferenceInput"
"""
input ReferenceInput_aggregate_order_by {
  avg: ReferenceInput_avg_order_by
  count: order_by
  max: ReferenceInput_max_order_by
  min: ReferenceInput_min_order_by
  stddev: ReferenceInput_stddev_order_by
  stddev_pop: ReferenceInput_stddev_pop_order_by
  stddev_samp: ReferenceInput_stddev_samp_order_by
  sum: ReferenceInput_sum_order_by
  var_pop: ReferenceInput_var_pop_order_by
  var_samp: ReferenceInput_var_samp_order_by
  variance: ReferenceInput_variance_order_by
}

"""
input type for inserting array relation for remote table "ReferenceInput"
"""
input ReferenceInput_arr_rel_insert_input {
  data: [ReferenceInput_insert_input!]!
}

"""aggregate avg on columns"""
type ReferenceInput_avg_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by avg() on columns of table "ReferenceInput"
"""
input ReferenceInput_avg_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "ReferenceInput". All fields are combined with a logical 'AND'.
"""
input ReferenceInput_bool_exp {
  _and: [ReferenceInput_bool_exp!]
  _not: ReferenceInput_bool_exp
  _or: [ReferenceInput_bool_exp!]
  address: String_comparison_exp
  sourceTransaction: Transaction_bool_exp
  sourceTxHash: bytea_comparison_exp
  sourceTxIndex: smallint_comparison_exp
  source_tx_out_id: bigint_comparison_exp
  tokens: TokenInOutput_bool_exp
  tokens_aggregate: TokenInOutput_aggregate_bool_exp
  transaction: Transaction_bool_exp
  txHash: bytea_comparison_exp
  value: numeric_comparison_exp
}

"""
input type for inserting data into table "ReferenceInput"
"""
input ReferenceInput_insert_input {
  address: String
  sourceTransaction: Transaction_obj_rel_insert_input
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  tokens: TokenInOutput_arr_rel_insert_input
  transaction: Transaction_obj_rel_insert_input
  txHash: bytea
  value: numeric
}

"""aggregate max on columns"""
type ReferenceInput_max_fields {
  address: String
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by max() on columns of table "ReferenceInput"
"""
input ReferenceInput_max_order_by {
  address: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type ReferenceInput_min_fields {
  address: String
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by min() on columns of table "ReferenceInput"
"""
input ReferenceInput_min_order_by {
  address: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""Ordering options when selecting data from "ReferenceInput"."""
input ReferenceInput_order_by {
  address: order_by
  sourceTransaction: Transaction_order_by
  sourceTxHash: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  tokens_aggregate: TokenInOutput_aggregate_order_by
  transaction: Transaction_order_by
  txHash: order_by
  value: order_by
}

"""
select columns of table "ReferenceInput"
"""
enum ReferenceInput_select_column {
  """column name"""
  address

  """column name"""
  sourceTxHash

  """column name"""
  sourceTxIndex

  """column name"""
  source_tx_out_id

  """column name"""
  txHash

  """column name"""
  value
}

"""aggregate stddev on columns"""
type ReferenceInput_stddev_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev() on columns of table "ReferenceInput"
"""
input ReferenceInput_stddev_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type ReferenceInput_stddev_pop_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "ReferenceInput"
"""
input ReferenceInput_stddev_pop_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type ReferenceInput_stddev_samp_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "ReferenceInput"
"""
input ReferenceInput_stddev_samp_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
Streaming cursor of the table "ReferenceInput"
"""
input ReferenceInput_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ReferenceInput_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ReferenceInput_stream_cursor_value_input {
  address: String
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  txHash: bytea
  value: numeric
}

"""aggregate sum on columns"""
type ReferenceInput_sum_fields {
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "ReferenceInput"
"""
input ReferenceInput_sum_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type ReferenceInput_var_pop_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "ReferenceInput"
"""
input ReferenceInput_var_pop_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type ReferenceInput_var_samp_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "ReferenceInput"
"""
input ReferenceInput_var_samp_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type ReferenceInput_variance_fields {
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by variance() on columns of table "ReferenceInput"
"""
input ReferenceInput_variance_order_by {
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
columns and relationships of "Reward"
"""
type Reward {
  address: String
  amount: numeric

  """An object relationship"""
  earnedIn: Epoch
  earnedInEpochNo: bigint
  pool_hash_id: bigint

  """An object relationship"""
  receivedIn: Epoch
  receivedInEpochNo: bigint

  """An object relationship"""
  stakePool: StakePool
  type: rewardtype
}

"""
aggregated selection of "Reward"
"""
type Reward_aggregate {
  aggregate: Reward_aggregate_fields
  nodes: [Reward!]!
}

input Reward_aggregate_bool_exp {
  count: Reward_aggregate_bool_exp_count
}

input Reward_aggregate_bool_exp_count {
  arguments: [Reward_select_column!]
  distinct: Boolean
  filter: Reward_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Reward"
"""
type Reward_aggregate_fields {
  avg: Reward_avg_fields
  count(columns: [Reward_select_column!], distinct: Boolean): Int!
  max: Reward_max_fields
  min: Reward_min_fields
  stddev: Reward_stddev_fields
  stddev_pop: Reward_stddev_pop_fields
  stddev_samp: Reward_stddev_samp_fields
  sum: Reward_sum_fields
  var_pop: Reward_var_pop_fields
  var_samp: Reward_var_samp_fields
  variance: Reward_variance_fields
}

"""
order by aggregate values of table "Reward"
"""
input Reward_aggregate_order_by {
  avg: Reward_avg_order_by
  count: order_by
  max: Reward_max_order_by
  min: Reward_min_order_by
  stddev: Reward_stddev_order_by
  stddev_pop: Reward_stddev_pop_order_by
  stddev_samp: Reward_stddev_samp_order_by
  sum: Reward_sum_order_by
  var_pop: Reward_var_pop_order_by
  var_samp: Reward_var_samp_order_by
  variance: Reward_variance_order_by
}

"""
input type for inserting array relation for remote table "Reward"
"""
input Reward_arr_rel_insert_input {
  data: [Reward_insert_input!]!
}

"""aggregate avg on columns"""
type Reward_avg_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by avg() on columns of table "Reward"
"""
input Reward_avg_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""
Boolean expression to filter rows from the table "Reward". All fields are combined with a logical 'AND'.
"""
input Reward_bool_exp {
  _and: [Reward_bool_exp!]
  _not: Reward_bool_exp
  _or: [Reward_bool_exp!]
  address: String_comparison_exp
  amount: numeric_comparison_exp
  earnedIn: Epoch_bool_exp
  earnedInEpochNo: bigint_comparison_exp
  pool_hash_id: bigint_comparison_exp
  receivedIn: Epoch_bool_exp
  receivedInEpochNo: bigint_comparison_exp
  stakePool: StakePool_bool_exp
  type: rewardtype_comparison_exp
}

"""
input type for inserting data into table "Reward"
"""
input Reward_insert_input {
  address: String
  amount: numeric
  earnedIn: Epoch_obj_rel_insert_input
  earnedInEpochNo: bigint
  pool_hash_id: bigint
  receivedIn: Epoch_obj_rel_insert_input
  receivedInEpochNo: bigint
  stakePool: StakePool_obj_rel_insert_input
  type: rewardtype
}

"""aggregate max on columns"""
type Reward_max_fields {
  address: String
  amount: numeric
  earnedInEpochNo: bigint
  pool_hash_id: bigint
  receivedInEpochNo: bigint
  type: rewardtype
}

"""
order by max() on columns of table "Reward"
"""
input Reward_max_order_by {
  address: order_by
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
  type: order_by
}

"""aggregate min on columns"""
type Reward_min_fields {
  address: String
  amount: numeric
  earnedInEpochNo: bigint
  pool_hash_id: bigint
  receivedInEpochNo: bigint
  type: rewardtype
}

"""
order by min() on columns of table "Reward"
"""
input Reward_min_order_by {
  address: order_by
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
  type: order_by
}

"""Ordering options when selecting data from "Reward"."""
input Reward_order_by {
  address: order_by
  amount: order_by
  earnedIn: Epoch_order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedIn: Epoch_order_by
  receivedInEpochNo: order_by
  stakePool: StakePool_order_by
  type: order_by
}

"""
select columns of table "Reward"
"""
enum Reward_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  earnedInEpochNo

  """column name"""
  pool_hash_id

  """column name"""
  receivedInEpochNo

  """column name"""
  type
}

"""aggregate stddev on columns"""
type Reward_stddev_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by stddev() on columns of table "Reward"
"""
input Reward_stddev_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""aggregate stddev_pop on columns"""
type Reward_stddev_pop_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by stddev_pop() on columns of table "Reward"
"""
input Reward_stddev_pop_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""aggregate stddev_samp on columns"""
type Reward_stddev_samp_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by stddev_samp() on columns of table "Reward"
"""
input Reward_stddev_samp_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""
Streaming cursor of the table "Reward"
"""
input Reward_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Reward_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Reward_stream_cursor_value_input {
  address: String
  amount: numeric
  earnedInEpochNo: bigint
  pool_hash_id: bigint
  receivedInEpochNo: bigint
  type: rewardtype
}

"""aggregate sum on columns"""
type Reward_sum_fields {
  amount: numeric
  earnedInEpochNo: bigint
  pool_hash_id: bigint
  receivedInEpochNo: bigint
}

"""
order by sum() on columns of table "Reward"
"""
input Reward_sum_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""aggregate var_pop on columns"""
type Reward_var_pop_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by var_pop() on columns of table "Reward"
"""
input Reward_var_pop_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""aggregate var_samp on columns"""
type Reward_var_samp_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by var_samp() on columns of table "Reward"
"""
input Reward_var_samp_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""aggregate variance on columns"""
type Reward_variance_fields {
  amount: Float
  earnedInEpochNo: Float
  pool_hash_id: Float
  receivedInEpochNo: Float
}

"""
order by variance() on columns of table "Reward"
"""
input Reward_variance_order_by {
  amount: order_by
  earnedInEpochNo: order_by
  pool_hash_id: order_by
  receivedInEpochNo: order_by
}

"""
columns and relationships of "Script"
"""
type Script {
  hash: bytea
  id: bigint
  serialisedSize: Int

  """An object relationship"""
  transaction: Transaction
  txId: bigint
  type: scripttype
}

"""
aggregated selection of "Script"
"""
type Script_aggregate {
  aggregate: Script_aggregate_fields
  nodes: [Script!]!
}

input Script_aggregate_bool_exp {
  count: Script_aggregate_bool_exp_count
}

input Script_aggregate_bool_exp_count {
  arguments: [Script_select_column!]
  distinct: Boolean
  filter: Script_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Script"
"""
type Script_aggregate_fields {
  avg: Script_avg_fields
  count(columns: [Script_select_column!], distinct: Boolean): Int!
  max: Script_max_fields
  min: Script_min_fields
  stddev: Script_stddev_fields
  stddev_pop: Script_stddev_pop_fields
  stddev_samp: Script_stddev_samp_fields
  sum: Script_sum_fields
  var_pop: Script_var_pop_fields
  var_samp: Script_var_samp_fields
  variance: Script_variance_fields
}

"""
order by aggregate values of table "Script"
"""
input Script_aggregate_order_by {
  avg: Script_avg_order_by
  count: order_by
  max: Script_max_order_by
  min: Script_min_order_by
  stddev: Script_stddev_order_by
  stddev_pop: Script_stddev_pop_order_by
  stddev_samp: Script_stddev_samp_order_by
  sum: Script_sum_order_by
  var_pop: Script_var_pop_order_by
  var_samp: Script_var_samp_order_by
  variance: Script_variance_order_by
}

"""
input type for inserting array relation for remote table "Script"
"""
input Script_arr_rel_insert_input {
  data: [Script_insert_input!]!
}

"""aggregate avg on columns"""
type Script_avg_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by avg() on columns of table "Script"
"""
input Script_avg_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""
Boolean expression to filter rows from the table "Script". All fields are combined with a logical 'AND'.
"""
input Script_bool_exp {
  _and: [Script_bool_exp!]
  _not: Script_bool_exp
  _or: [Script_bool_exp!]
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  serialisedSize: Int_comparison_exp
  transaction: Transaction_bool_exp
  txId: bigint_comparison_exp
  type: scripttype_comparison_exp
}

"""
input type for incrementing numeric columns in table "Script"
"""
input Script_inc_input {
  id: bigint
  serialisedSize: Int
  txId: bigint
}

"""
input type for inserting data into table "Script"
"""
input Script_insert_input {
  hash: bytea
  id: bigint
  serialisedSize: Int
  transaction: Transaction_obj_rel_insert_input
  txId: bigint
  type: scripttype
}

"""aggregate max on columns"""
type Script_max_fields {
  id: bigint
  serialisedSize: Int
  txId: bigint
  type: scripttype
}

"""
order by max() on columns of table "Script"
"""
input Script_max_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
  type: order_by
}

"""aggregate min on columns"""
type Script_min_fields {
  id: bigint
  serialisedSize: Int
  txId: bigint
  type: scripttype
}

"""
order by min() on columns of table "Script"
"""
input Script_min_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
  type: order_by
}

"""
response of any mutation on the table "Script"
"""
type Script_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Script!]!
}

"""
input type for inserting object relation for remote table "Script"
"""
input Script_obj_rel_insert_input {
  data: Script_insert_input!
}

"""Ordering options when selecting data from "Script"."""
input Script_order_by {
  hash: order_by
  id: order_by
  serialisedSize: order_by
  transaction: Transaction_order_by
  txId: order_by
  type: order_by
}

"""
select columns of table "Script"
"""
enum Script_select_column {
  """column name"""
  hash

  """column name"""
  id

  """column name"""
  serialisedSize

  """column name"""
  txId

  """column name"""
  type
}

"""
input type for updating data in table "Script"
"""
input Script_set_input {
  hash: bytea
  id: bigint
  serialisedSize: Int
  txId: bigint
  type: scripttype
}

"""aggregate stddev on columns"""
type Script_stddev_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by stddev() on columns of table "Script"
"""
input Script_stddev_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""aggregate stddev_pop on columns"""
type Script_stddev_pop_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by stddev_pop() on columns of table "Script"
"""
input Script_stddev_pop_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""aggregate stddev_samp on columns"""
type Script_stddev_samp_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by stddev_samp() on columns of table "Script"
"""
input Script_stddev_samp_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""
Streaming cursor of the table "Script"
"""
input Script_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Script_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Script_stream_cursor_value_input {
  hash: bytea
  id: bigint
  serialisedSize: Int
  txId: bigint
  type: scripttype
}

"""aggregate sum on columns"""
type Script_sum_fields {
  id: bigint
  serialisedSize: Int
  txId: bigint
}

"""
order by sum() on columns of table "Script"
"""
input Script_sum_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

input Script_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Script_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Script_set_input

  """filter the rows which have to be updated"""
  where: Script_bool_exp!
}

"""aggregate var_pop on columns"""
type Script_var_pop_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by var_pop() on columns of table "Script"
"""
input Script_var_pop_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""aggregate var_samp on columns"""
type Script_var_samp_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by var_samp() on columns of table "Script"
"""
input Script_var_samp_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""aggregate variance on columns"""
type Script_variance_fields {
  id: Float
  serialisedSize: Float
  txId: Float
}

"""
order by variance() on columns of table "Script"
"""
input Script_variance_order_by {
  id: order_by
  serialisedSize: order_by
  txId: order_by
}

"""
columns and relationships of "SlotLeader"
"""
type SlotLeader {
  description: String
  hash: bytea
  id: bigint
  pool_hash_id: bigint

  """An object relationship"""
  stakePool: StakePool
}

"""
aggregated selection of "SlotLeader"
"""
type SlotLeader_aggregate {
  aggregate: SlotLeader_aggregate_fields
  nodes: [SlotLeader!]!
}

"""
aggregate fields of "SlotLeader"
"""
type SlotLeader_aggregate_fields {
  avg: SlotLeader_avg_fields
  count(columns: [SlotLeader_select_column!], distinct: Boolean): Int!
  max: SlotLeader_max_fields
  min: SlotLeader_min_fields
  stddev: SlotLeader_stddev_fields
  stddev_pop: SlotLeader_stddev_pop_fields
  stddev_samp: SlotLeader_stddev_samp_fields
  sum: SlotLeader_sum_fields
  var_pop: SlotLeader_var_pop_fields
  var_samp: SlotLeader_var_samp_fields
  variance: SlotLeader_variance_fields
}

"""aggregate avg on columns"""
type SlotLeader_avg_fields {
  id: Float
  pool_hash_id: Float
}

"""
Boolean expression to filter rows from the table "SlotLeader". All fields are combined with a logical 'AND'.
"""
input SlotLeader_bool_exp {
  _and: [SlotLeader_bool_exp!]
  _not: SlotLeader_bool_exp
  _or: [SlotLeader_bool_exp!]
  description: String_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  pool_hash_id: bigint_comparison_exp
  stakePool: StakePool_bool_exp
}

"""
input type for incrementing numeric columns in table "SlotLeader"
"""
input SlotLeader_inc_input {
  id: bigint
  pool_hash_id: bigint
}

"""
input type for inserting data into table "SlotLeader"
"""
input SlotLeader_insert_input {
  description: String
  hash: bytea
  id: bigint
  pool_hash_id: bigint
  stakePool: StakePool_obj_rel_insert_input
}

"""aggregate max on columns"""
type SlotLeader_max_fields {
  description: String
  id: bigint
  pool_hash_id: bigint
}

"""aggregate min on columns"""
type SlotLeader_min_fields {
  description: String
  id: bigint
  pool_hash_id: bigint
}

"""
response of any mutation on the table "SlotLeader"
"""
type SlotLeader_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [SlotLeader!]!
}

"""
input type for inserting object relation for remote table "SlotLeader"
"""
input SlotLeader_obj_rel_insert_input {
  data: SlotLeader_insert_input!
}

"""Ordering options when selecting data from "SlotLeader"."""
input SlotLeader_order_by {
  description: order_by
  hash: order_by
  id: order_by
  pool_hash_id: order_by
  stakePool: StakePool_order_by
}

"""
select columns of table "SlotLeader"
"""
enum SlotLeader_select_column {
  """column name"""
  description

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  pool_hash_id
}

"""
input type for updating data in table "SlotLeader"
"""
input SlotLeader_set_input {
  description: String
  hash: bytea
  id: bigint
  pool_hash_id: bigint
}

"""aggregate stddev on columns"""
type SlotLeader_stddev_fields {
  id: Float
  pool_hash_id: Float
}

"""aggregate stddev_pop on columns"""
type SlotLeader_stddev_pop_fields {
  id: Float
  pool_hash_id: Float
}

"""aggregate stddev_samp on columns"""
type SlotLeader_stddev_samp_fields {
  id: Float
  pool_hash_id: Float
}

"""
Streaming cursor of the table "SlotLeader"
"""
input SlotLeader_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: SlotLeader_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input SlotLeader_stream_cursor_value_input {
  description: String
  hash: bytea
  id: bigint
  pool_hash_id: bigint
}

"""aggregate sum on columns"""
type SlotLeader_sum_fields {
  id: bigint
  pool_hash_id: bigint
}

input SlotLeader_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: SlotLeader_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: SlotLeader_set_input

  """filter the rows which have to be updated"""
  where: SlotLeader_bool_exp!
}

"""aggregate var_pop on columns"""
type SlotLeader_var_pop_fields {
  id: Float
  pool_hash_id: Float
}

"""aggregate var_samp on columns"""
type SlotLeader_var_samp_fields {
  id: Float
  pool_hash_id: Float
}

"""aggregate variance on columns"""
type SlotLeader_variance_fields {
  id: Float
  pool_hash_id: Float
}

"""
columns and relationships of "StakeDeregistration"
"""
type StakeDeregistration {
  address: String
  id: bigint

  """An object relationship"""
  redeemer: Redeemer
  redeemerId: bigint

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint
}

"""
aggregated selection of "StakeDeregistration"
"""
type StakeDeregistration_aggregate {
  aggregate: StakeDeregistration_aggregate_fields
  nodes: [StakeDeregistration!]!
}

"""
aggregate fields of "StakeDeregistration"
"""
type StakeDeregistration_aggregate_fields {
  avg: StakeDeregistration_avg_fields
  count(columns: [StakeDeregistration_select_column!], distinct: Boolean): Int!
  max: StakeDeregistration_max_fields
  min: StakeDeregistration_min_fields
  stddev: StakeDeregistration_stddev_fields
  stddev_pop: StakeDeregistration_stddev_pop_fields
  stddev_samp: StakeDeregistration_stddev_samp_fields
  sum: StakeDeregistration_sum_fields
  var_pop: StakeDeregistration_var_pop_fields
  var_samp: StakeDeregistration_var_samp_fields
  variance: StakeDeregistration_variance_fields
}

"""aggregate avg on columns"""
type StakeDeregistration_avg_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "StakeDeregistration". All fields are combined with a logical 'AND'.
"""
input StakeDeregistration_bool_exp {
  _and: [StakeDeregistration_bool_exp!]
  _not: StakeDeregistration_bool_exp
  _or: [StakeDeregistration_bool_exp!]
  address: String_comparison_exp
  id: bigint_comparison_exp
  redeemer: Redeemer_bool_exp
  redeemerId: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type StakeDeregistration_max_fields {
  address: String
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type StakeDeregistration_min_fields {
  address: String
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""Ordering options when selecting data from "StakeDeregistration"."""
input StakeDeregistration_order_by {
  address: order_by
  id: order_by
  redeemer: Redeemer_order_by
  redeemerId: order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""
select columns of table "StakeDeregistration"
"""
enum StakeDeregistration_select_column {
  """column name"""
  address

  """column name"""
  id

  """column name"""
  redeemerId

  """column name"""
  tx_id
}

"""aggregate stddev on columns"""
type StakeDeregistration_stddev_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type StakeDeregistration_stddev_pop_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type StakeDeregistration_stddev_samp_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
Streaming cursor of the table "StakeDeregistration"
"""
input StakeDeregistration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StakeDeregistration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StakeDeregistration_stream_cursor_value_input {
  address: String
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type StakeDeregistration_sum_fields {
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate var_pop on columns"""
type StakeDeregistration_var_pop_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type StakeDeregistration_var_samp_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type StakeDeregistration_variance_fields {
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
columns and relationships of "StakePool"
"""
type StakePool {
  """An array relationship"""
  activeStake(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): [ActiveStake!]!

  """An aggregate relationship"""
  activeStake_aggregate(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): ActiveStake_aggregate!
  blockNo: Int

  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): [Block!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): Block_aggregate!

  """An array relationship"""
  delegators(
    """distinct select on columns"""
    distinct_on: [Delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Delegation_order_by!]

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): [Delegation!]!

  """An aggregate relationship"""
  delegators_aggregate(
    """distinct select on columns"""
    distinct_on: [Delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Delegation_order_by!]

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): Delegation_aggregate!
  deposit: numeric
  fixedCost: numeric
  hash: bytea
  hash_id: bigint
  id: String
  margin: float8
  metadataHash: bytea

  """An array relationship"""
  owners(
    """distinct select on columns"""
    distinct_on: [StakePoolOwner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolOwner_order_by!]

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): [StakePoolOwner!]!

  """An aggregate relationship"""
  owners_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePoolOwner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolOwner_order_by!]

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): StakePoolOwner_aggregate!
  pledge: numeric

  """An array relationship"""
  relays(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): [pool_relay!]!

  """An aggregate relationship"""
  relays_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): pool_relay_aggregate!

  """An array relationship"""
  retirements(
    """distinct select on columns"""
    distinct_on: [StakePoolRetirement_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolRetirement_order_by!]

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): [StakePoolRetirement!]!

  """An aggregate relationship"""
  retirements_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePoolRetirement_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolRetirement_order_by!]

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): StakePoolRetirement_aggregate!
  rewardAddress: String

  """An array relationship"""
  rewards(
    """distinct select on columns"""
    distinct_on: [Reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Reward_order_by!]

    """filter the rows returned"""
    where: Reward_bool_exp
  ): [Reward!]!

  """An aggregate relationship"""
  rewards_aggregate(
    """distinct select on columns"""
    distinct_on: [Reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Reward_order_by!]

    """filter the rows returned"""
    where: Reward_bool_exp
  ): Reward_aggregate!
  update_id: bigint

  """An object relationship"""
  updatedIn: Transaction
  updated_in_tx_id: bigint
  url: String
}

"""
columns and relationships of "StakePoolOwner"
"""
type StakePoolOwner {
  hash: bytea
  pool_hash_id: bigint

  """An object relationship"""
  stakePool: StakePool
}

"""
aggregated selection of "StakePoolOwner"
"""
type StakePoolOwner_aggregate {
  aggregate: StakePoolOwner_aggregate_fields
  nodes: [StakePoolOwner!]!
}

input StakePoolOwner_aggregate_bool_exp {
  count: StakePoolOwner_aggregate_bool_exp_count
}

input StakePoolOwner_aggregate_bool_exp_count {
  arguments: [StakePoolOwner_select_column!]
  distinct: Boolean
  filter: StakePoolOwner_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "StakePoolOwner"
"""
type StakePoolOwner_aggregate_fields {
  avg: StakePoolOwner_avg_fields
  count(columns: [StakePoolOwner_select_column!], distinct: Boolean): Int!
  max: StakePoolOwner_max_fields
  min: StakePoolOwner_min_fields
  stddev: StakePoolOwner_stddev_fields
  stddev_pop: StakePoolOwner_stddev_pop_fields
  stddev_samp: StakePoolOwner_stddev_samp_fields
  sum: StakePoolOwner_sum_fields
  var_pop: StakePoolOwner_var_pop_fields
  var_samp: StakePoolOwner_var_samp_fields
  variance: StakePoolOwner_variance_fields
}

"""
order by aggregate values of table "StakePoolOwner"
"""
input StakePoolOwner_aggregate_order_by {
  avg: StakePoolOwner_avg_order_by
  count: order_by
  max: StakePoolOwner_max_order_by
  min: StakePoolOwner_min_order_by
  stddev: StakePoolOwner_stddev_order_by
  stddev_pop: StakePoolOwner_stddev_pop_order_by
  stddev_samp: StakePoolOwner_stddev_samp_order_by
  sum: StakePoolOwner_sum_order_by
  var_pop: StakePoolOwner_var_pop_order_by
  var_samp: StakePoolOwner_var_samp_order_by
  variance: StakePoolOwner_variance_order_by
}

"""
input type for inserting array relation for remote table "StakePoolOwner"
"""
input StakePoolOwner_arr_rel_insert_input {
  data: [StakePoolOwner_insert_input!]!
}

"""aggregate avg on columns"""
type StakePoolOwner_avg_fields {
  pool_hash_id: Float
}

"""
order by avg() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_avg_order_by {
  pool_hash_id: order_by
}

"""
Boolean expression to filter rows from the table "StakePoolOwner". All fields are combined with a logical 'AND'.
"""
input StakePoolOwner_bool_exp {
  _and: [StakePoolOwner_bool_exp!]
  _not: StakePoolOwner_bool_exp
  _or: [StakePoolOwner_bool_exp!]
  hash: bytea_comparison_exp
  pool_hash_id: bigint_comparison_exp
  stakePool: StakePool_bool_exp
}

"""
input type for inserting data into table "StakePoolOwner"
"""
input StakePoolOwner_insert_input {
  hash: bytea
  pool_hash_id: bigint
  stakePool: StakePool_obj_rel_insert_input
}

"""aggregate max on columns"""
type StakePoolOwner_max_fields {
  pool_hash_id: bigint
}

"""
order by max() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_max_order_by {
  pool_hash_id: order_by
}

"""aggregate min on columns"""
type StakePoolOwner_min_fields {
  pool_hash_id: bigint
}

"""
order by min() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_min_order_by {
  pool_hash_id: order_by
}

"""Ordering options when selecting data from "StakePoolOwner"."""
input StakePoolOwner_order_by {
  hash: order_by
  pool_hash_id: order_by
  stakePool: StakePool_order_by
}

"""
select columns of table "StakePoolOwner"
"""
enum StakePoolOwner_select_column {
  """column name"""
  hash

  """column name"""
  pool_hash_id
}

"""aggregate stddev on columns"""
type StakePoolOwner_stddev_fields {
  pool_hash_id: Float
}

"""
order by stddev() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_stddev_order_by {
  pool_hash_id: order_by
}

"""aggregate stddev_pop on columns"""
type StakePoolOwner_stddev_pop_fields {
  pool_hash_id: Float
}

"""
order by stddev_pop() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_stddev_pop_order_by {
  pool_hash_id: order_by
}

"""aggregate stddev_samp on columns"""
type StakePoolOwner_stddev_samp_fields {
  pool_hash_id: Float
}

"""
order by stddev_samp() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_stddev_samp_order_by {
  pool_hash_id: order_by
}

"""
Streaming cursor of the table "StakePoolOwner"
"""
input StakePoolOwner_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StakePoolOwner_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StakePoolOwner_stream_cursor_value_input {
  hash: bytea
  pool_hash_id: bigint
}

"""aggregate sum on columns"""
type StakePoolOwner_sum_fields {
  pool_hash_id: bigint
}

"""
order by sum() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_sum_order_by {
  pool_hash_id: order_by
}

"""aggregate var_pop on columns"""
type StakePoolOwner_var_pop_fields {
  pool_hash_id: Float
}

"""
order by var_pop() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_var_pop_order_by {
  pool_hash_id: order_by
}

"""aggregate var_samp on columns"""
type StakePoolOwner_var_samp_fields {
  pool_hash_id: Float
}

"""
order by var_samp() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_var_samp_order_by {
  pool_hash_id: order_by
}

"""aggregate variance on columns"""
type StakePoolOwner_variance_fields {
  pool_hash_id: Float
}

"""
order by variance() on columns of table "StakePoolOwner"
"""
input StakePoolOwner_variance_order_by {
  pool_hash_id: order_by
}

"""
columns and relationships of "StakePoolRetirement"
"""
type StakePoolRetirement {
  """An object relationship"""
  announcedIn: Transaction
  inEffectFrom: Int
  pool_hash_id: bigint

  """An object relationship"""
  retiredInEpoch: Epoch

  """An object relationship"""
  stakePool: StakePool
  tx_id: bigint
}

"""
aggregated selection of "StakePoolRetirement"
"""
type StakePoolRetirement_aggregate {
  aggregate: StakePoolRetirement_aggregate_fields
  nodes: [StakePoolRetirement!]!
}

input StakePoolRetirement_aggregate_bool_exp {
  count: StakePoolRetirement_aggregate_bool_exp_count
}

input StakePoolRetirement_aggregate_bool_exp_count {
  arguments: [StakePoolRetirement_select_column!]
  distinct: Boolean
  filter: StakePoolRetirement_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "StakePoolRetirement"
"""
type StakePoolRetirement_aggregate_fields {
  avg: StakePoolRetirement_avg_fields
  count(columns: [StakePoolRetirement_select_column!], distinct: Boolean): Int!
  max: StakePoolRetirement_max_fields
  min: StakePoolRetirement_min_fields
  stddev: StakePoolRetirement_stddev_fields
  stddev_pop: StakePoolRetirement_stddev_pop_fields
  stddev_samp: StakePoolRetirement_stddev_samp_fields
  sum: StakePoolRetirement_sum_fields
  var_pop: StakePoolRetirement_var_pop_fields
  var_samp: StakePoolRetirement_var_samp_fields
  variance: StakePoolRetirement_variance_fields
}

"""
order by aggregate values of table "StakePoolRetirement"
"""
input StakePoolRetirement_aggregate_order_by {
  avg: StakePoolRetirement_avg_order_by
  count: order_by
  max: StakePoolRetirement_max_order_by
  min: StakePoolRetirement_min_order_by
  stddev: StakePoolRetirement_stddev_order_by
  stddev_pop: StakePoolRetirement_stddev_pop_order_by
  stddev_samp: StakePoolRetirement_stddev_samp_order_by
  sum: StakePoolRetirement_sum_order_by
  var_pop: StakePoolRetirement_var_pop_order_by
  var_samp: StakePoolRetirement_var_samp_order_by
  variance: StakePoolRetirement_variance_order_by
}

"""
input type for inserting array relation for remote table "StakePoolRetirement"
"""
input StakePoolRetirement_arr_rel_insert_input {
  data: [StakePoolRetirement_insert_input!]!
}

"""aggregate avg on columns"""
type StakePoolRetirement_avg_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by avg() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_avg_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "StakePoolRetirement". All fields are combined with a logical 'AND'.
"""
input StakePoolRetirement_bool_exp {
  _and: [StakePoolRetirement_bool_exp!]
  _not: StakePoolRetirement_bool_exp
  _or: [StakePoolRetirement_bool_exp!]
  announcedIn: Transaction_bool_exp
  inEffectFrom: Int_comparison_exp
  pool_hash_id: bigint_comparison_exp
  retiredInEpoch: Epoch_bool_exp
  stakePool: StakePool_bool_exp
  tx_id: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "StakePoolRetirement"
"""
input StakePoolRetirement_inc_input {
  inEffectFrom: Int
  pool_hash_id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "StakePoolRetirement"
"""
input StakePoolRetirement_insert_input {
  announcedIn: Transaction_obj_rel_insert_input
  inEffectFrom: Int
  pool_hash_id: bigint
  retiredInEpoch: Epoch_obj_rel_insert_input
  stakePool: StakePool_obj_rel_insert_input
  tx_id: bigint
}

"""aggregate max on columns"""
type StakePoolRetirement_max_fields {
  inEffectFrom: Int
  pool_hash_id: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_max_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type StakePoolRetirement_min_fields {
  inEffectFrom: Int
  pool_hash_id: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_min_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "StakePoolRetirement"
"""
type StakePoolRetirement_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [StakePoolRetirement!]!
}

"""Ordering options when selecting data from "StakePoolRetirement"."""
input StakePoolRetirement_order_by {
  announcedIn: Transaction_order_by
  inEffectFrom: order_by
  pool_hash_id: order_by
  retiredInEpoch: Epoch_order_by
  stakePool: StakePool_order_by
  tx_id: order_by
}

"""
select columns of table "StakePoolRetirement"
"""
enum StakePoolRetirement_select_column {
  """column name"""
  inEffectFrom

  """column name"""
  pool_hash_id

  """column name"""
  tx_id
}

"""
input type for updating data in table "StakePoolRetirement"
"""
input StakePoolRetirement_set_input {
  inEffectFrom: Int
  pool_hash_id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type StakePoolRetirement_stddev_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_stddev_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type StakePoolRetirement_stddev_pop_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_stddev_pop_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type StakePoolRetirement_stddev_samp_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_stddev_samp_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""
Streaming cursor of the table "StakePoolRetirement"
"""
input StakePoolRetirement_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StakePoolRetirement_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StakePoolRetirement_stream_cursor_value_input {
  inEffectFrom: Int
  pool_hash_id: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type StakePoolRetirement_sum_fields {
  inEffectFrom: Int
  pool_hash_id: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_sum_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

input StakePoolRetirement_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: StakePoolRetirement_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: StakePoolRetirement_set_input

  """filter the rows which have to be updated"""
  where: StakePoolRetirement_bool_exp!
}

"""aggregate var_pop on columns"""
type StakePoolRetirement_var_pop_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_var_pop_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type StakePoolRetirement_var_samp_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_var_samp_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type StakePoolRetirement_variance_fields {
  inEffectFrom: Float
  pool_hash_id: Float
  tx_id: Float
}

"""
order by variance() on columns of table "StakePoolRetirement"
"""
input StakePoolRetirement_variance_order_by {
  inEffectFrom: order_by
  pool_hash_id: order_by
  tx_id: order_by
}

"""
aggregated selection of "StakePool"
"""
type StakePool_aggregate {
  aggregate: StakePool_aggregate_fields
  nodes: [StakePool!]!
}

"""
aggregate fields of "StakePool"
"""
type StakePool_aggregate_fields {
  avg: StakePool_avg_fields
  count(columns: [StakePool_select_column!], distinct: Boolean): Int!
  max: StakePool_max_fields
  min: StakePool_min_fields
  stddev: StakePool_stddev_fields
  stddev_pop: StakePool_stddev_pop_fields
  stddev_samp: StakePool_stddev_samp_fields
  sum: StakePool_sum_fields
  var_pop: StakePool_var_pop_fields
  var_samp: StakePool_var_samp_fields
  variance: StakePool_variance_fields
}

"""aggregate avg on columns"""
type StakePool_avg_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""
Boolean expression to filter rows from the table "StakePool". All fields are combined with a logical 'AND'.
"""
input StakePool_bool_exp {
  _and: [StakePool_bool_exp!]
  _not: StakePool_bool_exp
  _or: [StakePool_bool_exp!]
  activeStake: ActiveStake_bool_exp
  activeStake_aggregate: ActiveStake_aggregate_bool_exp
  blockNo: Int_comparison_exp
  blocks: Block_bool_exp
  blocks_aggregate: Block_aggregate_bool_exp
  delegators: Delegation_bool_exp
  delegators_aggregate: Delegation_aggregate_bool_exp
  deposit: numeric_comparison_exp
  fixedCost: numeric_comparison_exp
  hash: bytea_comparison_exp
  hash_id: bigint_comparison_exp
  id: String_comparison_exp
  margin: float8_comparison_exp
  metadataHash: bytea_comparison_exp
  owners: StakePoolOwner_bool_exp
  owners_aggregate: StakePoolOwner_aggregate_bool_exp
  pledge: numeric_comparison_exp
  relays: pool_relay_bool_exp
  relays_aggregate: pool_relay_aggregate_bool_exp
  retirements: StakePoolRetirement_bool_exp
  retirements_aggregate: StakePoolRetirement_aggregate_bool_exp
  rewardAddress: String_comparison_exp
  rewards: Reward_bool_exp
  rewards_aggregate: Reward_aggregate_bool_exp
  update_id: bigint_comparison_exp
  updatedIn: Transaction_bool_exp
  updated_in_tx_id: bigint_comparison_exp
  url: String_comparison_exp
}

"""
input type for inserting data into table "StakePool"
"""
input StakePool_insert_input {
  activeStake: ActiveStake_arr_rel_insert_input
  blockNo: Int
  blocks: Block_arr_rel_insert_input
  delegators: Delegation_arr_rel_insert_input
  deposit: numeric
  fixedCost: numeric
  hash: bytea
  hash_id: bigint
  id: String
  margin: float8
  metadataHash: bytea
  owners: StakePoolOwner_arr_rel_insert_input
  pledge: numeric
  relays: pool_relay_arr_rel_insert_input
  retirements: StakePoolRetirement_arr_rel_insert_input
  rewardAddress: String
  rewards: Reward_arr_rel_insert_input
  update_id: bigint
  updatedIn: Transaction_obj_rel_insert_input
  updated_in_tx_id: bigint
  url: String
}

"""aggregate max on columns"""
type StakePool_max_fields {
  blockNo: Int
  deposit: numeric
  fixedCost: numeric
  hash_id: bigint
  id: String
  margin: float8
  pledge: numeric
  rewardAddress: String
  update_id: bigint
  updated_in_tx_id: bigint
  url: String
}

"""aggregate min on columns"""
type StakePool_min_fields {
  blockNo: Int
  deposit: numeric
  fixedCost: numeric
  hash_id: bigint
  id: String
  margin: float8
  pledge: numeric
  rewardAddress: String
  update_id: bigint
  updated_in_tx_id: bigint
  url: String
}

"""
input type for inserting object relation for remote table "StakePool"
"""
input StakePool_obj_rel_insert_input {
  data: StakePool_insert_input!
}

"""Ordering options when selecting data from "StakePool"."""
input StakePool_order_by {
  activeStake_aggregate: ActiveStake_aggregate_order_by
  blockNo: order_by
  blocks_aggregate: Block_aggregate_order_by
  delegators_aggregate: Delegation_aggregate_order_by
  deposit: order_by
  fixedCost: order_by
  hash: order_by
  hash_id: order_by
  id: order_by
  margin: order_by
  metadataHash: order_by
  owners_aggregate: StakePoolOwner_aggregate_order_by
  pledge: order_by
  relays_aggregate: pool_relay_aggregate_order_by
  retirements_aggregate: StakePoolRetirement_aggregate_order_by
  rewardAddress: order_by
  rewards_aggregate: Reward_aggregate_order_by
  update_id: order_by
  updatedIn: Transaction_order_by
  updated_in_tx_id: order_by
  url: order_by
}

"""
select columns of table "StakePool"
"""
enum StakePool_select_column {
  """column name"""
  blockNo

  """column name"""
  deposit

  """column name"""
  fixedCost

  """column name"""
  hash

  """column name"""
  hash_id

  """column name"""
  id

  """column name"""
  margin

  """column name"""
  metadataHash

  """column name"""
  pledge

  """column name"""
  rewardAddress

  """column name"""
  update_id

  """column name"""
  updated_in_tx_id

  """column name"""
  url
}

"""aggregate stddev on columns"""
type StakePool_stddev_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""aggregate stddev_pop on columns"""
type StakePool_stddev_pop_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""aggregate stddev_samp on columns"""
type StakePool_stddev_samp_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""
Streaming cursor of the table "StakePool"
"""
input StakePool_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StakePool_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StakePool_stream_cursor_value_input {
  blockNo: Int
  deposit: numeric
  fixedCost: numeric
  hash: bytea
  hash_id: bigint
  id: String
  margin: float8
  metadataHash: bytea
  pledge: numeric
  rewardAddress: String
  update_id: bigint
  updated_in_tx_id: bigint
  url: String
}

"""aggregate sum on columns"""
type StakePool_sum_fields {
  blockNo: Int
  deposit: numeric
  fixedCost: numeric
  hash_id: bigint
  margin: float8
  pledge: numeric
  update_id: bigint
  updated_in_tx_id: bigint
}

"""aggregate var_pop on columns"""
type StakePool_var_pop_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""aggregate var_samp on columns"""
type StakePool_var_samp_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""aggregate variance on columns"""
type StakePool_variance_fields {
  blockNo: Float
  deposit: Float
  fixedCost: Float
  hash_id: Float
  margin: Float
  pledge: Float
  update_id: Float
  updated_in_tx_id: Float
}

"""
columns and relationships of "StakeRegistration"
"""
type StakeRegistration {
  address: String
  deposit: numeric
  id: bigint

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint
}

"""
aggregated selection of "StakeRegistration"
"""
type StakeRegistration_aggregate {
  aggregate: StakeRegistration_aggregate_fields
  nodes: [StakeRegistration!]!
}

"""
aggregate fields of "StakeRegistration"
"""
type StakeRegistration_aggregate_fields {
  avg: StakeRegistration_avg_fields
  count(columns: [StakeRegistration_select_column!], distinct: Boolean): Int!
  max: StakeRegistration_max_fields
  min: StakeRegistration_min_fields
  stddev: StakeRegistration_stddev_fields
  stddev_pop: StakeRegistration_stddev_pop_fields
  stddev_samp: StakeRegistration_stddev_samp_fields
  sum: StakeRegistration_sum_fields
  var_pop: StakeRegistration_var_pop_fields
  var_samp: StakeRegistration_var_samp_fields
  variance: StakeRegistration_variance_fields
}

"""aggregate avg on columns"""
type StakeRegistration_avg_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "StakeRegistration". All fields are combined with a logical 'AND'.
"""
input StakeRegistration_bool_exp {
  _and: [StakeRegistration_bool_exp!]
  _not: StakeRegistration_bool_exp
  _or: [StakeRegistration_bool_exp!]
  address: String_comparison_exp
  deposit: numeric_comparison_exp
  id: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""aggregate max on columns"""
type StakeRegistration_max_fields {
  address: String
  deposit: numeric
  id: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type StakeRegistration_min_fields {
  address: String
  deposit: numeric
  id: bigint
  tx_id: bigint
}

"""Ordering options when selecting data from "StakeRegistration"."""
input StakeRegistration_order_by {
  address: order_by
  deposit: order_by
  id: order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""
select columns of table "StakeRegistration"
"""
enum StakeRegistration_select_column {
  """column name"""
  address

  """column name"""
  deposit

  """column name"""
  id

  """column name"""
  tx_id
}

"""aggregate stddev on columns"""
type StakeRegistration_stddev_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type StakeRegistration_stddev_pop_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type StakeRegistration_stddev_samp_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""
Streaming cursor of the table "StakeRegistration"
"""
input StakeRegistration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: StakeRegistration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input StakeRegistration_stream_cursor_value_input {
  address: String
  deposit: numeric
  id: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type StakeRegistration_sum_fields {
  deposit: numeric
  id: bigint
  tx_id: bigint
}

"""aggregate var_pop on columns"""
type StakeRegistration_var_pop_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type StakeRegistration_var_samp_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type StakeRegistration_variance_fields {
  deposit: Float
  id: Float
  tx_id: Float
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "TokenInOutput"
"""
type TokenInOutput {
  """An object relationship"""
  asset: Asset
  assetId: bytea
  assetName: bytea
  policyId: bytea
  quantity: numeric

  """An object relationship"""
  transactionOutput: TransactionOutput
  tx_out_id: bigint
}

"""
aggregated selection of "TokenInOutput"
"""
type TokenInOutput_aggregate {
  aggregate: TokenInOutput_aggregate_fields
  nodes: [TokenInOutput!]!
}

input TokenInOutput_aggregate_bool_exp {
  count: TokenInOutput_aggregate_bool_exp_count
}

input TokenInOutput_aggregate_bool_exp_count {
  arguments: [TokenInOutput_select_column!]
  distinct: Boolean
  filter: TokenInOutput_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "TokenInOutput"
"""
type TokenInOutput_aggregate_fields {
  avg: TokenInOutput_avg_fields
  count(columns: [TokenInOutput_select_column!], distinct: Boolean): Int!
  max: TokenInOutput_max_fields
  min: TokenInOutput_min_fields
  stddev: TokenInOutput_stddev_fields
  stddev_pop: TokenInOutput_stddev_pop_fields
  stddev_samp: TokenInOutput_stddev_samp_fields
  sum: TokenInOutput_sum_fields
  var_pop: TokenInOutput_var_pop_fields
  var_samp: TokenInOutput_var_samp_fields
  variance: TokenInOutput_variance_fields
}

"""
order by aggregate values of table "TokenInOutput"
"""
input TokenInOutput_aggregate_order_by {
  avg: TokenInOutput_avg_order_by
  count: order_by
  max: TokenInOutput_max_order_by
  min: TokenInOutput_min_order_by
  stddev: TokenInOutput_stddev_order_by
  stddev_pop: TokenInOutput_stddev_pop_order_by
  stddev_samp: TokenInOutput_stddev_samp_order_by
  sum: TokenInOutput_sum_order_by
  var_pop: TokenInOutput_var_pop_order_by
  var_samp: TokenInOutput_var_samp_order_by
  variance: TokenInOutput_variance_order_by
}

"""
input type for inserting array relation for remote table "TokenInOutput"
"""
input TokenInOutput_arr_rel_insert_input {
  data: [TokenInOutput_insert_input!]!
}

"""aggregate avg on columns"""
type TokenInOutput_avg_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by avg() on columns of table "TokenInOutput"
"""
input TokenInOutput_avg_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""
Boolean expression to filter rows from the table "TokenInOutput". All fields are combined with a logical 'AND'.
"""
input TokenInOutput_bool_exp {
  _and: [TokenInOutput_bool_exp!]
  _not: TokenInOutput_bool_exp
  _or: [TokenInOutput_bool_exp!]
  asset: Asset_bool_exp
  assetId: bytea_comparison_exp
  assetName: bytea_comparison_exp
  policyId: bytea_comparison_exp
  quantity: numeric_comparison_exp
  transactionOutput: TransactionOutput_bool_exp
  tx_out_id: bigint_comparison_exp
}

"""
input type for inserting data into table "TokenInOutput"
"""
input TokenInOutput_insert_input {
  asset: Asset_obj_rel_insert_input
  assetId: bytea
  assetName: bytea
  policyId: bytea
  quantity: numeric
  transactionOutput: TransactionOutput_obj_rel_insert_input
  tx_out_id: bigint
}

"""aggregate max on columns"""
type TokenInOutput_max_fields {
  quantity: numeric
  tx_out_id: bigint
}

"""
order by max() on columns of table "TokenInOutput"
"""
input TokenInOutput_max_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate min on columns"""
type TokenInOutput_min_fields {
  quantity: numeric
  tx_out_id: bigint
}

"""
order by min() on columns of table "TokenInOutput"
"""
input TokenInOutput_min_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""Ordering options when selecting data from "TokenInOutput"."""
input TokenInOutput_order_by {
  asset: Asset_order_by
  assetId: order_by
  assetName: order_by
  policyId: order_by
  quantity: order_by
  transactionOutput: TransactionOutput_order_by
  tx_out_id: order_by
}

"""
select columns of table "TokenInOutput"
"""
enum TokenInOutput_select_column {
  """column name"""
  assetId

  """column name"""
  assetName

  """column name"""
  policyId

  """column name"""
  quantity

  """column name"""
  tx_out_id
}

"""aggregate stddev on columns"""
type TokenInOutput_stddev_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by stddev() on columns of table "TokenInOutput"
"""
input TokenInOutput_stddev_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate stddev_pop on columns"""
type TokenInOutput_stddev_pop_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by stddev_pop() on columns of table "TokenInOutput"
"""
input TokenInOutput_stddev_pop_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate stddev_samp on columns"""
type TokenInOutput_stddev_samp_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by stddev_samp() on columns of table "TokenInOutput"
"""
input TokenInOutput_stddev_samp_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""
Streaming cursor of the table "TokenInOutput"
"""
input TokenInOutput_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TokenInOutput_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TokenInOutput_stream_cursor_value_input {
  assetId: bytea
  assetName: bytea
  policyId: bytea
  quantity: numeric
  tx_out_id: bigint
}

"""aggregate sum on columns"""
type TokenInOutput_sum_fields {
  quantity: numeric
  tx_out_id: bigint
}

"""
order by sum() on columns of table "TokenInOutput"
"""
input TokenInOutput_sum_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate var_pop on columns"""
type TokenInOutput_var_pop_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by var_pop() on columns of table "TokenInOutput"
"""
input TokenInOutput_var_pop_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate var_samp on columns"""
type TokenInOutput_var_samp_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by var_samp() on columns of table "TokenInOutput"
"""
input TokenInOutput_var_samp_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""aggregate variance on columns"""
type TokenInOutput_variance_fields {
  quantity: Float
  tx_out_id: Float
}

"""
order by variance() on columns of table "TokenInOutput"
"""
input TokenInOutput_variance_order_by {
  quantity: order_by
  tx_out_id: order_by
}

"""
columns and relationships of "TokenMint"
"""
type TokenMint {
  """An object relationship"""
  asset: Asset
  assetId: bytea
  assetName: bytea
  policyId: bytea
  quantity: numeric

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint
}

"""
aggregated selection of "TokenMint"
"""
type TokenMint_aggregate {
  aggregate: TokenMint_aggregate_fields
  nodes: [TokenMint!]!
}

input TokenMint_aggregate_bool_exp {
  count: TokenMint_aggregate_bool_exp_count
}

input TokenMint_aggregate_bool_exp_count {
  arguments: [TokenMint_select_column!]
  distinct: Boolean
  filter: TokenMint_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "TokenMint"
"""
type TokenMint_aggregate_fields {
  avg: TokenMint_avg_fields
  count(columns: [TokenMint_select_column!], distinct: Boolean): Int!
  max: TokenMint_max_fields
  min: TokenMint_min_fields
  stddev: TokenMint_stddev_fields
  stddev_pop: TokenMint_stddev_pop_fields
  stddev_samp: TokenMint_stddev_samp_fields
  sum: TokenMint_sum_fields
  var_pop: TokenMint_var_pop_fields
  var_samp: TokenMint_var_samp_fields
  variance: TokenMint_variance_fields
}

"""
order by aggregate values of table "TokenMint"
"""
input TokenMint_aggregate_order_by {
  avg: TokenMint_avg_order_by
  count: order_by
  max: TokenMint_max_order_by
  min: TokenMint_min_order_by
  stddev: TokenMint_stddev_order_by
  stddev_pop: TokenMint_stddev_pop_order_by
  stddev_samp: TokenMint_stddev_samp_order_by
  sum: TokenMint_sum_order_by
  var_pop: TokenMint_var_pop_order_by
  var_samp: TokenMint_var_samp_order_by
  variance: TokenMint_variance_order_by
}

"""
input type for inserting array relation for remote table "TokenMint"
"""
input TokenMint_arr_rel_insert_input {
  data: [TokenMint_insert_input!]!
}

"""aggregate avg on columns"""
type TokenMint_avg_fields {
  quantity: Float
  tx_id: Float
}

"""
order by avg() on columns of table "TokenMint"
"""
input TokenMint_avg_order_by {
  quantity: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "TokenMint". All fields are combined with a logical 'AND'.
"""
input TokenMint_bool_exp {
  _and: [TokenMint_bool_exp!]
  _not: TokenMint_bool_exp
  _or: [TokenMint_bool_exp!]
  asset: Asset_bool_exp
  assetId: bytea_comparison_exp
  assetName: bytea_comparison_exp
  policyId: bytea_comparison_exp
  quantity: numeric_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""
input type for inserting data into table "TokenMint"
"""
input TokenMint_insert_input {
  asset: Asset_obj_rel_insert_input
  assetId: bytea
  assetName: bytea
  policyId: bytea
  quantity: numeric
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
}

"""aggregate max on columns"""
type TokenMint_max_fields {
  quantity: numeric
  tx_id: bigint
}

"""
order by max() on columns of table "TokenMint"
"""
input TokenMint_max_order_by {
  quantity: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type TokenMint_min_fields {
  quantity: numeric
  tx_id: bigint
}

"""
order by min() on columns of table "TokenMint"
"""
input TokenMint_min_order_by {
  quantity: order_by
  tx_id: order_by
}

"""Ordering options when selecting data from "TokenMint"."""
input TokenMint_order_by {
  asset: Asset_order_by
  assetId: order_by
  assetName: order_by
  policyId: order_by
  quantity: order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""
select columns of table "TokenMint"
"""
enum TokenMint_select_column {
  """column name"""
  assetId

  """column name"""
  assetName

  """column name"""
  policyId

  """column name"""
  quantity

  """column name"""
  tx_id
}

"""aggregate stddev on columns"""
type TokenMint_stddev_fields {
  quantity: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "TokenMint"
"""
input TokenMint_stddev_order_by {
  quantity: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type TokenMint_stddev_pop_fields {
  quantity: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "TokenMint"
"""
input TokenMint_stddev_pop_order_by {
  quantity: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type TokenMint_stddev_samp_fields {
  quantity: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "TokenMint"
"""
input TokenMint_stddev_samp_order_by {
  quantity: order_by
  tx_id: order_by
}

"""
Streaming cursor of the table "TokenMint"
"""
input TokenMint_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TokenMint_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TokenMint_stream_cursor_value_input {
  assetId: bytea
  assetName: bytea
  policyId: bytea
  quantity: numeric
  tx_id: bigint
}

"""aggregate sum on columns"""
type TokenMint_sum_fields {
  quantity: numeric
  tx_id: bigint
}

"""
order by sum() on columns of table "TokenMint"
"""
input TokenMint_sum_order_by {
  quantity: order_by
  tx_id: order_by
}

"""aggregate var_pop on columns"""
type TokenMint_var_pop_fields {
  quantity: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "TokenMint"
"""
input TokenMint_var_pop_order_by {
  quantity: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type TokenMint_var_samp_fields {
  quantity: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "TokenMint"
"""
input TokenMint_var_samp_order_by {
  quantity: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type TokenMint_variance_fields {
  quantity: Float
  tx_id: Float
}

"""
order by variance() on columns of table "TokenMint"
"""
input TokenMint_variance_order_by {
  quantity: order_by
  tx_id: order_by
}

"""
columns and relationships of "Transaction"
"""
type Transaction {
  """An object relationship"""
  block: Block
  blockHash: bytea
  blockIndex: Int

  """An array relationship"""
  collateralInputs(
    """distinct select on columns"""
    distinct_on: [CollateralInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralInput_order_by!]

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): [CollateralInput!]!

  """An aggregate relationship"""
  collateralInputs_aggregate(
    """distinct select on columns"""
    distinct_on: [CollateralInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralInput_order_by!]

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): CollateralInput_aggregate!

  """An array relationship"""
  collateralOutputs(
    """distinct select on columns"""
    distinct_on: [CollateralOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralOutput_order_by!]

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): [CollateralOutput!]!

  """An aggregate relationship"""
  collateralOutputs_aggregate(
    """distinct select on columns"""
    distinct_on: [CollateralOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralOutput_order_by!]

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): CollateralOutput_aggregate!
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  includedAt: timestamp

  """An array relationship"""
  inputs(
    """distinct select on columns"""
    distinct_on: [TransactionInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionInput_order_by!]

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): [TransactionInput!]!

  """An aggregate relationship"""
  inputs_aggregate(
    """distinct select on columns"""
    distinct_on: [TransactionInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionInput_order_by!]

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): TransactionInput_aggregate!
  invalidBefore: numeric
  invalidHereafter: numeric

  """An array relationship"""
  metadata(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): [tx_metadata!]!

  """An aggregate relationship"""
  metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): tx_metadata_aggregate!

  """An array relationship"""
  mint(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): [TokenMint!]!

  """An aggregate relationship"""
  mint_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): TokenMint_aggregate!

  """An array relationship"""
  outputs(
    """distinct select on columns"""
    distinct_on: [TransactionOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionOutput_order_by!]

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): [TransactionOutput!]!

  """An aggregate relationship"""
  outputs_aggregate(
    """distinct select on columns"""
    distinct_on: [TransactionOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionOutput_order_by!]

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): TransactionOutput_aggregate!

  """An array relationship"""
  redeemers(
    """distinct select on columns"""
    distinct_on: [Redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Redeemer_order_by!]

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): [Redeemer!]!

  """An aggregate relationship"""
  redeemers_aggregate(
    """distinct select on columns"""
    distinct_on: [Redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Redeemer_order_by!]

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): Redeemer_aggregate!

  """An array relationship"""
  referenceInputs(
    """distinct select on columns"""
    distinct_on: [ReferenceInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ReferenceInput_order_by!]

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): [ReferenceInput!]!

  """An aggregate relationship"""
  referenceInputs_aggregate(
    """distinct select on columns"""
    distinct_on: [ReferenceInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ReferenceInput_order_by!]

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): ReferenceInput_aggregate!
  scriptSize: Int

  """An array relationship"""
  scripts(
    """distinct select on columns"""
    distinct_on: [Script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Script_order_by!]

    """filter the rows returned"""
    where: Script_bool_exp
  ): [Script!]!

  """An aggregate relationship"""
  scripts_aggregate(
    """distinct select on columns"""
    distinct_on: [Script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Script_order_by!]

    """filter the rows returned"""
    where: Script_bool_exp
  ): Script_aggregate!
  size: Int
  totalOutput: bigint
  treasuryDonation: numeric
  validContract: Boolean

  """An array relationship"""
  withdrawals(
    """distinct select on columns"""
    distinct_on: [Withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Withdrawal_order_by!]

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): [Withdrawal!]!

  """An aggregate relationship"""
  withdrawals_aggregate(
    """distinct select on columns"""
    distinct_on: [Withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Withdrawal_order_by!]

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): Withdrawal_aggregate!
}

"""
columns and relationships of "TransactionInput"
"""
type TransactionInput {
  address: String

  """An object relationship"""
  redeemer: Redeemer
  redeemerId: bigint

  """An object relationship"""
  sourceTransaction: Transaction
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """An object relationship"""
  transaction: Transaction
  txHash: bytea
  value: numeric
}

"""
aggregated selection of "TransactionInput"
"""
type TransactionInput_aggregate {
  aggregate: TransactionInput_aggregate_fields
  nodes: [TransactionInput!]!
}

input TransactionInput_aggregate_bool_exp {
  count: TransactionInput_aggregate_bool_exp_count
}

input TransactionInput_aggregate_bool_exp_count {
  arguments: [TransactionInput_select_column!]
  distinct: Boolean
  filter: TransactionInput_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "TransactionInput"
"""
type TransactionInput_aggregate_fields {
  avg: TransactionInput_avg_fields
  count(columns: [TransactionInput_select_column!], distinct: Boolean): Int!
  max: TransactionInput_max_fields
  min: TransactionInput_min_fields
  stddev: TransactionInput_stddev_fields
  stddev_pop: TransactionInput_stddev_pop_fields
  stddev_samp: TransactionInput_stddev_samp_fields
  sum: TransactionInput_sum_fields
  var_pop: TransactionInput_var_pop_fields
  var_samp: TransactionInput_var_samp_fields
  variance: TransactionInput_variance_fields
}

"""
order by aggregate values of table "TransactionInput"
"""
input TransactionInput_aggregate_order_by {
  avg: TransactionInput_avg_order_by
  count: order_by
  max: TransactionInput_max_order_by
  min: TransactionInput_min_order_by
  stddev: TransactionInput_stddev_order_by
  stddev_pop: TransactionInput_stddev_pop_order_by
  stddev_samp: TransactionInput_stddev_samp_order_by
  sum: TransactionInput_sum_order_by
  var_pop: TransactionInput_var_pop_order_by
  var_samp: TransactionInput_var_samp_order_by
  variance: TransactionInput_variance_order_by
}

"""
input type for inserting array relation for remote table "TransactionInput"
"""
input TransactionInput_arr_rel_insert_input {
  data: [TransactionInput_insert_input!]!
}

"""aggregate avg on columns"""
type TransactionInput_avg_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by avg() on columns of table "TransactionInput"
"""
input TransactionInput_avg_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "TransactionInput". All fields are combined with a logical 'AND'.
"""
input TransactionInput_bool_exp {
  _and: [TransactionInput_bool_exp!]
  _not: TransactionInput_bool_exp
  _or: [TransactionInput_bool_exp!]
  address: String_comparison_exp
  redeemer: Redeemer_bool_exp
  redeemerId: bigint_comparison_exp
  sourceTransaction: Transaction_bool_exp
  sourceTxHash: bytea_comparison_exp
  sourceTxIndex: smallint_comparison_exp
  source_tx_out_id: bigint_comparison_exp
  tokens: TokenInOutput_bool_exp
  tokens_aggregate: TokenInOutput_aggregate_bool_exp
  transaction: Transaction_bool_exp
  txHash: bytea_comparison_exp
  value: numeric_comparison_exp
}

"""
input type for inserting data into table "TransactionInput"
"""
input TransactionInput_insert_input {
  address: String
  redeemer: Redeemer_obj_rel_insert_input
  redeemerId: bigint
  sourceTransaction: Transaction_obj_rel_insert_input
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  tokens: TokenInOutput_arr_rel_insert_input
  transaction: Transaction_obj_rel_insert_input
  txHash: bytea
  value: numeric
}

"""aggregate max on columns"""
type TransactionInput_max_fields {
  address: String
  redeemerId: bigint
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by max() on columns of table "TransactionInput"
"""
input TransactionInput_max_order_by {
  address: order_by
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type TransactionInput_min_fields {
  address: String
  redeemerId: bigint
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by min() on columns of table "TransactionInput"
"""
input TransactionInput_min_order_by {
  address: order_by
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""Ordering options when selecting data from "TransactionInput"."""
input TransactionInput_order_by {
  address: order_by
  redeemer: Redeemer_order_by
  redeemerId: order_by
  sourceTransaction: Transaction_order_by
  sourceTxHash: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  tokens_aggregate: TokenInOutput_aggregate_order_by
  transaction: Transaction_order_by
  txHash: order_by
  value: order_by
}

"""
select columns of table "TransactionInput"
"""
enum TransactionInput_select_column {
  """column name"""
  address

  """column name"""
  redeemerId

  """column name"""
  sourceTxHash

  """column name"""
  sourceTxIndex

  """column name"""
  source_tx_out_id

  """column name"""
  txHash

  """column name"""
  value
}

"""aggregate stddev on columns"""
type TransactionInput_stddev_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev() on columns of table "TransactionInput"
"""
input TransactionInput_stddev_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type TransactionInput_stddev_pop_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "TransactionInput"
"""
input TransactionInput_stddev_pop_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type TransactionInput_stddev_samp_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "TransactionInput"
"""
input TransactionInput_stddev_samp_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
Streaming cursor of the table "TransactionInput"
"""
input TransactionInput_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TransactionInput_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TransactionInput_stream_cursor_value_input {
  address: String
  redeemerId: bigint
  sourceTxHash: bytea
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  txHash: bytea
  value: numeric
}

"""aggregate sum on columns"""
type TransactionInput_sum_fields {
  redeemerId: bigint
  sourceTxIndex: smallint
  source_tx_out_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "TransactionInput"
"""
input TransactionInput_sum_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type TransactionInput_var_pop_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "TransactionInput"
"""
input TransactionInput_var_pop_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type TransactionInput_var_samp_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "TransactionInput"
"""
input TransactionInput_var_samp_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type TransactionInput_variance_fields {
  redeemerId: Float
  sourceTxIndex: Float
  source_tx_out_id: Float
  value: Float
}

"""
order by variance() on columns of table "TransactionInput"
"""
input TransactionInput_variance_order_by {
  redeemerId: order_by
  sourceTxIndex: order_by
  source_tx_out_id: order_by
  value: order_by
}

"""
columns and relationships of "TransactionOutput"
"""
type TransactionOutput {
  address: String
  addressHasScript: Boolean

  """An object relationship"""
  datum: Datum
  id: bigint
  index: smallint
  inline_datum_id: bigint
  paymentCredential: bytea
  reference_script_id: bigint

  """An object relationship"""
  script: Script

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """An object relationship"""
  transaction: Transaction
  txHash: bytea
  value: numeric
}

"""
aggregated selection of "TransactionOutput"
"""
type TransactionOutput_aggregate {
  aggregate: TransactionOutput_aggregate_fields
  nodes: [TransactionOutput!]!
}

input TransactionOutput_aggregate_bool_exp {
  bool_and: TransactionOutput_aggregate_bool_exp_bool_and
  bool_or: TransactionOutput_aggregate_bool_exp_bool_or
  count: TransactionOutput_aggregate_bool_exp_count
}

input TransactionOutput_aggregate_bool_exp_bool_and {
  arguments: TransactionOutput_select_column_TransactionOutput_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: TransactionOutput_bool_exp
  predicate: Boolean_comparison_exp!
}

input TransactionOutput_aggregate_bool_exp_bool_or {
  arguments: TransactionOutput_select_column_TransactionOutput_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: TransactionOutput_bool_exp
  predicate: Boolean_comparison_exp!
}

input TransactionOutput_aggregate_bool_exp_count {
  arguments: [TransactionOutput_select_column!]
  distinct: Boolean
  filter: TransactionOutput_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "TransactionOutput"
"""
type TransactionOutput_aggregate_fields {
  avg: TransactionOutput_avg_fields
  count(columns: [TransactionOutput_select_column!], distinct: Boolean): Int!
  max: TransactionOutput_max_fields
  min: TransactionOutput_min_fields
  stddev: TransactionOutput_stddev_fields
  stddev_pop: TransactionOutput_stddev_pop_fields
  stddev_samp: TransactionOutput_stddev_samp_fields
  sum: TransactionOutput_sum_fields
  var_pop: TransactionOutput_var_pop_fields
  var_samp: TransactionOutput_var_samp_fields
  variance: TransactionOutput_variance_fields
}

"""
order by aggregate values of table "TransactionOutput"
"""
input TransactionOutput_aggregate_order_by {
  avg: TransactionOutput_avg_order_by
  count: order_by
  max: TransactionOutput_max_order_by
  min: TransactionOutput_min_order_by
  stddev: TransactionOutput_stddev_order_by
  stddev_pop: TransactionOutput_stddev_pop_order_by
  stddev_samp: TransactionOutput_stddev_samp_order_by
  sum: TransactionOutput_sum_order_by
  var_pop: TransactionOutput_var_pop_order_by
  var_samp: TransactionOutput_var_samp_order_by
  variance: TransactionOutput_variance_order_by
}

"""
input type for inserting array relation for remote table "TransactionOutput"
"""
input TransactionOutput_arr_rel_insert_input {
  data: [TransactionOutput_insert_input!]!
}

"""aggregate avg on columns"""
type TransactionOutput_avg_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by avg() on columns of table "TransactionOutput"
"""
input TransactionOutput_avg_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
Boolean expression to filter rows from the table "TransactionOutput". All fields are combined with a logical 'AND'.
"""
input TransactionOutput_bool_exp {
  _and: [TransactionOutput_bool_exp!]
  _not: TransactionOutput_bool_exp
  _or: [TransactionOutput_bool_exp!]
  address: String_comparison_exp
  addressHasScript: Boolean_comparison_exp
  datum: Datum_bool_exp
  id: bigint_comparison_exp
  index: smallint_comparison_exp
  inline_datum_id: bigint_comparison_exp
  paymentCredential: bytea_comparison_exp
  reference_script_id: bigint_comparison_exp
  script: Script_bool_exp
  tokens: TokenInOutput_bool_exp
  tokens_aggregate: TokenInOutput_aggregate_bool_exp
  transaction: Transaction_bool_exp
  txHash: bytea_comparison_exp
  value: numeric_comparison_exp
}

"""
input type for inserting data into table "TransactionOutput"
"""
input TransactionOutput_insert_input {
  address: String
  addressHasScript: Boolean
  datum: Datum_obj_rel_insert_input
  id: bigint
  index: smallint
  inline_datum_id: bigint
  paymentCredential: bytea
  reference_script_id: bigint
  script: Script_obj_rel_insert_input
  tokens: TokenInOutput_arr_rel_insert_input
  transaction: Transaction_obj_rel_insert_input
  txHash: bytea
  value: numeric
}

"""aggregate max on columns"""
type TransactionOutput_max_fields {
  address: String
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""
order by max() on columns of table "TransactionOutput"
"""
input TransactionOutput_max_order_by {
  address: order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate min on columns"""
type TransactionOutput_min_fields {
  address: String
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""
order by min() on columns of table "TransactionOutput"
"""
input TransactionOutput_min_order_by {
  address: order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
input type for inserting object relation for remote table "TransactionOutput"
"""
input TransactionOutput_obj_rel_insert_input {
  data: TransactionOutput_insert_input!
}

"""Ordering options when selecting data from "TransactionOutput"."""
input TransactionOutput_order_by {
  address: order_by
  addressHasScript: order_by
  datum: Datum_order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  paymentCredential: order_by
  reference_script_id: order_by
  script: Script_order_by
  tokens_aggregate: TokenInOutput_aggregate_order_by
  transaction: Transaction_order_by
  txHash: order_by
  value: order_by
}

"""
select columns of table "TransactionOutput"
"""
enum TransactionOutput_select_column {
  """column name"""
  address

  """column name"""
  addressHasScript

  """column name"""
  id

  """column name"""
  index

  """column name"""
  inline_datum_id

  """column name"""
  paymentCredential

  """column name"""
  reference_script_id

  """column name"""
  txHash

  """column name"""
  value
}

"""
select "TransactionOutput_aggregate_bool_exp_bool_and_arguments_columns" columns of table "TransactionOutput"
"""
enum TransactionOutput_select_column_TransactionOutput_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  addressHasScript
}

"""
select "TransactionOutput_aggregate_bool_exp_bool_or_arguments_columns" columns of table "TransactionOutput"
"""
enum TransactionOutput_select_column_TransactionOutput_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  addressHasScript
}

"""aggregate stddev on columns"""
type TransactionOutput_stddev_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by stddev() on columns of table "TransactionOutput"
"""
input TransactionOutput_stddev_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate stddev_pop on columns"""
type TransactionOutput_stddev_pop_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by stddev_pop() on columns of table "TransactionOutput"
"""
input TransactionOutput_stddev_pop_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate stddev_samp on columns"""
type TransactionOutput_stddev_samp_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by stddev_samp() on columns of table "TransactionOutput"
"""
input TransactionOutput_stddev_samp_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
Streaming cursor of the table "TransactionOutput"
"""
input TransactionOutput_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TransactionOutput_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TransactionOutput_stream_cursor_value_input {
  address: String
  addressHasScript: Boolean
  id: bigint
  index: smallint
  inline_datum_id: bigint
  paymentCredential: bytea
  reference_script_id: bigint
  txHash: bytea
  value: numeric
}

"""aggregate sum on columns"""
type TransactionOutput_sum_fields {
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""
order by sum() on columns of table "TransactionOutput"
"""
input TransactionOutput_sum_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate var_pop on columns"""
type TransactionOutput_var_pop_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by var_pop() on columns of table "TransactionOutput"
"""
input TransactionOutput_var_pop_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate var_samp on columns"""
type TransactionOutput_var_samp_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by var_samp() on columns of table "TransactionOutput"
"""
input TransactionOutput_var_samp_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""aggregate variance on columns"""
type TransactionOutput_variance_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
order by variance() on columns of table "TransactionOutput"
"""
input TransactionOutput_variance_order_by {
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  value: order_by
}

"""
aggregated selection of "Transaction"
"""
type Transaction_aggregate {
  aggregate: Transaction_aggregate_fields
  nodes: [Transaction!]!
}

input Transaction_aggregate_bool_exp {
  bool_and: Transaction_aggregate_bool_exp_bool_and
  bool_or: Transaction_aggregate_bool_exp_bool_or
  count: Transaction_aggregate_bool_exp_count
}

input Transaction_aggregate_bool_exp_bool_and {
  arguments: Transaction_select_column_Transaction_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: Transaction_bool_exp
  predicate: Boolean_comparison_exp!
}

input Transaction_aggregate_bool_exp_bool_or {
  arguments: Transaction_select_column_Transaction_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: Transaction_bool_exp
  predicate: Boolean_comparison_exp!
}

input Transaction_aggregate_bool_exp_count {
  arguments: [Transaction_select_column!]
  distinct: Boolean
  filter: Transaction_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Transaction"
"""
type Transaction_aggregate_fields {
  avg: Transaction_avg_fields
  count(columns: [Transaction_select_column!], distinct: Boolean): Int!
  max: Transaction_max_fields
  min: Transaction_min_fields
  stddev: Transaction_stddev_fields
  stddev_pop: Transaction_stddev_pop_fields
  stddev_samp: Transaction_stddev_samp_fields
  sum: Transaction_sum_fields
  var_pop: Transaction_var_pop_fields
  var_samp: Transaction_var_samp_fields
  variance: Transaction_variance_fields
}

"""
order by aggregate values of table "Transaction"
"""
input Transaction_aggregate_order_by {
  avg: Transaction_avg_order_by
  count: order_by
  max: Transaction_max_order_by
  min: Transaction_min_order_by
  stddev: Transaction_stddev_order_by
  stddev_pop: Transaction_stddev_pop_order_by
  stddev_samp: Transaction_stddev_samp_order_by
  sum: Transaction_sum_order_by
  var_pop: Transaction_var_pop_order_by
  var_samp: Transaction_var_samp_order_by
  variance: Transaction_variance_order_by
}

"""
input type for inserting array relation for remote table "Transaction"
"""
input Transaction_arr_rel_insert_input {
  data: [Transaction_insert_input!]!
}

"""aggregate avg on columns"""
type Transaction_avg_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by avg() on columns of table "Transaction"
"""
input Transaction_avg_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""
Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'.
"""
input Transaction_bool_exp {
  _and: [Transaction_bool_exp!]
  _not: Transaction_bool_exp
  _or: [Transaction_bool_exp!]
  block: Block_bool_exp
  blockHash: bytea_comparison_exp
  blockIndex: Int_comparison_exp
  collateralInputs: CollateralInput_bool_exp
  collateralInputs_aggregate: CollateralInput_aggregate_bool_exp
  collateralOutputs: CollateralOutput_bool_exp
  collateralOutputs_aggregate: CollateralOutput_aggregate_bool_exp
  deposit: bigint_comparison_exp
  fee: numeric_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  includedAt: timestamp_comparison_exp
  inputs: TransactionInput_bool_exp
  inputs_aggregate: TransactionInput_aggregate_bool_exp
  invalidBefore: numeric_comparison_exp
  invalidHereafter: numeric_comparison_exp
  metadata: tx_metadata_bool_exp
  metadata_aggregate: tx_metadata_aggregate_bool_exp
  mint: TokenMint_bool_exp
  mint_aggregate: TokenMint_aggregate_bool_exp
  outputs: TransactionOutput_bool_exp
  outputs_aggregate: TransactionOutput_aggregate_bool_exp
  redeemers: Redeemer_bool_exp
  redeemers_aggregate: Redeemer_aggregate_bool_exp
  referenceInputs: ReferenceInput_bool_exp
  referenceInputs_aggregate: ReferenceInput_aggregate_bool_exp
  scriptSize: Int_comparison_exp
  scripts: Script_bool_exp
  scripts_aggregate: Script_aggregate_bool_exp
  size: Int_comparison_exp
  totalOutput: bigint_comparison_exp
  treasuryDonation: numeric_comparison_exp
  validContract: Boolean_comparison_exp
  withdrawals: Withdrawal_bool_exp
  withdrawals_aggregate: Withdrawal_aggregate_bool_exp
}

"""
input type for inserting data into table "Transaction"
"""
input Transaction_insert_input {
  block: Block_obj_rel_insert_input
  blockHash: bytea
  blockIndex: Int
  collateralInputs: CollateralInput_arr_rel_insert_input
  collateralOutputs: CollateralOutput_arr_rel_insert_input
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  includedAt: timestamp
  inputs: TransactionInput_arr_rel_insert_input
  invalidBefore: numeric
  invalidHereafter: numeric
  metadata: tx_metadata_arr_rel_insert_input
  mint: TokenMint_arr_rel_insert_input
  outputs: TransactionOutput_arr_rel_insert_input
  redeemers: Redeemer_arr_rel_insert_input
  referenceInputs: ReferenceInput_arr_rel_insert_input
  scriptSize: Int
  scripts: Script_arr_rel_insert_input
  size: Int
  totalOutput: bigint
  treasuryDonation: numeric
  validContract: Boolean
  withdrawals: Withdrawal_arr_rel_insert_input
}

"""aggregate max on columns"""
type Transaction_max_fields {
  blockIndex: Int
  deposit: bigint
  fee: numeric
  id: bigint
  includedAt: timestamp
  invalidBefore: numeric
  invalidHereafter: numeric
  scriptSize: Int
  size: Int
  totalOutput: bigint
  treasuryDonation: numeric
}

"""
order by max() on columns of table "Transaction"
"""
input Transaction_max_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  includedAt: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""aggregate min on columns"""
type Transaction_min_fields {
  blockIndex: Int
  deposit: bigint
  fee: numeric
  id: bigint
  includedAt: timestamp
  invalidBefore: numeric
  invalidHereafter: numeric
  scriptSize: Int
  size: Int
  totalOutput: bigint
  treasuryDonation: numeric
}

"""
order by min() on columns of table "Transaction"
"""
input Transaction_min_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  includedAt: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""
input type for inserting object relation for remote table "Transaction"
"""
input Transaction_obj_rel_insert_input {
  data: Transaction_insert_input!
}

"""Ordering options when selecting data from "Transaction"."""
input Transaction_order_by {
  block: Block_order_by
  blockHash: order_by
  blockIndex: order_by
  collateralInputs_aggregate: CollateralInput_aggregate_order_by
  collateralOutputs_aggregate: CollateralOutput_aggregate_order_by
  deposit: order_by
  fee: order_by
  hash: order_by
  id: order_by
  includedAt: order_by
  inputs_aggregate: TransactionInput_aggregate_order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  metadata_aggregate: tx_metadata_aggregate_order_by
  mint_aggregate: TokenMint_aggregate_order_by
  outputs_aggregate: TransactionOutput_aggregate_order_by
  redeemers_aggregate: Redeemer_aggregate_order_by
  referenceInputs_aggregate: ReferenceInput_aggregate_order_by
  scriptSize: order_by
  scripts_aggregate: Script_aggregate_order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
  validContract: order_by
  withdrawals_aggregate: Withdrawal_aggregate_order_by
}

"""
select columns of table "Transaction"
"""
enum Transaction_select_column {
  """column name"""
  blockHash

  """column name"""
  blockIndex

  """column name"""
  deposit

  """column name"""
  fee

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  includedAt

  """column name"""
  invalidBefore

  """column name"""
  invalidHereafter

  """column name"""
  scriptSize

  """column name"""
  size

  """column name"""
  totalOutput

  """column name"""
  treasuryDonation

  """column name"""
  validContract
}

"""
select "Transaction_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Transaction"
"""
enum Transaction_select_column_Transaction_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  validContract
}

"""
select "Transaction_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Transaction"
"""
enum Transaction_select_column_Transaction_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  validContract
}

"""aggregate stddev on columns"""
type Transaction_stddev_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by stddev() on columns of table "Transaction"
"""
input Transaction_stddev_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""aggregate stddev_pop on columns"""
type Transaction_stddev_pop_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by stddev_pop() on columns of table "Transaction"
"""
input Transaction_stddev_pop_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""aggregate stddev_samp on columns"""
type Transaction_stddev_samp_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by stddev_samp() on columns of table "Transaction"
"""
input Transaction_stddev_samp_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""
Streaming cursor of the table "Transaction"
"""
input Transaction_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Transaction_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Transaction_stream_cursor_value_input {
  blockHash: bytea
  blockIndex: Int
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  includedAt: timestamp
  invalidBefore: numeric
  invalidHereafter: numeric
  scriptSize: Int
  size: Int
  totalOutput: bigint
  treasuryDonation: numeric
  validContract: Boolean
}

"""aggregate sum on columns"""
type Transaction_sum_fields {
  blockIndex: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalidBefore: numeric
  invalidHereafter: numeric
  scriptSize: Int
  size: Int
  totalOutput: bigint
  treasuryDonation: numeric
}

"""
order by sum() on columns of table "Transaction"
"""
input Transaction_sum_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""aggregate var_pop on columns"""
type Transaction_var_pop_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by var_pop() on columns of table "Transaction"
"""
input Transaction_var_pop_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""aggregate var_samp on columns"""
type Transaction_var_samp_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by var_samp() on columns of table "Transaction"
"""
input Transaction_var_samp_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""aggregate variance on columns"""
type Transaction_variance_fields {
  blockIndex: Float
  deposit: Float
  fee: Float
  id: Float
  invalidBefore: Float
  invalidHereafter: Float
  scriptSize: Float
  size: Float
  totalOutput: Float
  treasuryDonation: Float
}

"""
order by variance() on columns of table "Transaction"
"""
input Transaction_variance_order_by {
  blockIndex: order_by
  deposit: order_by
  fee: order_by
  id: order_by
  invalidBefore: order_by
  invalidHereafter: order_by
  scriptSize: order_by
  size: order_by
  totalOutput: order_by
  treasuryDonation: order_by
}

"""
columns and relationships of "Utxo"
"""
type Utxo {
  address: String
  addressHasScript: Boolean

  """An object relationship"""
  datum: Datum
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint

  """An object relationship"""
  script: Script

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """An object relationship"""
  transaction: Transaction
  txHash: bytea
  value: numeric
}

"""
aggregated selection of "Utxo"
"""
type Utxo_aggregate {
  aggregate: Utxo_aggregate_fields
  nodes: [Utxo!]!
}

"""
aggregate fields of "Utxo"
"""
type Utxo_aggregate_fields {
  avg: Utxo_avg_fields
  count(columns: [Utxo_select_column!], distinct: Boolean): Int!
  max: Utxo_max_fields
  min: Utxo_min_fields
  stddev: Utxo_stddev_fields
  stddev_pop: Utxo_stddev_pop_fields
  stddev_samp: Utxo_stddev_samp_fields
  sum: Utxo_sum_fields
  var_pop: Utxo_var_pop_fields
  var_samp: Utxo_var_samp_fields
  variance: Utxo_variance_fields
}

"""aggregate avg on columns"""
type Utxo_avg_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
Boolean expression to filter rows from the table "Utxo". All fields are combined with a logical 'AND'.
"""
input Utxo_bool_exp {
  _and: [Utxo_bool_exp!]
  _not: Utxo_bool_exp
  _or: [Utxo_bool_exp!]
  address: String_comparison_exp
  addressHasScript: Boolean_comparison_exp
  datum: Datum_bool_exp
  id: bigint_comparison_exp
  index: smallint_comparison_exp
  inline_datum_id: bigint_comparison_exp
  reference_script_id: bigint_comparison_exp
  script: Script_bool_exp
  tokens: TokenInOutput_bool_exp
  tokens_aggregate: TokenInOutput_aggregate_bool_exp
  transaction: Transaction_bool_exp
  txHash: bytea_comparison_exp
  value: numeric_comparison_exp
}

"""aggregate max on columns"""
type Utxo_max_fields {
  address: String
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""aggregate min on columns"""
type Utxo_min_fields {
  address: String
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""Ordering options when selecting data from "Utxo"."""
input Utxo_order_by {
  address: order_by
  addressHasScript: order_by
  datum: Datum_order_by
  id: order_by
  index: order_by
  inline_datum_id: order_by
  reference_script_id: order_by
  script: Script_order_by
  tokens_aggregate: TokenInOutput_aggregate_order_by
  transaction: Transaction_order_by
  txHash: order_by
  value: order_by
}

"""
select columns of table "Utxo"
"""
enum Utxo_select_column {
  """column name"""
  address

  """column name"""
  addressHasScript

  """column name"""
  id

  """column name"""
  index

  """column name"""
  inline_datum_id

  """column name"""
  reference_script_id

  """column name"""
  txHash

  """column name"""
  value
}

"""aggregate stddev on columns"""
type Utxo_stddev_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""aggregate stddev_pop on columns"""
type Utxo_stddev_pop_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""aggregate stddev_samp on columns"""
type Utxo_stddev_samp_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
Streaming cursor of the table "Utxo"
"""
input Utxo_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Utxo_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Utxo_stream_cursor_value_input {
  address: String
  addressHasScript: Boolean
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  txHash: bytea
  value: numeric
}

"""aggregate sum on columns"""
type Utxo_sum_fields {
  id: bigint
  index: smallint
  inline_datum_id: bigint
  reference_script_id: bigint
  value: numeric
}

"""aggregate var_pop on columns"""
type Utxo_var_pop_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""aggregate var_samp on columns"""
type Utxo_var_samp_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""aggregate variance on columns"""
type Utxo_variance_fields {
  id: Float
  index: Float
  inline_datum_id: Float
  reference_script_id: Float
  value: Float
}

"""
columns and relationships of "Withdrawal"
"""
type Withdrawal {
  address: String
  amount: numeric
  id: bigint

  """An object relationship"""
  redeemer: Redeemer
  redeemerId: bigint

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint
}

"""
aggregated selection of "Withdrawal"
"""
type Withdrawal_aggregate {
  aggregate: Withdrawal_aggregate_fields
  nodes: [Withdrawal!]!
}

input Withdrawal_aggregate_bool_exp {
  count: Withdrawal_aggregate_bool_exp_count
}

input Withdrawal_aggregate_bool_exp_count {
  arguments: [Withdrawal_select_column!]
  distinct: Boolean
  filter: Withdrawal_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Withdrawal"
"""
type Withdrawal_aggregate_fields {
  avg: Withdrawal_avg_fields
  count(columns: [Withdrawal_select_column!], distinct: Boolean): Int!
  max: Withdrawal_max_fields
  min: Withdrawal_min_fields
  stddev: Withdrawal_stddev_fields
  stddev_pop: Withdrawal_stddev_pop_fields
  stddev_samp: Withdrawal_stddev_samp_fields
  sum: Withdrawal_sum_fields
  var_pop: Withdrawal_var_pop_fields
  var_samp: Withdrawal_var_samp_fields
  variance: Withdrawal_variance_fields
}

"""
order by aggregate values of table "Withdrawal"
"""
input Withdrawal_aggregate_order_by {
  avg: Withdrawal_avg_order_by
  count: order_by
  max: Withdrawal_max_order_by
  min: Withdrawal_min_order_by
  stddev: Withdrawal_stddev_order_by
  stddev_pop: Withdrawal_stddev_pop_order_by
  stddev_samp: Withdrawal_stddev_samp_order_by
  sum: Withdrawal_sum_order_by
  var_pop: Withdrawal_var_pop_order_by
  var_samp: Withdrawal_var_samp_order_by
  variance: Withdrawal_variance_order_by
}

"""
input type for inserting array relation for remote table "Withdrawal"
"""
input Withdrawal_arr_rel_insert_input {
  data: [Withdrawal_insert_input!]!
}

"""aggregate avg on columns"""
type Withdrawal_avg_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by avg() on columns of table "Withdrawal"
"""
input Withdrawal_avg_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "Withdrawal". All fields are combined with a logical 'AND'.
"""
input Withdrawal_bool_exp {
  _and: [Withdrawal_bool_exp!]
  _not: Withdrawal_bool_exp
  _or: [Withdrawal_bool_exp!]
  address: String_comparison_exp
  amount: numeric_comparison_exp
  id: bigint_comparison_exp
  redeemer: Redeemer_bool_exp
  redeemerId: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""
input type for inserting data into table "Withdrawal"
"""
input Withdrawal_insert_input {
  address: String
  amount: numeric
  id: bigint
  redeemer: Redeemer_obj_rel_insert_input
  redeemerId: bigint
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
}

"""aggregate max on columns"""
type Withdrawal_max_fields {
  address: String
  amount: numeric
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""
order by max() on columns of table "Withdrawal"
"""
input Withdrawal_max_order_by {
  address: order_by
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type Withdrawal_min_fields {
  address: String
  amount: numeric
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""
order by min() on columns of table "Withdrawal"
"""
input Withdrawal_min_order_by {
  address: order_by
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""Ordering options when selecting data from "Withdrawal"."""
input Withdrawal_order_by {
  address: order_by
  amount: order_by
  id: order_by
  redeemer: Redeemer_order_by
  redeemerId: order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""
select columns of table "Withdrawal"
"""
enum Withdrawal_select_column {
  """column name"""
  address

  """column name"""
  amount

  """column name"""
  id

  """column name"""
  redeemerId

  """column name"""
  tx_id
}

"""aggregate stddev on columns"""
type Withdrawal_stddev_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "Withdrawal"
"""
input Withdrawal_stddev_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type Withdrawal_stddev_pop_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "Withdrawal"
"""
input Withdrawal_stddev_pop_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type Withdrawal_stddev_samp_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "Withdrawal"
"""
input Withdrawal_stddev_samp_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""
Streaming cursor of the table "Withdrawal"
"""
input Withdrawal_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Withdrawal_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Withdrawal_stream_cursor_value_input {
  address: String
  amount: numeric
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type Withdrawal_sum_fields {
  amount: numeric
  id: bigint
  redeemerId: bigint
  tx_id: bigint
}

"""
order by sum() on columns of table "Withdrawal"
"""
input Withdrawal_sum_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate var_pop on columns"""
type Withdrawal_var_pop_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "Withdrawal"
"""
input Withdrawal_var_pop_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type Withdrawal_var_samp_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "Withdrawal"
"""
input Withdrawal_var_samp_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type Withdrawal_variance_fields {
  amount: Float
  id: Float
  redeemerId: Float
  tx_id: Float
}

"""
order by variance() on columns of table "Withdrawal"
"""
input Withdrawal_variance_order_by {
  amount: order_by
  id: order_by
  redeemerId: order_by
  tx_id: order_by
}

"""
columns and relationships of "ada_pots"
"""
type ada_pots {
  block_id: bigint!
  deposits_drep: numeric!
  deposits_proposal: numeric!
  deposits_stake: numeric!
  epoch_no: Int!
  fees: numeric!
  id: bigint!
  reserves: numeric!
  rewards: numeric!
  slot_no: bigint!
  treasury: numeric!
  utxo: numeric!
}

"""
aggregated selection of "ada_pots"
"""
type ada_pots_aggregate {
  aggregate: ada_pots_aggregate_fields
  nodes: [ada_pots!]!
}

"""
aggregate fields of "ada_pots"
"""
type ada_pots_aggregate_fields {
  avg: ada_pots_avg_fields
  count(columns: [ada_pots_select_column!], distinct: Boolean): Int!
  max: ada_pots_max_fields
  min: ada_pots_min_fields
  stddev: ada_pots_stddev_fields
  stddev_pop: ada_pots_stddev_pop_fields
  stddev_samp: ada_pots_stddev_samp_fields
  sum: ada_pots_sum_fields
  var_pop: ada_pots_var_pop_fields
  var_samp: ada_pots_var_samp_fields
  variance: ada_pots_variance_fields
}

"""aggregate avg on columns"""
type ada_pots_avg_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
Boolean expression to filter rows from the table "ada_pots". All fields are combined with a logical 'AND'.
"""
input ada_pots_bool_exp {
  _and: [ada_pots_bool_exp!]
  _not: ada_pots_bool_exp
  _or: [ada_pots_bool_exp!]
  block_id: bigint_comparison_exp
  deposits_drep: numeric_comparison_exp
  deposits_proposal: numeric_comparison_exp
  deposits_stake: numeric_comparison_exp
  epoch_no: Int_comparison_exp
  fees: numeric_comparison_exp
  id: bigint_comparison_exp
  reserves: numeric_comparison_exp
  rewards: numeric_comparison_exp
  slot_no: bigint_comparison_exp
  treasury: numeric_comparison_exp
  utxo: numeric_comparison_exp
}

"""
unique or primary key constraints on table "ada_pots"
"""
enum ada_pots_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  ada_pots_pkey

  """
  unique or primary key constraint on columns "block_id"
  """
  unique_ada_pots
}

"""
input type for incrementing numeric columns in table "ada_pots"
"""
input ada_pots_inc_input {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""
input type for inserting data into table "ada_pots"
"""
input ada_pots_insert_input {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""aggregate max on columns"""
type ada_pots_max_fields {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""aggregate min on columns"""
type ada_pots_min_fields {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""
response of any mutation on the table "ada_pots"
"""
type ada_pots_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ada_pots!]!
}

"""
input type for inserting object relation for remote table "ada_pots"
"""
input ada_pots_obj_rel_insert_input {
  data: ada_pots_insert_input!

  """upsert condition"""
  on_conflict: ada_pots_on_conflict
}

"""
on_conflict condition type for table "ada_pots"
"""
input ada_pots_on_conflict {
  constraint: ada_pots_constraint!
  update_columns: [ada_pots_update_column!]! = []
  where: ada_pots_bool_exp
}

"""Ordering options when selecting data from "ada_pots"."""
input ada_pots_order_by {
  block_id: order_by
  deposits_drep: order_by
  deposits_proposal: order_by
  deposits_stake: order_by
  epoch_no: order_by
  fees: order_by
  id: order_by
  reserves: order_by
  rewards: order_by
  slot_no: order_by
  treasury: order_by
  utxo: order_by
}

"""primary key columns input for table: ada_pots"""
input ada_pots_pk_columns_input {
  id: bigint!
}

"""
select columns of table "ada_pots"
"""
enum ada_pots_select_column {
  """column name"""
  block_id

  """column name"""
  deposits_drep

  """column name"""
  deposits_proposal

  """column name"""
  deposits_stake

  """column name"""
  epoch_no

  """column name"""
  fees

  """column name"""
  id

  """column name"""
  reserves

  """column name"""
  rewards

  """column name"""
  slot_no

  """column name"""
  treasury

  """column name"""
  utxo
}

"""
input type for updating data in table "ada_pots"
"""
input ada_pots_set_input {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""aggregate stddev on columns"""
type ada_pots_stddev_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""aggregate stddev_pop on columns"""
type ada_pots_stddev_pop_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""aggregate stddev_samp on columns"""
type ada_pots_stddev_samp_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""
Streaming cursor of the table "ada_pots"
"""
input ada_pots_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: ada_pots_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input ada_pots_stream_cursor_value_input {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""aggregate sum on columns"""
type ada_pots_sum_fields {
  block_id: bigint
  deposits_drep: numeric
  deposits_proposal: numeric
  deposits_stake: numeric
  epoch_no: Int
  fees: numeric
  id: bigint
  reserves: numeric
  rewards: numeric
  slot_no: bigint
  treasury: numeric
  utxo: numeric
}

"""
update columns of table "ada_pots"
"""
enum ada_pots_update_column {
  """column name"""
  block_id

  """column name"""
  deposits_drep

  """column name"""
  deposits_proposal

  """column name"""
  deposits_stake

  """column name"""
  epoch_no

  """column name"""
  fees

  """column name"""
  id

  """column name"""
  reserves

  """column name"""
  rewards

  """column name"""
  slot_no

  """column name"""
  treasury

  """column name"""
  utxo
}

input ada_pots_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ada_pots_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: ada_pots_set_input

  """filter the rows which have to be updated"""
  where: ada_pots_bool_exp!
}

"""aggregate var_pop on columns"""
type ada_pots_var_pop_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""aggregate var_samp on columns"""
type ada_pots_var_samp_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

"""aggregate variance on columns"""
type ada_pots_variance_fields {
  block_id: Float
  deposits_drep: Float
  deposits_proposal: Float
  deposits_stake: Float
  epoch_no: Float
  fees: Float
  id: Float
  reserves: Float
  rewards: Float
  slot_no: Float
  treasury: Float
  utxo: Float
}

scalar anchortype

"""
Boolean expression to compare columns of type "anchortype". All fields are combined with logical 'AND'.
"""
input anchortype_comparison_exp {
  _eq: anchortype
  _gt: anchortype
  _gte: anchortype
  _in: [anchortype!]
  _is_null: Boolean
  _lt: anchortype
  _lte: anchortype
  _neq: anchortype
  _nin: [anchortype!]
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar bpchar

"""
Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'.
"""
input bpchar_comparison_exp {
  _eq: bpchar
  _gt: bpchar
  _gte: bpchar

  """does the column match the given case-insensitive pattern"""
  _ilike: bpchar
  _in: [bpchar!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: bpchar
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: bpchar
  _lt: bpchar
  _lte: bpchar
  _neq: bpchar

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: bpchar
  _nin: [bpchar!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: bpchar

  """does the column NOT match the given pattern"""
  _nlike: bpchar

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: bpchar

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: bpchar

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: bpchar

  """does the column match the given SQL regular expression"""
  _similar: bpchar
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

"""
columns and relationships of "committee"
"""
type committee {
  """An object relationship"""
  committeeMembers: committee_member

  """An object relationship"""
  govActionProposal: gov_action_proposal
  gov_action_proposal_id: bigint
  id: bigint!
  quorum_denominator: bigint!
  quorum_numerator: bigint!
}

"""
aggregated selection of "committee"
"""
type committee_aggregate {
  aggregate: committee_aggregate_fields
  nodes: [committee!]!
}

"""
aggregate fields of "committee"
"""
type committee_aggregate_fields {
  avg: committee_avg_fields
  count(columns: [committee_select_column!], distinct: Boolean): Int!
  max: committee_max_fields
  min: committee_min_fields
  stddev: committee_stddev_fields
  stddev_pop: committee_stddev_pop_fields
  stddev_samp: committee_stddev_samp_fields
  sum: committee_sum_fields
  var_pop: committee_var_pop_fields
  var_samp: committee_var_samp_fields
  variance: committee_variance_fields
}

"""aggregate avg on columns"""
type committee_avg_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""
Boolean expression to filter rows from the table "committee". All fields are combined with a logical 'AND'.
"""
input committee_bool_exp {
  _and: [committee_bool_exp!]
  _not: committee_bool_exp
  _or: [committee_bool_exp!]
  committeeMembers: committee_member_bool_exp
  govActionProposal: gov_action_proposal_bool_exp
  gov_action_proposal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  quorum_denominator: bigint_comparison_exp
  quorum_numerator: bigint_comparison_exp
}

"""
unique or primary key constraints on table "committee"
"""
enum committee_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  committee_pkey
}

"""
columns and relationships of "committee_de_registration"
"""
type committee_de_registration {
  cert_index: Int!
  cold_key_id: bigint!
  id: bigint!

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint!

  """An object relationship"""
  votingAnchor: voting_anchor
  voting_anchor_id: bigint
}

"""
aggregated selection of "committee_de_registration"
"""
type committee_de_registration_aggregate {
  aggregate: committee_de_registration_aggregate_fields
  nodes: [committee_de_registration!]!
}

"""
aggregate fields of "committee_de_registration"
"""
type committee_de_registration_aggregate_fields {
  avg: committee_de_registration_avg_fields
  count(columns: [committee_de_registration_select_column!], distinct: Boolean): Int!
  max: committee_de_registration_max_fields
  min: committee_de_registration_min_fields
  stddev: committee_de_registration_stddev_fields
  stddev_pop: committee_de_registration_stddev_pop_fields
  stddev_samp: committee_de_registration_stddev_samp_fields
  sum: committee_de_registration_sum_fields
  var_pop: committee_de_registration_var_pop_fields
  var_samp: committee_de_registration_var_samp_fields
  variance: committee_de_registration_variance_fields
}

"""aggregate avg on columns"""
type committee_de_registration_avg_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Boolean expression to filter rows from the table "committee_de_registration". All fields are combined with a logical 'AND'.
"""
input committee_de_registration_bool_exp {
  _and: [committee_de_registration_bool_exp!]
  _not: committee_de_registration_bool_exp
  _or: [committee_de_registration_bool_exp!]
  cert_index: Int_comparison_exp
  cold_key_id: bigint_comparison_exp
  id: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
  votingAnchor: voting_anchor_bool_exp
  voting_anchor_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "committee_de_registration"
"""
enum committee_de_registration_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  committee_de_registration_pkey
}

"""
input type for incrementing numeric columns in table "committee_de_registration"
"""
input committee_de_registration_inc_input {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
input type for inserting data into table "committee_de_registration"
"""
input committee_de_registration_insert_input {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
  votingAnchor: voting_anchor_obj_rel_insert_input
  voting_anchor_id: bigint
}

"""aggregate max on columns"""
type committee_de_registration_max_fields {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""aggregate min on columns"""
type committee_de_registration_min_fields {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
response of any mutation on the table "committee_de_registration"
"""
type committee_de_registration_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [committee_de_registration!]!
}

"""
on_conflict condition type for table "committee_de_registration"
"""
input committee_de_registration_on_conflict {
  constraint: committee_de_registration_constraint!
  update_columns: [committee_de_registration_update_column!]! = []
  where: committee_de_registration_bool_exp
}

"""Ordering options when selecting data from "committee_de_registration"."""
input committee_de_registration_order_by {
  cert_index: order_by
  cold_key_id: order_by
  id: order_by
  transaction: Transaction_order_by
  tx_id: order_by
  votingAnchor: voting_anchor_order_by
  voting_anchor_id: order_by
}

"""primary key columns input for table: committee_de_registration"""
input committee_de_registration_pk_columns_input {
  id: bigint!
}

"""
select columns of table "committee_de_registration"
"""
enum committee_de_registration_select_column {
  """column name"""
  cert_index

  """column name"""
  cold_key_id

  """column name"""
  id

  """column name"""
  tx_id

  """column name"""
  voting_anchor_id
}

"""
input type for updating data in table "committee_de_registration"
"""
input committee_de_registration_set_input {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""aggregate stddev on columns"""
type committee_de_registration_stddev_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_pop on columns"""
type committee_de_registration_stddev_pop_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_samp on columns"""
type committee_de_registration_stddev_samp_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Streaming cursor of the table "committee_de_registration"
"""
input committee_de_registration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: committee_de_registration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input committee_de_registration_stream_cursor_value_input {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""aggregate sum on columns"""
type committee_de_registration_sum_fields {
  cert_index: Int
  cold_key_id: bigint
  id: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
update columns of table "committee_de_registration"
"""
enum committee_de_registration_update_column {
  """column name"""
  cert_index

  """column name"""
  cold_key_id

  """column name"""
  id

  """column name"""
  tx_id

  """column name"""
  voting_anchor_id
}

input committee_de_registration_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: committee_de_registration_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: committee_de_registration_set_input

  """filter the rows which have to be updated"""
  where: committee_de_registration_bool_exp!
}

"""aggregate var_pop on columns"""
type committee_de_registration_var_pop_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate var_samp on columns"""
type committee_de_registration_var_samp_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate variance on columns"""
type committee_de_registration_variance_fields {
  cert_index: Float
  cold_key_id: Float
  id: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
columns and relationships of "committee_hash"
"""
type committee_hash {
  has_script: Boolean!
  id: bigint!
  raw: bytea!
}

"""
aggregated selection of "committee_hash"
"""
type committee_hash_aggregate {
  aggregate: committee_hash_aggregate_fields
  nodes: [committee_hash!]!
}

"""
aggregate fields of "committee_hash"
"""
type committee_hash_aggregate_fields {
  avg: committee_hash_avg_fields
  count(columns: [committee_hash_select_column!], distinct: Boolean): Int!
  max: committee_hash_max_fields
  min: committee_hash_min_fields
  stddev: committee_hash_stddev_fields
  stddev_pop: committee_hash_stddev_pop_fields
  stddev_samp: committee_hash_stddev_samp_fields
  sum: committee_hash_sum_fields
  var_pop: committee_hash_var_pop_fields
  var_samp: committee_hash_var_samp_fields
  variance: committee_hash_variance_fields
}

"""aggregate avg on columns"""
type committee_hash_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "committee_hash". All fields are combined with a logical 'AND'.
"""
input committee_hash_bool_exp {
  _and: [committee_hash_bool_exp!]
  _not: committee_hash_bool_exp
  _or: [committee_hash_bool_exp!]
  has_script: Boolean_comparison_exp
  id: bigint_comparison_exp
  raw: bytea_comparison_exp
}

"""
unique or primary key constraints on table "committee_hash"
"""
enum committee_hash_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  committee_hash_pkey

  """
  unique or primary key constraint on columns "has_script", "raw"
  """
  unique_committee_hash
}

"""
input type for incrementing numeric columns in table "committee_hash"
"""
input committee_hash_inc_input {
  id: bigint
}

"""
input type for inserting data into table "committee_hash"
"""
input committee_hash_insert_input {
  has_script: Boolean
  id: bigint
  raw: bytea
}

"""aggregate max on columns"""
type committee_hash_max_fields {
  id: bigint
}

"""aggregate min on columns"""
type committee_hash_min_fields {
  id: bigint
}

"""
response of any mutation on the table "committee_hash"
"""
type committee_hash_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [committee_hash!]!
}

"""
input type for inserting object relation for remote table "committee_hash"
"""
input committee_hash_obj_rel_insert_input {
  data: committee_hash_insert_input!

  """upsert condition"""
  on_conflict: committee_hash_on_conflict
}

"""
on_conflict condition type for table "committee_hash"
"""
input committee_hash_on_conflict {
  constraint: committee_hash_constraint!
  update_columns: [committee_hash_update_column!]! = []
  where: committee_hash_bool_exp
}

"""Ordering options when selecting data from "committee_hash"."""
input committee_hash_order_by {
  has_script: order_by
  id: order_by
  raw: order_by
}

"""primary key columns input for table: committee_hash"""
input committee_hash_pk_columns_input {
  id: bigint!
}

"""
select columns of table "committee_hash"
"""
enum committee_hash_select_column {
  """column name"""
  has_script

  """column name"""
  id

  """column name"""
  raw
}

"""
input type for updating data in table "committee_hash"
"""
input committee_hash_set_input {
  has_script: Boolean
  id: bigint
  raw: bytea
}

"""aggregate stddev on columns"""
type committee_hash_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type committee_hash_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type committee_hash_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "committee_hash"
"""
input committee_hash_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: committee_hash_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input committee_hash_stream_cursor_value_input {
  has_script: Boolean
  id: bigint
  raw: bytea
}

"""aggregate sum on columns"""
type committee_hash_sum_fields {
  id: bigint
}

"""
update columns of table "committee_hash"
"""
enum committee_hash_update_column {
  """column name"""
  has_script

  """column name"""
  id

  """column name"""
  raw
}

input committee_hash_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: committee_hash_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: committee_hash_set_input

  """filter the rows which have to be updated"""
  where: committee_hash_bool_exp!
}

"""aggregate var_pop on columns"""
type committee_hash_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type committee_hash_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type committee_hash_variance_fields {
  id: Float
}

"""
input type for incrementing numeric columns in table "committee"
"""
input committee_inc_input {
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""
input type for inserting data into table "committee"
"""
input committee_insert_input {
  committeeMembers: committee_member_obj_rel_insert_input
  govActionProposal: gov_action_proposal_obj_rel_insert_input
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""aggregate max on columns"""
type committee_max_fields {
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""
columns and relationships of "committee_member"
"""
type committee_member {
  """An object relationship"""
  committee: committee

  """An object relationship"""
  committeeHash: committee_hash
  committee_hash_id: bigint!
  committee_id: bigint!
  expiration_epoch: Int!
  id: bigint!
}

"""
aggregated selection of "committee_member"
"""
type committee_member_aggregate {
  aggregate: committee_member_aggregate_fields
  nodes: [committee_member!]!
}

"""
aggregate fields of "committee_member"
"""
type committee_member_aggregate_fields {
  avg: committee_member_avg_fields
  count(columns: [committee_member_select_column!], distinct: Boolean): Int!
  max: committee_member_max_fields
  min: committee_member_min_fields
  stddev: committee_member_stddev_fields
  stddev_pop: committee_member_stddev_pop_fields
  stddev_samp: committee_member_stddev_samp_fields
  sum: committee_member_sum_fields
  var_pop: committee_member_var_pop_fields
  var_samp: committee_member_var_samp_fields
  variance: committee_member_variance_fields
}

"""aggregate avg on columns"""
type committee_member_avg_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "committee_member". All fields are combined with a logical 'AND'.
"""
input committee_member_bool_exp {
  _and: [committee_member_bool_exp!]
  _not: committee_member_bool_exp
  _or: [committee_member_bool_exp!]
  committee: committee_bool_exp
  committeeHash: committee_hash_bool_exp
  committee_hash_id: bigint_comparison_exp
  committee_id: bigint_comparison_exp
  expiration_epoch: Int_comparison_exp
  id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "committee_member"
"""
enum committee_member_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  committee_member_pkey
}

"""
input type for incrementing numeric columns in table "committee_member"
"""
input committee_member_inc_input {
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""
input type for inserting data into table "committee_member"
"""
input committee_member_insert_input {
  committee: committee_obj_rel_insert_input
  committeeHash: committee_hash_obj_rel_insert_input
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""aggregate max on columns"""
type committee_member_max_fields {
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""aggregate min on columns"""
type committee_member_min_fields {
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""
response of any mutation on the table "committee_member"
"""
type committee_member_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [committee_member!]!
}

"""
input type for inserting object relation for remote table "committee_member"
"""
input committee_member_obj_rel_insert_input {
  data: committee_member_insert_input!

  """upsert condition"""
  on_conflict: committee_member_on_conflict
}

"""
on_conflict condition type for table "committee_member"
"""
input committee_member_on_conflict {
  constraint: committee_member_constraint!
  update_columns: [committee_member_update_column!]! = []
  where: committee_member_bool_exp
}

"""Ordering options when selecting data from "committee_member"."""
input committee_member_order_by {
  committee: committee_order_by
  committeeHash: committee_hash_order_by
  committee_hash_id: order_by
  committee_id: order_by
  expiration_epoch: order_by
  id: order_by
}

"""primary key columns input for table: committee_member"""
input committee_member_pk_columns_input {
  id: bigint!
}

"""
select columns of table "committee_member"
"""
enum committee_member_select_column {
  """column name"""
  committee_hash_id

  """column name"""
  committee_id

  """column name"""
  expiration_epoch

  """column name"""
  id
}

"""
input type for updating data in table "committee_member"
"""
input committee_member_set_input {
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""aggregate stddev on columns"""
type committee_member_stddev_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type committee_member_stddev_pop_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type committee_member_stddev_samp_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""
Streaming cursor of the table "committee_member"
"""
input committee_member_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: committee_member_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input committee_member_stream_cursor_value_input {
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""aggregate sum on columns"""
type committee_member_sum_fields {
  committee_hash_id: bigint
  committee_id: bigint
  expiration_epoch: Int
  id: bigint
}

"""
update columns of table "committee_member"
"""
enum committee_member_update_column {
  """column name"""
  committee_hash_id

  """column name"""
  committee_id

  """column name"""
  expiration_epoch

  """column name"""
  id
}

input committee_member_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: committee_member_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: committee_member_set_input

  """filter the rows which have to be updated"""
  where: committee_member_bool_exp!
}

"""aggregate var_pop on columns"""
type committee_member_var_pop_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""aggregate var_samp on columns"""
type committee_member_var_samp_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""aggregate variance on columns"""
type committee_member_variance_fields {
  committee_hash_id: Float
  committee_id: Float
  expiration_epoch: Float
  id: Float
}

"""aggregate min on columns"""
type committee_min_fields {
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""
response of any mutation on the table "committee"
"""
type committee_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [committee!]!
}

"""
input type for inserting object relation for remote table "committee"
"""
input committee_obj_rel_insert_input {
  data: committee_insert_input!

  """upsert condition"""
  on_conflict: committee_on_conflict
}

"""
on_conflict condition type for table "committee"
"""
input committee_on_conflict {
  constraint: committee_constraint!
  update_columns: [committee_update_column!]! = []
  where: committee_bool_exp
}

"""Ordering options when selecting data from "committee"."""
input committee_order_by {
  committeeMembers: committee_member_order_by
  govActionProposal: gov_action_proposal_order_by
  gov_action_proposal_id: order_by
  id: order_by
  quorum_denominator: order_by
  quorum_numerator: order_by
}

"""primary key columns input for table: committee"""
input committee_pk_columns_input {
  id: bigint!
}

"""
columns and relationships of "committee_registration"
"""
type committee_registration {
  cert_index: Int!
  cold_key_id: bigint!
  hot_key_id: bigint!
  id: bigint!

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint!
}

"""
aggregated selection of "committee_registration"
"""
type committee_registration_aggregate {
  aggregate: committee_registration_aggregate_fields
  nodes: [committee_registration!]!
}

"""
aggregate fields of "committee_registration"
"""
type committee_registration_aggregate_fields {
  avg: committee_registration_avg_fields
  count(columns: [committee_registration_select_column!], distinct: Boolean): Int!
  max: committee_registration_max_fields
  min: committee_registration_min_fields
  stddev: committee_registration_stddev_fields
  stddev_pop: committee_registration_stddev_pop_fields
  stddev_samp: committee_registration_stddev_samp_fields
  sum: committee_registration_sum_fields
  var_pop: committee_registration_var_pop_fields
  var_samp: committee_registration_var_samp_fields
  variance: committee_registration_variance_fields
}

"""aggregate avg on columns"""
type committee_registration_avg_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "committee_registration". All fields are combined with a logical 'AND'.
"""
input committee_registration_bool_exp {
  _and: [committee_registration_bool_exp!]
  _not: committee_registration_bool_exp
  _or: [committee_registration_bool_exp!]
  cert_index: Int_comparison_exp
  cold_key_id: bigint_comparison_exp
  hot_key_id: bigint_comparison_exp
  id: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "committee_registration"
"""
enum committee_registration_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  committee_registration_pkey
}

"""
input type for incrementing numeric columns in table "committee_registration"
"""
input committee_registration_inc_input {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "committee_registration"
"""
input committee_registration_insert_input {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
}

"""aggregate max on columns"""
type committee_registration_max_fields {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type committee_registration_min_fields {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  tx_id: bigint
}

"""
response of any mutation on the table "committee_registration"
"""
type committee_registration_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [committee_registration!]!
}

"""
on_conflict condition type for table "committee_registration"
"""
input committee_registration_on_conflict {
  constraint: committee_registration_constraint!
  update_columns: [committee_registration_update_column!]! = []
  where: committee_registration_bool_exp
}

"""Ordering options when selecting data from "committee_registration"."""
input committee_registration_order_by {
  cert_index: order_by
  cold_key_id: order_by
  hot_key_id: order_by
  id: order_by
  transaction: Transaction_order_by
  tx_id: order_by
}

"""primary key columns input for table: committee_registration"""
input committee_registration_pk_columns_input {
  id: bigint!
}

"""
select columns of table "committee_registration"
"""
enum committee_registration_select_column {
  """column name"""
  cert_index

  """column name"""
  cold_key_id

  """column name"""
  hot_key_id

  """column name"""
  id

  """column name"""
  tx_id
}

"""
input type for updating data in table "committee_registration"
"""
input committee_registration_set_input {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type committee_registration_stddev_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type committee_registration_stddev_pop_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type committee_registration_stddev_samp_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""
Streaming cursor of the table "committee_registration"
"""
input committee_registration_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: committee_registration_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input committee_registration_stream_cursor_value_input {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type committee_registration_sum_fields {
  cert_index: Int
  cold_key_id: bigint
  hot_key_id: bigint
  id: bigint
  tx_id: bigint
}

"""
update columns of table "committee_registration"
"""
enum committee_registration_update_column {
  """column name"""
  cert_index

  """column name"""
  cold_key_id

  """column name"""
  hot_key_id

  """column name"""
  id

  """column name"""
  tx_id
}

input committee_registration_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: committee_registration_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: committee_registration_set_input

  """filter the rows which have to be updated"""
  where: committee_registration_bool_exp!
}

"""aggregate var_pop on columns"""
type committee_registration_var_pop_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type committee_registration_var_samp_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type committee_registration_variance_fields {
  cert_index: Float
  cold_key_id: Float
  hot_key_id: Float
  id: Float
  tx_id: Float
}

"""
select columns of table "committee"
"""
enum committee_select_column {
  """column name"""
  gov_action_proposal_id

  """column name"""
  id

  """column name"""
  quorum_denominator

  """column name"""
  quorum_numerator
}

"""
input type for updating data in table "committee"
"""
input committee_set_input {
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""aggregate stddev on columns"""
type committee_stddev_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""aggregate stddev_pop on columns"""
type committee_stddev_pop_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""aggregate stddev_samp on columns"""
type committee_stddev_samp_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""
Streaming cursor of the table "committee"
"""
input committee_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: committee_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input committee_stream_cursor_value_input {
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""aggregate sum on columns"""
type committee_sum_fields {
  gov_action_proposal_id: bigint
  id: bigint
  quorum_denominator: bigint
  quorum_numerator: bigint
}

"""
update columns of table "committee"
"""
enum committee_update_column {
  """column name"""
  gov_action_proposal_id

  """column name"""
  id

  """column name"""
  quorum_denominator

  """column name"""
  quorum_numerator
}

input committee_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: committee_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: committee_set_input

  """filter the rows which have to be updated"""
  where: committee_bool_exp!
}

"""aggregate var_pop on columns"""
type committee_var_pop_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""aggregate var_samp on columns"""
type committee_var_samp_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""aggregate variance on columns"""
type committee_variance_fields {
  gov_action_proposal_id: Float
  id: Float
  quorum_denominator: Float
  quorum_numerator: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "drep_distr"
"""
type drep_distr {
  """An object relationship"""
  DrepHash: drep_hash

  """An object relationship"""
  Epoch: Epoch
  active_until: Int
  amount: bigint!
  epoch_no: Int!
  hash_id: bigint!
  id: bigint!
}

"""
aggregated selection of "drep_distr"
"""
type drep_distr_aggregate {
  aggregate: drep_distr_aggregate_fields
  nodes: [drep_distr!]!
}

"""
aggregate fields of "drep_distr"
"""
type drep_distr_aggregate_fields {
  avg: drep_distr_avg_fields
  count(columns: [drep_distr_select_column!], distinct: Boolean): Int!
  max: drep_distr_max_fields
  min: drep_distr_min_fields
  stddev: drep_distr_stddev_fields
  stddev_pop: drep_distr_stddev_pop_fields
  stddev_samp: drep_distr_stddev_samp_fields
  sum: drep_distr_sum_fields
  var_pop: drep_distr_var_pop_fields
  var_samp: drep_distr_var_samp_fields
  variance: drep_distr_variance_fields
}

"""aggregate avg on columns"""
type drep_distr_avg_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "drep_distr". All fields are combined with a logical 'AND'.
"""
input drep_distr_bool_exp {
  DrepHash: drep_hash_bool_exp
  Epoch: Epoch_bool_exp
  _and: [drep_distr_bool_exp!]
  _not: drep_distr_bool_exp
  _or: [drep_distr_bool_exp!]
  active_until: Int_comparison_exp
  amount: bigint_comparison_exp
  epoch_no: Int_comparison_exp
  hash_id: bigint_comparison_exp
  id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "drep_distr"
"""
enum drep_distr_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  drep_distr_pkey

  """
  unique or primary key constraint on columns "epoch_no", "hash_id"
  """
  unique_drep_distr
}

"""
input type for incrementing numeric columns in table "drep_distr"
"""
input drep_distr_inc_input {
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""
input type for inserting data into table "drep_distr"
"""
input drep_distr_insert_input {
  DrepHash: drep_hash_obj_rel_insert_input
  Epoch: Epoch_obj_rel_insert_input
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""aggregate max on columns"""
type drep_distr_max_fields {
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""aggregate min on columns"""
type drep_distr_min_fields {
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""
response of any mutation on the table "drep_distr"
"""
type drep_distr_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [drep_distr!]!
}

"""
on_conflict condition type for table "drep_distr"
"""
input drep_distr_on_conflict {
  constraint: drep_distr_constraint!
  update_columns: [drep_distr_update_column!]! = []
  where: drep_distr_bool_exp
}

"""Ordering options when selecting data from "drep_distr"."""
input drep_distr_order_by {
  DrepHash: drep_hash_order_by
  Epoch: Epoch_order_by
  active_until: order_by
  amount: order_by
  epoch_no: order_by
  hash_id: order_by
  id: order_by
}

"""primary key columns input for table: drep_distr"""
input drep_distr_pk_columns_input {
  id: bigint!
}

"""
select columns of table "drep_distr"
"""
enum drep_distr_select_column {
  """column name"""
  active_until

  """column name"""
  amount

  """column name"""
  epoch_no

  """column name"""
  hash_id

  """column name"""
  id
}

"""
input type for updating data in table "drep_distr"
"""
input drep_distr_set_input {
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""aggregate stddev on columns"""
type drep_distr_stddev_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type drep_distr_stddev_pop_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type drep_distr_stddev_samp_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""
Streaming cursor of the table "drep_distr"
"""
input drep_distr_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: drep_distr_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input drep_distr_stream_cursor_value_input {
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""aggregate sum on columns"""
type drep_distr_sum_fields {
  active_until: Int
  amount: bigint
  epoch_no: Int
  hash_id: bigint
  id: bigint
}

"""
update columns of table "drep_distr"
"""
enum drep_distr_update_column {
  """column name"""
  active_until

  """column name"""
  amount

  """column name"""
  epoch_no

  """column name"""
  hash_id

  """column name"""
  id
}

input drep_distr_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: drep_distr_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: drep_distr_set_input

  """filter the rows which have to be updated"""
  where: drep_distr_bool_exp!
}

"""aggregate var_pop on columns"""
type drep_distr_var_pop_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""aggregate var_samp on columns"""
type drep_distr_var_samp_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""aggregate variance on columns"""
type drep_distr_variance_fields {
  active_until: Float
  amount: Float
  epoch_no: Float
  hash_id: Float
  id: Float
}

"""
columns and relationships of "drep_hash"
"""
type drep_hash {
  has_script: Boolean!
  id: bigint!
  raw: bytea
  view: String!
}

"""
aggregated selection of "drep_hash"
"""
type drep_hash_aggregate {
  aggregate: drep_hash_aggregate_fields
  nodes: [drep_hash!]!
}

"""
aggregate fields of "drep_hash"
"""
type drep_hash_aggregate_fields {
  avg: drep_hash_avg_fields
  count(columns: [drep_hash_select_column!], distinct: Boolean): Int!
  max: drep_hash_max_fields
  min: drep_hash_min_fields
  stddev: drep_hash_stddev_fields
  stddev_pop: drep_hash_stddev_pop_fields
  stddev_samp: drep_hash_stddev_samp_fields
  sum: drep_hash_sum_fields
  var_pop: drep_hash_var_pop_fields
  var_samp: drep_hash_var_samp_fields
  variance: drep_hash_variance_fields
}

"""aggregate avg on columns"""
type drep_hash_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "drep_hash". All fields are combined with a logical 'AND'.
"""
input drep_hash_bool_exp {
  _and: [drep_hash_bool_exp!]
  _not: drep_hash_bool_exp
  _or: [drep_hash_bool_exp!]
  has_script: Boolean_comparison_exp
  id: bigint_comparison_exp
  raw: bytea_comparison_exp
  view: String_comparison_exp
}

"""
unique or primary key constraints on table "drep_hash"
"""
enum drep_hash_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  drep_hash_pkey

  """
  unique or primary key constraint on columns "has_script", "raw"
  """
  unique_drep_hash
}

"""
input type for incrementing numeric columns in table "drep_hash"
"""
input drep_hash_inc_input {
  id: bigint
}

"""
input type for inserting data into table "drep_hash"
"""
input drep_hash_insert_input {
  has_script: Boolean
  id: bigint
  raw: bytea
  view: String
}

"""aggregate max on columns"""
type drep_hash_max_fields {
  id: bigint
  view: String
}

"""aggregate min on columns"""
type drep_hash_min_fields {
  id: bigint
  view: String
}

"""
response of any mutation on the table "drep_hash"
"""
type drep_hash_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [drep_hash!]!
}

"""
input type for inserting object relation for remote table "drep_hash"
"""
input drep_hash_obj_rel_insert_input {
  data: drep_hash_insert_input!

  """upsert condition"""
  on_conflict: drep_hash_on_conflict
}

"""
on_conflict condition type for table "drep_hash"
"""
input drep_hash_on_conflict {
  constraint: drep_hash_constraint!
  update_columns: [drep_hash_update_column!]! = []
  where: drep_hash_bool_exp
}

"""Ordering options when selecting data from "drep_hash"."""
input drep_hash_order_by {
  has_script: order_by
  id: order_by
  raw: order_by
  view: order_by
}

"""primary key columns input for table: drep_hash"""
input drep_hash_pk_columns_input {
  id: bigint!
}

"""
select columns of table "drep_hash"
"""
enum drep_hash_select_column {
  """column name"""
  has_script

  """column name"""
  id

  """column name"""
  raw

  """column name"""
  view
}

"""
input type for updating data in table "drep_hash"
"""
input drep_hash_set_input {
  has_script: Boolean
  id: bigint
  raw: bytea
  view: String
}

"""aggregate stddev on columns"""
type drep_hash_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type drep_hash_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type drep_hash_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "drep_hash"
"""
input drep_hash_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: drep_hash_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input drep_hash_stream_cursor_value_input {
  has_script: Boolean
  id: bigint
  raw: bytea
  view: String
}

"""aggregate sum on columns"""
type drep_hash_sum_fields {
  id: bigint
}

"""
update columns of table "drep_hash"
"""
enum drep_hash_update_column {
  """column name"""
  has_script

  """column name"""
  id

  """column name"""
  raw

  """column name"""
  view
}

input drep_hash_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: drep_hash_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: drep_hash_set_input

  """filter the rows which have to be updated"""
  where: drep_hash_bool_exp!
}

"""aggregate var_pop on columns"""
type drep_hash_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type drep_hash_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type drep_hash_variance_fields {
  id: Float
}

"""
columns and relationships of "epoch_param"
"""
type epoch_param {
  block_id: bigint!
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8!
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int!
  extra_entropy: bytea
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint!
  influence: float8!
  key_deposit: numeric!
  max_bh_size: Int!
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int!
  max_collateral_inputs: Int
  max_epoch: Int!
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int!
  max_val_size: numeric
  min_fee_a: Int!
  min_fee_b: Int!
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric!
  min_utxo_value: numeric!
  monetary_expand_rate: float8!
  nonce: bytea
  optimal_pool_count: Int!
  pool_deposit: numeric!
  price_mem: float8
  price_step: float8
  protocol_major: Int!
  protocol_minor: Int!
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8!
}

"""
aggregated selection of "epoch_param"
"""
type epoch_param_aggregate {
  aggregate: epoch_param_aggregate_fields
  nodes: [epoch_param!]!
}

"""
aggregate fields of "epoch_param"
"""
type epoch_param_aggregate_fields {
  avg: epoch_param_avg_fields
  count(columns: [epoch_param_select_column!], distinct: Boolean): Int!
  max: epoch_param_max_fields
  min: epoch_param_min_fields
  stddev: epoch_param_stddev_fields
  stddev_pop: epoch_param_stddev_pop_fields
  stddev_samp: epoch_param_stddev_samp_fields
  sum: epoch_param_sum_fields
  var_pop: epoch_param_var_pop_fields
  var_samp: epoch_param_var_samp_fields
  variance: epoch_param_variance_fields
}

"""aggregate avg on columns"""
type epoch_param_avg_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

"""
Boolean expression to filter rows from the table "epoch_param". All fields are combined with a logical 'AND'.
"""
input epoch_param_bool_exp {
  _and: [epoch_param_bool_exp!]
  _not: epoch_param_bool_exp
  _or: [epoch_param_bool_exp!]
  block_id: bigint_comparison_exp
  coins_per_utxo_size: numeric_comparison_exp
  collateral_percent: Int_comparison_exp
  committee_max_term_length: numeric_comparison_exp
  committee_min_size: numeric_comparison_exp
  cost_model_id: bigint_comparison_exp
  decentralisation: float8_comparison_exp
  drep_activity: numeric_comparison_exp
  drep_deposit: numeric_comparison_exp
  dvt_committee_no_confidence: float8_comparison_exp
  dvt_committee_normal: float8_comparison_exp
  dvt_hard_fork_initiation: float8_comparison_exp
  dvt_motion_no_confidence: float8_comparison_exp
  dvt_p_p_economic_group: float8_comparison_exp
  dvt_p_p_gov_group: float8_comparison_exp
  dvt_p_p_network_group: float8_comparison_exp
  dvt_p_p_technical_group: float8_comparison_exp
  dvt_treasury_withdrawal: float8_comparison_exp
  dvt_update_to_constitution: float8_comparison_exp
  epoch_no: Int_comparison_exp
  extra_entropy: bytea_comparison_exp
  gov_action_deposit: numeric_comparison_exp
  gov_action_lifetime: numeric_comparison_exp
  id: bigint_comparison_exp
  influence: float8_comparison_exp
  key_deposit: numeric_comparison_exp
  max_bh_size: Int_comparison_exp
  max_block_ex_mem: numeric_comparison_exp
  max_block_ex_steps: numeric_comparison_exp
  max_block_size: Int_comparison_exp
  max_collateral_inputs: Int_comparison_exp
  max_epoch: Int_comparison_exp
  max_tx_ex_mem: numeric_comparison_exp
  max_tx_ex_steps: numeric_comparison_exp
  max_tx_size: Int_comparison_exp
  max_val_size: numeric_comparison_exp
  min_fee_a: Int_comparison_exp
  min_fee_b: Int_comparison_exp
  min_fee_ref_script_cost_per_byte: float8_comparison_exp
  min_pool_cost: numeric_comparison_exp
  min_utxo_value: numeric_comparison_exp
  monetary_expand_rate: float8_comparison_exp
  nonce: bytea_comparison_exp
  optimal_pool_count: Int_comparison_exp
  pool_deposit: numeric_comparison_exp
  price_mem: float8_comparison_exp
  price_step: float8_comparison_exp
  protocol_major: Int_comparison_exp
  protocol_minor: Int_comparison_exp
  pvt_committee_no_confidence: float8_comparison_exp
  pvt_committee_normal: float8_comparison_exp
  pvt_hard_fork_initiation: float8_comparison_exp
  pvt_motion_no_confidence: float8_comparison_exp
  pvtpp_security_group: float8_comparison_exp
  treasury_growth_rate: float8_comparison_exp
}

"""
unique or primary key constraints on table "epoch_param"
"""
enum epoch_param_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  epoch_param_pkey

  """
  unique or primary key constraint on columns "epoch_no", "block_id"
  """
  unique_epoch_param
}

"""
input type for incrementing numeric columns in table "epoch_param"
"""
input epoch_param_inc_input {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""
input type for inserting data into table "epoch_param"
"""
input epoch_param_insert_input {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  extra_entropy: bytea
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  nonce: bytea
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""aggregate max on columns"""
type epoch_param_max_fields {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""aggregate min on columns"""
type epoch_param_min_fields {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""
response of any mutation on the table "epoch_param"
"""
type epoch_param_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [epoch_param!]!
}

"""
on_conflict condition type for table "epoch_param"
"""
input epoch_param_on_conflict {
  constraint: epoch_param_constraint!
  update_columns: [epoch_param_update_column!]! = []
  where: epoch_param_bool_exp
}

"""Ordering options when selecting data from "epoch_param"."""
input epoch_param_order_by {
  block_id: order_by
  coins_per_utxo_size: order_by
  collateral_percent: order_by
  committee_max_term_length: order_by
  committee_min_size: order_by
  cost_model_id: order_by
  decentralisation: order_by
  drep_activity: order_by
  drep_deposit: order_by
  dvt_committee_no_confidence: order_by
  dvt_committee_normal: order_by
  dvt_hard_fork_initiation: order_by
  dvt_motion_no_confidence: order_by
  dvt_p_p_economic_group: order_by
  dvt_p_p_gov_group: order_by
  dvt_p_p_network_group: order_by
  dvt_p_p_technical_group: order_by
  dvt_treasury_withdrawal: order_by
  dvt_update_to_constitution: order_by
  epoch_no: order_by
  extra_entropy: order_by
  gov_action_deposit: order_by
  gov_action_lifetime: order_by
  id: order_by
  influence: order_by
  key_deposit: order_by
  max_bh_size: order_by
  max_block_ex_mem: order_by
  max_block_ex_steps: order_by
  max_block_size: order_by
  max_collateral_inputs: order_by
  max_epoch: order_by
  max_tx_ex_mem: order_by
  max_tx_ex_steps: order_by
  max_tx_size: order_by
  max_val_size: order_by
  min_fee_a: order_by
  min_fee_b: order_by
  min_fee_ref_script_cost_per_byte: order_by
  min_pool_cost: order_by
  min_utxo_value: order_by
  monetary_expand_rate: order_by
  nonce: order_by
  optimal_pool_count: order_by
  pool_deposit: order_by
  price_mem: order_by
  price_step: order_by
  protocol_major: order_by
  protocol_minor: order_by
  pvt_committee_no_confidence: order_by
  pvt_committee_normal: order_by
  pvt_hard_fork_initiation: order_by
  pvt_motion_no_confidence: order_by
  pvtpp_security_group: order_by
  treasury_growth_rate: order_by
}

"""primary key columns input for table: epoch_param"""
input epoch_param_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoch_param"
"""
enum epoch_param_select_column {
  """column name"""
  block_id

  """column name"""
  coins_per_utxo_size

  """column name"""
  collateral_percent

  """column name"""
  committee_max_term_length

  """column name"""
  committee_min_size

  """column name"""
  cost_model_id

  """column name"""
  decentralisation

  """column name"""
  drep_activity

  """column name"""
  drep_deposit

  """column name"""
  dvt_committee_no_confidence

  """column name"""
  dvt_committee_normal

  """column name"""
  dvt_hard_fork_initiation

  """column name"""
  dvt_motion_no_confidence

  """column name"""
  dvt_p_p_economic_group

  """column name"""
  dvt_p_p_gov_group

  """column name"""
  dvt_p_p_network_group

  """column name"""
  dvt_p_p_technical_group

  """column name"""
  dvt_treasury_withdrawal

  """column name"""
  dvt_update_to_constitution

  """column name"""
  epoch_no

  """column name"""
  extra_entropy

  """column name"""
  gov_action_deposit

  """column name"""
  gov_action_lifetime

  """column name"""
  id

  """column name"""
  influence

  """column name"""
  key_deposit

  """column name"""
  max_bh_size

  """column name"""
  max_block_ex_mem

  """column name"""
  max_block_ex_steps

  """column name"""
  max_block_size

  """column name"""
  max_collateral_inputs

  """column name"""
  max_epoch

  """column name"""
  max_tx_ex_mem

  """column name"""
  max_tx_ex_steps

  """column name"""
  max_tx_size

  """column name"""
  max_val_size

  """column name"""
  min_fee_a

  """column name"""
  min_fee_b

  """column name"""
  min_fee_ref_script_cost_per_byte

  """column name"""
  min_pool_cost

  """column name"""
  min_utxo_value

  """column name"""
  monetary_expand_rate

  """column name"""
  nonce

  """column name"""
  optimal_pool_count

  """column name"""
  pool_deposit

  """column name"""
  price_mem

  """column name"""
  price_step

  """column name"""
  protocol_major

  """column name"""
  protocol_minor

  """column name"""
  pvt_committee_no_confidence

  """column name"""
  pvt_committee_normal

  """column name"""
  pvt_hard_fork_initiation

  """column name"""
  pvt_motion_no_confidence

  """column name"""
  pvtpp_security_group

  """column name"""
  treasury_growth_rate
}

"""
input type for updating data in table "epoch_param"
"""
input epoch_param_set_input {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  extra_entropy: bytea
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  nonce: bytea
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""aggregate stddev on columns"""
type epoch_param_stddev_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

"""aggregate stddev_pop on columns"""
type epoch_param_stddev_pop_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

"""aggregate stddev_samp on columns"""
type epoch_param_stddev_samp_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

"""
Streaming cursor of the table "epoch_param"
"""
input epoch_param_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: epoch_param_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input epoch_param_stream_cursor_value_input {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  extra_entropy: bytea
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  nonce: bytea
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""aggregate sum on columns"""
type epoch_param_sum_fields {
  block_id: bigint
  coins_per_utxo_size: numeric
  collateral_percent: Int
  committee_max_term_length: numeric
  committee_min_size: numeric
  cost_model_id: bigint
  decentralisation: float8
  drep_activity: numeric
  drep_deposit: numeric
  dvt_committee_no_confidence: float8
  dvt_committee_normal: float8
  dvt_hard_fork_initiation: float8
  dvt_motion_no_confidence: float8
  dvt_p_p_economic_group: float8
  dvt_p_p_gov_group: float8
  dvt_p_p_network_group: float8
  dvt_p_p_technical_group: float8
  dvt_treasury_withdrawal: float8
  dvt_update_to_constitution: float8
  epoch_no: Int
  gov_action_deposit: numeric
  gov_action_lifetime: numeric
  id: bigint
  influence: float8
  key_deposit: numeric
  max_bh_size: Int
  max_block_ex_mem: numeric
  max_block_ex_steps: numeric
  max_block_size: Int
  max_collateral_inputs: Int
  max_epoch: Int
  max_tx_ex_mem: numeric
  max_tx_ex_steps: numeric
  max_tx_size: Int
  max_val_size: numeric
  min_fee_a: Int
  min_fee_b: Int
  min_fee_ref_script_cost_per_byte: float8
  min_pool_cost: numeric
  min_utxo_value: numeric
  monetary_expand_rate: float8
  optimal_pool_count: Int
  pool_deposit: numeric
  price_mem: float8
  price_step: float8
  protocol_major: Int
  protocol_minor: Int
  pvt_committee_no_confidence: float8
  pvt_committee_normal: float8
  pvt_hard_fork_initiation: float8
  pvt_motion_no_confidence: float8
  pvtpp_security_group: float8
  treasury_growth_rate: float8
}

"""
update columns of table "epoch_param"
"""
enum epoch_param_update_column {
  """column name"""
  block_id

  """column name"""
  coins_per_utxo_size

  """column name"""
  collateral_percent

  """column name"""
  committee_max_term_length

  """column name"""
  committee_min_size

  """column name"""
  cost_model_id

  """column name"""
  decentralisation

  """column name"""
  drep_activity

  """column name"""
  drep_deposit

  """column name"""
  dvt_committee_no_confidence

  """column name"""
  dvt_committee_normal

  """column name"""
  dvt_hard_fork_initiation

  """column name"""
  dvt_motion_no_confidence

  """column name"""
  dvt_p_p_economic_group

  """column name"""
  dvt_p_p_gov_group

  """column name"""
  dvt_p_p_network_group

  """column name"""
  dvt_p_p_technical_group

  """column name"""
  dvt_treasury_withdrawal

  """column name"""
  dvt_update_to_constitution

  """column name"""
  epoch_no

  """column name"""
  extra_entropy

  """column name"""
  gov_action_deposit

  """column name"""
  gov_action_lifetime

  """column name"""
  id

  """column name"""
  influence

  """column name"""
  key_deposit

  """column name"""
  max_bh_size

  """column name"""
  max_block_ex_mem

  """column name"""
  max_block_ex_steps

  """column name"""
  max_block_size

  """column name"""
  max_collateral_inputs

  """column name"""
  max_epoch

  """column name"""
  max_tx_ex_mem

  """column name"""
  max_tx_ex_steps

  """column name"""
  max_tx_size

  """column name"""
  max_val_size

  """column name"""
  min_fee_a

  """column name"""
  min_fee_b

  """column name"""
  min_fee_ref_script_cost_per_byte

  """column name"""
  min_pool_cost

  """column name"""
  min_utxo_value

  """column name"""
  monetary_expand_rate

  """column name"""
  nonce

  """column name"""
  optimal_pool_count

  """column name"""
  pool_deposit

  """column name"""
  price_mem

  """column name"""
  price_step

  """column name"""
  protocol_major

  """column name"""
  protocol_minor

  """column name"""
  pvt_committee_no_confidence

  """column name"""
  pvt_committee_normal

  """column name"""
  pvt_hard_fork_initiation

  """column name"""
  pvt_motion_no_confidence

  """column name"""
  pvtpp_security_group

  """column name"""
  treasury_growth_rate
}

input epoch_param_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: epoch_param_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: epoch_param_set_input

  """filter the rows which have to be updated"""
  where: epoch_param_bool_exp!
}

"""aggregate var_pop on columns"""
type epoch_param_var_pop_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

"""aggregate var_samp on columns"""
type epoch_param_var_samp_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

"""aggregate variance on columns"""
type epoch_param_variance_fields {
  block_id: Float
  coins_per_utxo_size: Float
  collateral_percent: Float
  committee_max_term_length: Float
  committee_min_size: Float
  cost_model_id: Float
  decentralisation: Float
  drep_activity: Float
  drep_deposit: Float
  dvt_committee_no_confidence: Float
  dvt_committee_normal: Float
  dvt_hard_fork_initiation: Float
  dvt_motion_no_confidence: Float
  dvt_p_p_economic_group: Float
  dvt_p_p_gov_group: Float
  dvt_p_p_network_group: Float
  dvt_p_p_technical_group: Float
  dvt_treasury_withdrawal: Float
  dvt_update_to_constitution: Float
  epoch_no: Float
  gov_action_deposit: Float
  gov_action_lifetime: Float
  id: Float
  influence: Float
  key_deposit: Float
  max_bh_size: Float
  max_block_ex_mem: Float
  max_block_ex_steps: Float
  max_block_size: Float
  max_collateral_inputs: Float
  max_epoch: Float
  max_tx_ex_mem: Float
  max_tx_ex_steps: Float
  max_tx_size: Float
  max_val_size: Float
  min_fee_a: Float
  min_fee_b: Float
  min_fee_ref_script_cost_per_byte: Float
  min_pool_cost: Float
  min_utxo_value: Float
  monetary_expand_rate: Float
  optimal_pool_count: Float
  pool_deposit: Float
  price_mem: Float
  price_step: Float
  protocol_major: Float
  protocol_minor: Float
  pvt_committee_no_confidence: Float
  pvt_committee_normal: Float
  pvt_hard_fork_initiation: Float
  pvt_motion_no_confidence: Float
  pvtpp_security_group: Float
  treasury_growth_rate: Float
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "gov_action_proposal"
"""
type gov_action_proposal {
  """An object relationship"""
  PreviousGovAction: gov_action_proposal

  """An object relationship"""
  VotingAnchor: voting_anchor
  deposit: numeric!
  description(
    """JSON select path"""
    path: String
  ): jsonb!
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint!
  index: bigint!
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint!

  """An object relationship"""
  transaction: tx
  tx_id: bigint!
  type: govactiontype!
  voting_anchor_id: bigint
}

"""
aggregated selection of "gov_action_proposal"
"""
type gov_action_proposal_aggregate {
  aggregate: gov_action_proposal_aggregate_fields
  nodes: [gov_action_proposal!]!
}

"""
aggregate fields of "gov_action_proposal"
"""
type gov_action_proposal_aggregate_fields {
  avg: gov_action_proposal_avg_fields
  count(columns: [gov_action_proposal_select_column!], distinct: Boolean): Int!
  max: gov_action_proposal_max_fields
  min: gov_action_proposal_min_fields
  stddev: gov_action_proposal_stddev_fields
  stddev_pop: gov_action_proposal_stddev_pop_fields
  stddev_samp: gov_action_proposal_stddev_samp_fields
  sum: gov_action_proposal_sum_fields
  var_pop: gov_action_proposal_var_pop_fields
  var_samp: gov_action_proposal_var_samp_fields
  variance: gov_action_proposal_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input gov_action_proposal_append_input {
  description: jsonb
}

"""aggregate avg on columns"""
type gov_action_proposal_avg_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Boolean expression to filter rows from the table "gov_action_proposal". All fields are combined with a logical 'AND'.
"""
input gov_action_proposal_bool_exp {
  PreviousGovAction: gov_action_proposal_bool_exp
  VotingAnchor: voting_anchor_bool_exp
  _and: [gov_action_proposal_bool_exp!]
  _not: gov_action_proposal_bool_exp
  _or: [gov_action_proposal_bool_exp!]
  deposit: numeric_comparison_exp
  description: jsonb_comparison_exp
  dropped_epoch: Int_comparison_exp
  enacted_epoch: Int_comparison_exp
  expiration: Int_comparison_exp
  expired_epoch: Int_comparison_exp
  id: bigint_comparison_exp
  index: bigint_comparison_exp
  param_proposal: bigint_comparison_exp
  prev_gov_action_proposal: bigint_comparison_exp
  ratified_epoch: Int_comparison_exp
  return_address: bigint_comparison_exp
  transaction: tx_bool_exp
  tx_id: bigint_comparison_exp
  type: govactiontype_comparison_exp
  voting_anchor_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "gov_action_proposal"
"""
enum gov_action_proposal_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  gov_action_proposal_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input gov_action_proposal_delete_at_path_input {
  description: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input gov_action_proposal_delete_elem_input {
  description: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input gov_action_proposal_delete_key_input {
  description: String
}

"""
input type for incrementing numeric columns in table "gov_action_proposal"
"""
input gov_action_proposal_inc_input {
  deposit: numeric
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
input type for inserting data into table "gov_action_proposal"
"""
input gov_action_proposal_insert_input {
  PreviousGovAction: gov_action_proposal_obj_rel_insert_input
  VotingAnchor: voting_anchor_obj_rel_insert_input
  deposit: numeric
  description: jsonb
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  transaction: tx_obj_rel_insert_input
  tx_id: bigint
  type: govactiontype
  voting_anchor_id: bigint
}

"""aggregate max on columns"""
type gov_action_proposal_max_fields {
  deposit: numeric
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  tx_id: bigint
  type: govactiontype
  voting_anchor_id: bigint
}

"""aggregate min on columns"""
type gov_action_proposal_min_fields {
  deposit: numeric
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  tx_id: bigint
  type: govactiontype
  voting_anchor_id: bigint
}

"""
response of any mutation on the table "gov_action_proposal"
"""
type gov_action_proposal_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [gov_action_proposal!]!
}

"""
input type for inserting object relation for remote table "gov_action_proposal"
"""
input gov_action_proposal_obj_rel_insert_input {
  data: gov_action_proposal_insert_input!

  """upsert condition"""
  on_conflict: gov_action_proposal_on_conflict
}

"""
on_conflict condition type for table "gov_action_proposal"
"""
input gov_action_proposal_on_conflict {
  constraint: gov_action_proposal_constraint!
  update_columns: [gov_action_proposal_update_column!]! = []
  where: gov_action_proposal_bool_exp
}

"""Ordering options when selecting data from "gov_action_proposal"."""
input gov_action_proposal_order_by {
  PreviousGovAction: gov_action_proposal_order_by
  VotingAnchor: voting_anchor_order_by
  deposit: order_by
  description: order_by
  dropped_epoch: order_by
  enacted_epoch: order_by
  expiration: order_by
  expired_epoch: order_by
  id: order_by
  index: order_by
  param_proposal: order_by
  prev_gov_action_proposal: order_by
  ratified_epoch: order_by
  return_address: order_by
  transaction: tx_order_by
  tx_id: order_by
  type: order_by
  voting_anchor_id: order_by
}

"""primary key columns input for table: gov_action_proposal"""
input gov_action_proposal_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input gov_action_proposal_prepend_input {
  description: jsonb
}

"""
select columns of table "gov_action_proposal"
"""
enum gov_action_proposal_select_column {
  """column name"""
  deposit

  """column name"""
  description

  """column name"""
  dropped_epoch

  """column name"""
  enacted_epoch

  """column name"""
  expiration

  """column name"""
  expired_epoch

  """column name"""
  id

  """column name"""
  index

  """column name"""
  param_proposal

  """column name"""
  prev_gov_action_proposal

  """column name"""
  ratified_epoch

  """column name"""
  return_address

  """column name"""
  tx_id

  """column name"""
  type

  """column name"""
  voting_anchor_id
}

"""
input type for updating data in table "gov_action_proposal"
"""
input gov_action_proposal_set_input {
  deposit: numeric
  description: jsonb
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  tx_id: bigint
  type: govactiontype
  voting_anchor_id: bigint
}

"""aggregate stddev on columns"""
type gov_action_proposal_stddev_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_pop on columns"""
type gov_action_proposal_stddev_pop_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_samp on columns"""
type gov_action_proposal_stddev_samp_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Streaming cursor of the table "gov_action_proposal"
"""
input gov_action_proposal_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gov_action_proposal_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gov_action_proposal_stream_cursor_value_input {
  deposit: numeric
  description: jsonb
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  tx_id: bigint
  type: govactiontype
  voting_anchor_id: bigint
}

"""aggregate sum on columns"""
type gov_action_proposal_sum_fields {
  deposit: numeric
  dropped_epoch: Int
  enacted_epoch: Int
  expiration: Int
  expired_epoch: Int
  id: bigint
  index: bigint
  param_proposal: bigint
  prev_gov_action_proposal: bigint
  ratified_epoch: Int
  return_address: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
update columns of table "gov_action_proposal"
"""
enum gov_action_proposal_update_column {
  """column name"""
  deposit

  """column name"""
  description

  """column name"""
  dropped_epoch

  """column name"""
  enacted_epoch

  """column name"""
  expiration

  """column name"""
  expired_epoch

  """column name"""
  id

  """column name"""
  index

  """column name"""
  param_proposal

  """column name"""
  prev_gov_action_proposal

  """column name"""
  ratified_epoch

  """column name"""
  return_address

  """column name"""
  tx_id

  """column name"""
  type

  """column name"""
  voting_anchor_id
}

input gov_action_proposal_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: gov_action_proposal_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: gov_action_proposal_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: gov_action_proposal_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: gov_action_proposal_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: gov_action_proposal_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: gov_action_proposal_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: gov_action_proposal_set_input

  """filter the rows which have to be updated"""
  where: gov_action_proposal_bool_exp!
}

"""aggregate var_pop on columns"""
type gov_action_proposal_var_pop_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate var_samp on columns"""
type gov_action_proposal_var_samp_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate variance on columns"""
type gov_action_proposal_variance_fields {
  deposit: Float
  dropped_epoch: Float
  enacted_epoch: Float
  expiration: Float
  expired_epoch: Float
  id: Float
  index: Float
  param_proposal: Float
  prev_gov_action_proposal: Float
  ratified_epoch: Float
  return_address: Float
  tx_id: Float
  voting_anchor_id: Float
}

scalar govactiontype

"""
Boolean expression to compare columns of type "govactiontype". All fields are combined with logical 'AND'.
"""
input govactiontype_comparison_exp {
  _eq: govactiontype
  _gt: govactiontype
  _gte: govactiontype
  _in: [govactiontype!]
  _is_null: Boolean
  _lt: govactiontype
  _lte: govactiontype
  _neq: govactiontype
  _nin: [govactiontype!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "Asset"
  """
  delete_Asset_by_pk(assetId: bytea!): Asset

  """
  delete data from the table: "Datum"
  """
  delete_Datum(
    """filter the rows which have to be deleted"""
    where: Datum_bool_exp!
  ): Datum_mutation_response

  """
  delete data from the table: "Redeemer"
  """
  delete_Redeemer(
    """filter the rows which have to be deleted"""
    where: Redeemer_bool_exp!
  ): Redeemer_mutation_response

  """
  delete data from the table: "RedeemerDatum"
  """
  delete_RedeemerDatum(
    """filter the rows which have to be deleted"""
    where: RedeemerDatum_bool_exp!
  ): RedeemerDatum_mutation_response

  """
  delete data from the table: "Script"
  """
  delete_Script(
    """filter the rows which have to be deleted"""
    where: Script_bool_exp!
  ): Script_mutation_response

  """
  delete data from the table: "SlotLeader"
  """
  delete_SlotLeader(
    """filter the rows which have to be deleted"""
    where: SlotLeader_bool_exp!
  ): SlotLeader_mutation_response

  """
  delete data from the table: "StakePoolRetirement"
  """
  delete_StakePoolRetirement(
    """filter the rows which have to be deleted"""
    where: StakePoolRetirement_bool_exp!
  ): StakePoolRetirement_mutation_response

  """
  delete data from the table: "ada_pots"
  """
  delete_ada_pots(
    """filter the rows which have to be deleted"""
    where: ada_pots_bool_exp!
  ): ada_pots_mutation_response

  """
  delete single row from the table: "ada_pots"
  """
  delete_ada_pots_by_pk(id: bigint!): ada_pots

  """
  delete data from the table: "Asset"
  """
  delete_assets(
    """filter the rows which have to be deleted"""
    where: Asset_bool_exp!
  ): Asset_mutation_response

  """
  delete data from the table: "committee"
  """
  delete_committee(
    """filter the rows which have to be deleted"""
    where: committee_bool_exp!
  ): committee_mutation_response

  """
  delete single row from the table: "committee"
  """
  delete_committee_by_pk(id: bigint!): committee

  """
  delete data from the table: "committee_de_registration"
  """
  delete_committee_de_registration(
    """filter the rows which have to be deleted"""
    where: committee_de_registration_bool_exp!
  ): committee_de_registration_mutation_response

  """
  delete single row from the table: "committee_de_registration"
  """
  delete_committee_de_registration_by_pk(id: bigint!): committee_de_registration

  """
  delete data from the table: "committee_hash"
  """
  delete_committee_hash(
    """filter the rows which have to be deleted"""
    where: committee_hash_bool_exp!
  ): committee_hash_mutation_response

  """
  delete single row from the table: "committee_hash"
  """
  delete_committee_hash_by_pk(id: bigint!): committee_hash

  """
  delete data from the table: "committee_member"
  """
  delete_committee_member(
    """filter the rows which have to be deleted"""
    where: committee_member_bool_exp!
  ): committee_member_mutation_response

  """
  delete single row from the table: "committee_member"
  """
  delete_committee_member_by_pk(id: bigint!): committee_member

  """
  delete data from the table: "committee_registration"
  """
  delete_committee_registration(
    """filter the rows which have to be deleted"""
    where: committee_registration_bool_exp!
  ): committee_registration_mutation_response

  """
  delete single row from the table: "committee_registration"
  """
  delete_committee_registration_by_pk(id: bigint!): committee_registration

  """
  delete data from the table: "drep_distr"
  """
  delete_drep_distr(
    """filter the rows which have to be deleted"""
    where: drep_distr_bool_exp!
  ): drep_distr_mutation_response

  """
  delete single row from the table: "drep_distr"
  """
  delete_drep_distr_by_pk(id: bigint!): drep_distr

  """
  delete data from the table: "drep_hash"
  """
  delete_drep_hash(
    """filter the rows which have to be deleted"""
    where: drep_hash_bool_exp!
  ): drep_hash_mutation_response

  """
  delete single row from the table: "drep_hash"
  """
  delete_drep_hash_by_pk(id: bigint!): drep_hash

  """
  delete data from the table: "epoch_param"
  """
  delete_epoch_param(
    """filter the rows which have to be deleted"""
    where: epoch_param_bool_exp!
  ): epoch_param_mutation_response

  """
  delete single row from the table: "epoch_param"
  """
  delete_epoch_param_by_pk(id: bigint!): epoch_param

  """
  delete data from the table: "gov_action_proposal"
  """
  delete_gov_action_proposal(
    """filter the rows which have to be deleted"""
    where: gov_action_proposal_bool_exp!
  ): gov_action_proposal_mutation_response

  """
  delete single row from the table: "gov_action_proposal"
  """
  delete_gov_action_proposal_by_pk(id: bigint!): gov_action_proposal

  """
  delete data from the table: "off_chain_vote_author"
  """
  delete_off_chain_vote_author(
    """filter the rows which have to be deleted"""
    where: off_chain_vote_author_bool_exp!
  ): off_chain_vote_author_mutation_response

  """
  delete single row from the table: "off_chain_vote_author"
  """
  delete_off_chain_vote_author_by_pk(id: bigint!): off_chain_vote_author

  """
  delete data from the table: "off_chain_vote_data"
  """
  delete_off_chain_vote_data(
    """filter the rows which have to be deleted"""
    where: off_chain_vote_data_bool_exp!
  ): off_chain_vote_data_mutation_response

  """
  delete single row from the table: "off_chain_vote_data"
  """
  delete_off_chain_vote_data_by_pk(id: bigint!): off_chain_vote_data

  """
  delete data from the table: "off_chain_vote_drep_data"
  """
  delete_off_chain_vote_drep_data(
    """filter the rows which have to be deleted"""
    where: off_chain_vote_drep_data_bool_exp!
  ): off_chain_vote_drep_data_mutation_response

  """
  delete single row from the table: "off_chain_vote_drep_data"
  """
  delete_off_chain_vote_drep_data_by_pk(id: bigint!): off_chain_vote_drep_data

  """
  delete data from the table: "off_chain_vote_gov_action_data"
  """
  delete_off_chain_vote_gov_action_data(
    """filter the rows which have to be deleted"""
    where: off_chain_vote_gov_action_data_bool_exp!
  ): off_chain_vote_gov_action_data_mutation_response

  """
  delete single row from the table: "off_chain_vote_gov_action_data"
  """
  delete_off_chain_vote_gov_action_data_by_pk(id: bigint!): off_chain_vote_gov_action_data

  """
  delete data from the table: "off_chain_vote_reference"
  """
  delete_off_chain_vote_reference(
    """filter the rows which have to be deleted"""
    where: off_chain_vote_reference_bool_exp!
  ): off_chain_vote_reference_mutation_response

  """
  delete single row from the table: "off_chain_vote_reference"
  """
  delete_off_chain_vote_reference_by_pk(id: bigint!): off_chain_vote_reference

  """
  delete data from the table: "pool_hash"
  """
  delete_pool_hash(
    """filter the rows which have to be deleted"""
    where: pool_hash_bool_exp!
  ): pool_hash_mutation_response

  """
  delete single row from the table: "pool_hash"
  """
  delete_pool_hash_by_pk(id: bigint!): pool_hash

  """
  delete data from the table: "pool_relay"
  """
  delete_pool_relay(
    """filter the rows which have to be deleted"""
    where: pool_relay_bool_exp!
  ): pool_relay_mutation_response

  """
  delete single row from the table: "pool_relay"
  """
  delete_pool_relay_by_pk(id: bigint!): pool_relay

  """
  delete data from the table: "pool_stat"
  """
  delete_pool_stat(
    """filter the rows which have to be deleted"""
    where: pool_stat_bool_exp!
  ): pool_stat_mutation_response

  """
  delete single row from the table: "pool_stat"
  """
  delete_pool_stat_by_pk(id: bigint!): pool_stat

  """
  delete data from the table: "reserve"
  """
  delete_reserve(
    """filter the rows which have to be deleted"""
    where: reserve_bool_exp!
  ): reserve_mutation_response

  """
  delete single row from the table: "reserve"
  """
  delete_reserve_by_pk(id: bigint!): reserve

  """
  delete data from the table: "stake_address"
  """
  delete_stake_address(
    """filter the rows which have to be deleted"""
    where: stake_address_bool_exp!
  ): stake_address_mutation_response

  """
  delete single row from the table: "stake_address"
  """
  delete_stake_address_by_pk(id: bigint!): stake_address

  """
  delete data from the table: "treasury_withdrawal"
  """
  delete_treasury_withdrawal(
    """filter the rows which have to be deleted"""
    where: treasury_withdrawal_bool_exp!
  ): treasury_withdrawal_mutation_response

  """
  delete single row from the table: "treasury_withdrawal"
  """
  delete_treasury_withdrawal_by_pk(id: bigint!): treasury_withdrawal

  """
  delete data from the table: "tx"
  """
  delete_tx(
    """filter the rows which have to be deleted"""
    where: tx_bool_exp!
  ): tx_mutation_response

  """
  delete single row from the table: "tx"
  """
  delete_tx_by_pk(id: bigint!): tx

  """
  delete data from the table: "tx_metadata"
  """
  delete_tx_metadata(
    """filter the rows which have to be deleted"""
    where: tx_metadata_bool_exp!
  ): tx_metadata_mutation_response

  """
  delete single row from the table: "tx_metadata"
  """
  delete_tx_metadata_by_pk(id: bigint!): tx_metadata

  """
  delete data from the table: "voting_anchor"
  """
  delete_voting_anchor(
    """filter the rows which have to be deleted"""
    where: voting_anchor_bool_exp!
  ): voting_anchor_mutation_response

  """
  delete single row from the table: "voting_anchor"
  """
  delete_voting_anchor_by_pk(id: bigint!): voting_anchor

  """
  delete data from the table: "voting_procedure"
  """
  delete_voting_procedure(
    """filter the rows which have to be deleted"""
    where: voting_procedure_bool_exp!
  ): voting_procedure_mutation_response

  """
  delete single row from the table: "voting_procedure"
  """
  delete_voting_procedure_by_pk(id: bigint!): voting_procedure

  """
  insert a single row into the table: "Asset"
  """
  insert_Asset_one(
    """the row to be inserted"""
    object: Asset_insert_input!

    """upsert condition"""
    on_conflict: Asset_on_conflict
  ): Asset

  """
  insert data into the table: "Datum"
  """
  insert_Datum(
    """the rows to be inserted"""
    objects: [Datum_insert_input!]!
  ): Datum_mutation_response

  """
  insert a single row into the table: "Datum"
  """
  insert_Datum_one(
    """the row to be inserted"""
    object: Datum_insert_input!
  ): Datum

  """
  insert data into the table: "Redeemer"
  """
  insert_Redeemer(
    """the rows to be inserted"""
    objects: [Redeemer_insert_input!]!
  ): Redeemer_mutation_response

  """
  insert data into the table: "RedeemerDatum"
  """
  insert_RedeemerDatum(
    """the rows to be inserted"""
    objects: [RedeemerDatum_insert_input!]!
  ): RedeemerDatum_mutation_response

  """
  insert a single row into the table: "RedeemerDatum"
  """
  insert_RedeemerDatum_one(
    """the row to be inserted"""
    object: RedeemerDatum_insert_input!
  ): RedeemerDatum

  """
  insert a single row into the table: "Redeemer"
  """
  insert_Redeemer_one(
    """the row to be inserted"""
    object: Redeemer_insert_input!
  ): Redeemer

  """
  insert data into the table: "Script"
  """
  insert_Script(
    """the rows to be inserted"""
    objects: [Script_insert_input!]!
  ): Script_mutation_response

  """
  insert a single row into the table: "Script"
  """
  insert_Script_one(
    """the row to be inserted"""
    object: Script_insert_input!
  ): Script

  """
  insert data into the table: "SlotLeader"
  """
  insert_SlotLeader(
    """the rows to be inserted"""
    objects: [SlotLeader_insert_input!]!
  ): SlotLeader_mutation_response

  """
  insert a single row into the table: "SlotLeader"
  """
  insert_SlotLeader_one(
    """the row to be inserted"""
    object: SlotLeader_insert_input!
  ): SlotLeader

  """
  insert data into the table: "StakePoolRetirement"
  """
  insert_StakePoolRetirement(
    """the rows to be inserted"""
    objects: [StakePoolRetirement_insert_input!]!
  ): StakePoolRetirement_mutation_response

  """
  insert a single row into the table: "StakePoolRetirement"
  """
  insert_StakePoolRetirement_one(
    """the row to be inserted"""
    object: StakePoolRetirement_insert_input!
  ): StakePoolRetirement

  """
  insert data into the table: "ada_pots"
  """
  insert_ada_pots(
    """the rows to be inserted"""
    objects: [ada_pots_insert_input!]!

    """upsert condition"""
    on_conflict: ada_pots_on_conflict
  ): ada_pots_mutation_response

  """
  insert a single row into the table: "ada_pots"
  """
  insert_ada_pots_one(
    """the row to be inserted"""
    object: ada_pots_insert_input!

    """upsert condition"""
    on_conflict: ada_pots_on_conflict
  ): ada_pots

  """
  insert data into the table: "Asset"
  """
  insert_assets(
    """the rows to be inserted"""
    objects: [Asset_insert_input!]!

    """upsert condition"""
    on_conflict: Asset_on_conflict
  ): Asset_mutation_response

  """
  insert data into the table: "committee"
  """
  insert_committee(
    """the rows to be inserted"""
    objects: [committee_insert_input!]!

    """upsert condition"""
    on_conflict: committee_on_conflict
  ): committee_mutation_response

  """
  insert data into the table: "committee_de_registration"
  """
  insert_committee_de_registration(
    """the rows to be inserted"""
    objects: [committee_de_registration_insert_input!]!

    """upsert condition"""
    on_conflict: committee_de_registration_on_conflict
  ): committee_de_registration_mutation_response

  """
  insert a single row into the table: "committee_de_registration"
  """
  insert_committee_de_registration_one(
    """the row to be inserted"""
    object: committee_de_registration_insert_input!

    """upsert condition"""
    on_conflict: committee_de_registration_on_conflict
  ): committee_de_registration

  """
  insert data into the table: "committee_hash"
  """
  insert_committee_hash(
    """the rows to be inserted"""
    objects: [committee_hash_insert_input!]!

    """upsert condition"""
    on_conflict: committee_hash_on_conflict
  ): committee_hash_mutation_response

  """
  insert a single row into the table: "committee_hash"
  """
  insert_committee_hash_one(
    """the row to be inserted"""
    object: committee_hash_insert_input!

    """upsert condition"""
    on_conflict: committee_hash_on_conflict
  ): committee_hash

  """
  insert data into the table: "committee_member"
  """
  insert_committee_member(
    """the rows to be inserted"""
    objects: [committee_member_insert_input!]!

    """upsert condition"""
    on_conflict: committee_member_on_conflict
  ): committee_member_mutation_response

  """
  insert a single row into the table: "committee_member"
  """
  insert_committee_member_one(
    """the row to be inserted"""
    object: committee_member_insert_input!

    """upsert condition"""
    on_conflict: committee_member_on_conflict
  ): committee_member

  """
  insert a single row into the table: "committee"
  """
  insert_committee_one(
    """the row to be inserted"""
    object: committee_insert_input!

    """upsert condition"""
    on_conflict: committee_on_conflict
  ): committee

  """
  insert data into the table: "committee_registration"
  """
  insert_committee_registration(
    """the rows to be inserted"""
    objects: [committee_registration_insert_input!]!

    """upsert condition"""
    on_conflict: committee_registration_on_conflict
  ): committee_registration_mutation_response

  """
  insert a single row into the table: "committee_registration"
  """
  insert_committee_registration_one(
    """the row to be inserted"""
    object: committee_registration_insert_input!

    """upsert condition"""
    on_conflict: committee_registration_on_conflict
  ): committee_registration

  """
  insert data into the table: "drep_distr"
  """
  insert_drep_distr(
    """the rows to be inserted"""
    objects: [drep_distr_insert_input!]!

    """upsert condition"""
    on_conflict: drep_distr_on_conflict
  ): drep_distr_mutation_response

  """
  insert a single row into the table: "drep_distr"
  """
  insert_drep_distr_one(
    """the row to be inserted"""
    object: drep_distr_insert_input!

    """upsert condition"""
    on_conflict: drep_distr_on_conflict
  ): drep_distr

  """
  insert data into the table: "drep_hash"
  """
  insert_drep_hash(
    """the rows to be inserted"""
    objects: [drep_hash_insert_input!]!

    """upsert condition"""
    on_conflict: drep_hash_on_conflict
  ): drep_hash_mutation_response

  """
  insert a single row into the table: "drep_hash"
  """
  insert_drep_hash_one(
    """the row to be inserted"""
    object: drep_hash_insert_input!

    """upsert condition"""
    on_conflict: drep_hash_on_conflict
  ): drep_hash

  """
  insert data into the table: "epoch_param"
  """
  insert_epoch_param(
    """the rows to be inserted"""
    objects: [epoch_param_insert_input!]!

    """upsert condition"""
    on_conflict: epoch_param_on_conflict
  ): epoch_param_mutation_response

  """
  insert a single row into the table: "epoch_param"
  """
  insert_epoch_param_one(
    """the row to be inserted"""
    object: epoch_param_insert_input!

    """upsert condition"""
    on_conflict: epoch_param_on_conflict
  ): epoch_param

  """
  insert data into the table: "gov_action_proposal"
  """
  insert_gov_action_proposal(
    """the rows to be inserted"""
    objects: [gov_action_proposal_insert_input!]!

    """upsert condition"""
    on_conflict: gov_action_proposal_on_conflict
  ): gov_action_proposal_mutation_response

  """
  insert a single row into the table: "gov_action_proposal"
  """
  insert_gov_action_proposal_one(
    """the row to be inserted"""
    object: gov_action_proposal_insert_input!

    """upsert condition"""
    on_conflict: gov_action_proposal_on_conflict
  ): gov_action_proposal

  """
  insert data into the table: "off_chain_vote_author"
  """
  insert_off_chain_vote_author(
    """the rows to be inserted"""
    objects: [off_chain_vote_author_insert_input!]!

    """upsert condition"""
    on_conflict: off_chain_vote_author_on_conflict
  ): off_chain_vote_author_mutation_response

  """
  insert a single row into the table: "off_chain_vote_author"
  """
  insert_off_chain_vote_author_one(
    """the row to be inserted"""
    object: off_chain_vote_author_insert_input!

    """upsert condition"""
    on_conflict: off_chain_vote_author_on_conflict
  ): off_chain_vote_author

  """
  insert data into the table: "off_chain_vote_data"
  """
  insert_off_chain_vote_data(
    """the rows to be inserted"""
    objects: [off_chain_vote_data_insert_input!]!

    """upsert condition"""
    on_conflict: off_chain_vote_data_on_conflict
  ): off_chain_vote_data_mutation_response

  """
  insert a single row into the table: "off_chain_vote_data"
  """
  insert_off_chain_vote_data_one(
    """the row to be inserted"""
    object: off_chain_vote_data_insert_input!

    """upsert condition"""
    on_conflict: off_chain_vote_data_on_conflict
  ): off_chain_vote_data

  """
  insert data into the table: "off_chain_vote_drep_data"
  """
  insert_off_chain_vote_drep_data(
    """the rows to be inserted"""
    objects: [off_chain_vote_drep_data_insert_input!]!

    """upsert condition"""
    on_conflict: off_chain_vote_drep_data_on_conflict
  ): off_chain_vote_drep_data_mutation_response

  """
  insert a single row into the table: "off_chain_vote_drep_data"
  """
  insert_off_chain_vote_drep_data_one(
    """the row to be inserted"""
    object: off_chain_vote_drep_data_insert_input!

    """upsert condition"""
    on_conflict: off_chain_vote_drep_data_on_conflict
  ): off_chain_vote_drep_data

  """
  insert data into the table: "off_chain_vote_gov_action_data"
  """
  insert_off_chain_vote_gov_action_data(
    """the rows to be inserted"""
    objects: [off_chain_vote_gov_action_data_insert_input!]!

    """upsert condition"""
    on_conflict: off_chain_vote_gov_action_data_on_conflict
  ): off_chain_vote_gov_action_data_mutation_response

  """
  insert a single row into the table: "off_chain_vote_gov_action_data"
  """
  insert_off_chain_vote_gov_action_data_one(
    """the row to be inserted"""
    object: off_chain_vote_gov_action_data_insert_input!

    """upsert condition"""
    on_conflict: off_chain_vote_gov_action_data_on_conflict
  ): off_chain_vote_gov_action_data

  """
  insert data into the table: "off_chain_vote_reference"
  """
  insert_off_chain_vote_reference(
    """the rows to be inserted"""
    objects: [off_chain_vote_reference_insert_input!]!

    """upsert condition"""
    on_conflict: off_chain_vote_reference_on_conflict
  ): off_chain_vote_reference_mutation_response

  """
  insert a single row into the table: "off_chain_vote_reference"
  """
  insert_off_chain_vote_reference_one(
    """the row to be inserted"""
    object: off_chain_vote_reference_insert_input!

    """upsert condition"""
    on_conflict: off_chain_vote_reference_on_conflict
  ): off_chain_vote_reference

  """
  insert data into the table: "pool_hash"
  """
  insert_pool_hash(
    """the rows to be inserted"""
    objects: [pool_hash_insert_input!]!

    """upsert condition"""
    on_conflict: pool_hash_on_conflict
  ): pool_hash_mutation_response

  """
  insert a single row into the table: "pool_hash"
  """
  insert_pool_hash_one(
    """the row to be inserted"""
    object: pool_hash_insert_input!

    """upsert condition"""
    on_conflict: pool_hash_on_conflict
  ): pool_hash

  """
  insert data into the table: "pool_relay"
  """
  insert_pool_relay(
    """the rows to be inserted"""
    objects: [pool_relay_insert_input!]!

    """upsert condition"""
    on_conflict: pool_relay_on_conflict
  ): pool_relay_mutation_response

  """
  insert a single row into the table: "pool_relay"
  """
  insert_pool_relay_one(
    """the row to be inserted"""
    object: pool_relay_insert_input!

    """upsert condition"""
    on_conflict: pool_relay_on_conflict
  ): pool_relay

  """
  insert data into the table: "pool_stat"
  """
  insert_pool_stat(
    """the rows to be inserted"""
    objects: [pool_stat_insert_input!]!

    """upsert condition"""
    on_conflict: pool_stat_on_conflict
  ): pool_stat_mutation_response

  """
  insert a single row into the table: "pool_stat"
  """
  insert_pool_stat_one(
    """the row to be inserted"""
    object: pool_stat_insert_input!

    """upsert condition"""
    on_conflict: pool_stat_on_conflict
  ): pool_stat

  """
  insert data into the table: "reserve"
  """
  insert_reserve(
    """the rows to be inserted"""
    objects: [reserve_insert_input!]!

    """upsert condition"""
    on_conflict: reserve_on_conflict
  ): reserve_mutation_response

  """
  insert a single row into the table: "reserve"
  """
  insert_reserve_one(
    """the row to be inserted"""
    object: reserve_insert_input!

    """upsert condition"""
    on_conflict: reserve_on_conflict
  ): reserve

  """
  insert data into the table: "stake_address"
  """
  insert_stake_address(
    """the rows to be inserted"""
    objects: [stake_address_insert_input!]!

    """upsert condition"""
    on_conflict: stake_address_on_conflict
  ): stake_address_mutation_response

  """
  insert a single row into the table: "stake_address"
  """
  insert_stake_address_one(
    """the row to be inserted"""
    object: stake_address_insert_input!

    """upsert condition"""
    on_conflict: stake_address_on_conflict
  ): stake_address

  """
  insert data into the table: "treasury_withdrawal"
  """
  insert_treasury_withdrawal(
    """the rows to be inserted"""
    objects: [treasury_withdrawal_insert_input!]!

    """upsert condition"""
    on_conflict: treasury_withdrawal_on_conflict
  ): treasury_withdrawal_mutation_response

  """
  insert a single row into the table: "treasury_withdrawal"
  """
  insert_treasury_withdrawal_one(
    """the row to be inserted"""
    object: treasury_withdrawal_insert_input!

    """upsert condition"""
    on_conflict: treasury_withdrawal_on_conflict
  ): treasury_withdrawal

  """
  insert data into the table: "tx"
  """
  insert_tx(
    """the rows to be inserted"""
    objects: [tx_insert_input!]!

    """upsert condition"""
    on_conflict: tx_on_conflict
  ): tx_mutation_response

  """
  insert data into the table: "tx_metadata"
  """
  insert_tx_metadata(
    """the rows to be inserted"""
    objects: [tx_metadata_insert_input!]!

    """upsert condition"""
    on_conflict: tx_metadata_on_conflict
  ): tx_metadata_mutation_response

  """
  insert a single row into the table: "tx_metadata"
  """
  insert_tx_metadata_one(
    """the row to be inserted"""
    object: tx_metadata_insert_input!

    """upsert condition"""
    on_conflict: tx_metadata_on_conflict
  ): tx_metadata

  """
  insert a single row into the table: "tx"
  """
  insert_tx_one(
    """the row to be inserted"""
    object: tx_insert_input!

    """upsert condition"""
    on_conflict: tx_on_conflict
  ): tx

  """
  insert data into the table: "voting_anchor"
  """
  insert_voting_anchor(
    """the rows to be inserted"""
    objects: [voting_anchor_insert_input!]!

    """upsert condition"""
    on_conflict: voting_anchor_on_conflict
  ): voting_anchor_mutation_response

  """
  insert a single row into the table: "voting_anchor"
  """
  insert_voting_anchor_one(
    """the row to be inserted"""
    object: voting_anchor_insert_input!

    """upsert condition"""
    on_conflict: voting_anchor_on_conflict
  ): voting_anchor

  """
  insert data into the table: "voting_procedure"
  """
  insert_voting_procedure(
    """the rows to be inserted"""
    objects: [voting_procedure_insert_input!]!

    """upsert condition"""
    on_conflict: voting_procedure_on_conflict
  ): voting_procedure_mutation_response

  """
  insert a single row into the table: "voting_procedure"
  """
  insert_voting_procedure_one(
    """the row to be inserted"""
    object: voting_procedure_insert_input!

    """upsert condition"""
    on_conflict: voting_procedure_on_conflict
  ): voting_procedure

  """
  update single row of the table: "Asset"
  """
  update_Asset_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Asset_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Asset_set_input
    pk_columns: Asset_pk_columns_input!
  ): Asset

  """
  update multiples rows of table: "Asset"
  """
  update_Asset_many(
    """updates to execute, in order"""
    updates: [Asset_updates!]!
  ): [Asset_mutation_response]

  """
  update data of the table: "Datum"
  """
  update_Datum(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Datum_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Datum_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Datum_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Datum_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Datum_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Datum_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Datum_set_input

    """filter the rows which have to be updated"""
    where: Datum_bool_exp!
  ): Datum_mutation_response

  """
  update multiples rows of table: "Datum"
  """
  update_Datum_many(
    """updates to execute, in order"""
    updates: [Datum_updates!]!
  ): [Datum_mutation_response]

  """
  update data of the table: "Redeemer"
  """
  update_Redeemer(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Redeemer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Redeemer_set_input

    """filter the rows which have to be updated"""
    where: Redeemer_bool_exp!
  ): Redeemer_mutation_response

  """
  update data of the table: "RedeemerDatum"
  """
  update_RedeemerDatum(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: RedeemerDatum_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: RedeemerDatum_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: RedeemerDatum_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: RedeemerDatum_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: RedeemerDatum_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: RedeemerDatum_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: RedeemerDatum_set_input

    """filter the rows which have to be updated"""
    where: RedeemerDatum_bool_exp!
  ): RedeemerDatum_mutation_response

  """
  update multiples rows of table: "RedeemerDatum"
  """
  update_RedeemerDatum_many(
    """updates to execute, in order"""
    updates: [RedeemerDatum_updates!]!
  ): [RedeemerDatum_mutation_response]

  """
  update multiples rows of table: "Redeemer"
  """
  update_Redeemer_many(
    """updates to execute, in order"""
    updates: [Redeemer_updates!]!
  ): [Redeemer_mutation_response]

  """
  update data of the table: "Script"
  """
  update_Script(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Script_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Script_set_input

    """filter the rows which have to be updated"""
    where: Script_bool_exp!
  ): Script_mutation_response

  """
  update multiples rows of table: "Script"
  """
  update_Script_many(
    """updates to execute, in order"""
    updates: [Script_updates!]!
  ): [Script_mutation_response]

  """
  update data of the table: "SlotLeader"
  """
  update_SlotLeader(
    """increments the numeric columns with given value of the filtered values"""
    _inc: SlotLeader_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: SlotLeader_set_input

    """filter the rows which have to be updated"""
    where: SlotLeader_bool_exp!
  ): SlotLeader_mutation_response

  """
  update multiples rows of table: "SlotLeader"
  """
  update_SlotLeader_many(
    """updates to execute, in order"""
    updates: [SlotLeader_updates!]!
  ): [SlotLeader_mutation_response]

  """
  update data of the table: "StakePoolRetirement"
  """
  update_StakePoolRetirement(
    """increments the numeric columns with given value of the filtered values"""
    _inc: StakePoolRetirement_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: StakePoolRetirement_set_input

    """filter the rows which have to be updated"""
    where: StakePoolRetirement_bool_exp!
  ): StakePoolRetirement_mutation_response

  """
  update multiples rows of table: "StakePoolRetirement"
  """
  update_StakePoolRetirement_many(
    """updates to execute, in order"""
    updates: [StakePoolRetirement_updates!]!
  ): [StakePoolRetirement_mutation_response]

  """
  update data of the table: "ada_pots"
  """
  update_ada_pots(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ada_pots_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ada_pots_set_input

    """filter the rows which have to be updated"""
    where: ada_pots_bool_exp!
  ): ada_pots_mutation_response

  """
  update single row of the table: "ada_pots"
  """
  update_ada_pots_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ada_pots_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ada_pots_set_input
    pk_columns: ada_pots_pk_columns_input!
  ): ada_pots

  """
  update multiples rows of table: "ada_pots"
  """
  update_ada_pots_many(
    """updates to execute, in order"""
    updates: [ada_pots_updates!]!
  ): [ada_pots_mutation_response]

  """
  update data of the table: "Asset"
  """
  update_assets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Asset_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Asset_set_input

    """filter the rows which have to be updated"""
    where: Asset_bool_exp!
  ): Asset_mutation_response

  """
  update data of the table: "committee"
  """
  update_committee(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_set_input

    """filter the rows which have to be updated"""
    where: committee_bool_exp!
  ): committee_mutation_response

  """
  update single row of the table: "committee"
  """
  update_committee_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_set_input
    pk_columns: committee_pk_columns_input!
  ): committee

  """
  update data of the table: "committee_de_registration"
  """
  update_committee_de_registration(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_de_registration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_de_registration_set_input

    """filter the rows which have to be updated"""
    where: committee_de_registration_bool_exp!
  ): committee_de_registration_mutation_response

  """
  update single row of the table: "committee_de_registration"
  """
  update_committee_de_registration_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_de_registration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_de_registration_set_input
    pk_columns: committee_de_registration_pk_columns_input!
  ): committee_de_registration

  """
  update multiples rows of table: "committee_de_registration"
  """
  update_committee_de_registration_many(
    """updates to execute, in order"""
    updates: [committee_de_registration_updates!]!
  ): [committee_de_registration_mutation_response]

  """
  update data of the table: "committee_hash"
  """
  update_committee_hash(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_hash_set_input

    """filter the rows which have to be updated"""
    where: committee_hash_bool_exp!
  ): committee_hash_mutation_response

  """
  update single row of the table: "committee_hash"
  """
  update_committee_hash_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_hash_set_input
    pk_columns: committee_hash_pk_columns_input!
  ): committee_hash

  """
  update multiples rows of table: "committee_hash"
  """
  update_committee_hash_many(
    """updates to execute, in order"""
    updates: [committee_hash_updates!]!
  ): [committee_hash_mutation_response]

  """
  update multiples rows of table: "committee"
  """
  update_committee_many(
    """updates to execute, in order"""
    updates: [committee_updates!]!
  ): [committee_mutation_response]

  """
  update data of the table: "committee_member"
  """
  update_committee_member(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_member_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_member_set_input

    """filter the rows which have to be updated"""
    where: committee_member_bool_exp!
  ): committee_member_mutation_response

  """
  update single row of the table: "committee_member"
  """
  update_committee_member_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_member_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_member_set_input
    pk_columns: committee_member_pk_columns_input!
  ): committee_member

  """
  update multiples rows of table: "committee_member"
  """
  update_committee_member_many(
    """updates to execute, in order"""
    updates: [committee_member_updates!]!
  ): [committee_member_mutation_response]

  """
  update data of the table: "committee_registration"
  """
  update_committee_registration(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_registration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_registration_set_input

    """filter the rows which have to be updated"""
    where: committee_registration_bool_exp!
  ): committee_registration_mutation_response

  """
  update single row of the table: "committee_registration"
  """
  update_committee_registration_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: committee_registration_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: committee_registration_set_input
    pk_columns: committee_registration_pk_columns_input!
  ): committee_registration

  """
  update multiples rows of table: "committee_registration"
  """
  update_committee_registration_many(
    """updates to execute, in order"""
    updates: [committee_registration_updates!]!
  ): [committee_registration_mutation_response]

  """
  update data of the table: "drep_distr"
  """
  update_drep_distr(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drep_distr_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drep_distr_set_input

    """filter the rows which have to be updated"""
    where: drep_distr_bool_exp!
  ): drep_distr_mutation_response

  """
  update single row of the table: "drep_distr"
  """
  update_drep_distr_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drep_distr_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drep_distr_set_input
    pk_columns: drep_distr_pk_columns_input!
  ): drep_distr

  """
  update multiples rows of table: "drep_distr"
  """
  update_drep_distr_many(
    """updates to execute, in order"""
    updates: [drep_distr_updates!]!
  ): [drep_distr_mutation_response]

  """
  update data of the table: "drep_hash"
  """
  update_drep_hash(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drep_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drep_hash_set_input

    """filter the rows which have to be updated"""
    where: drep_hash_bool_exp!
  ): drep_hash_mutation_response

  """
  update single row of the table: "drep_hash"
  """
  update_drep_hash_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: drep_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: drep_hash_set_input
    pk_columns: drep_hash_pk_columns_input!
  ): drep_hash

  """
  update multiples rows of table: "drep_hash"
  """
  update_drep_hash_many(
    """updates to execute, in order"""
    updates: [drep_hash_updates!]!
  ): [drep_hash_mutation_response]

  """
  update data of the table: "epoch_param"
  """
  update_epoch_param(
    """increments the numeric columns with given value of the filtered values"""
    _inc: epoch_param_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_param_set_input

    """filter the rows which have to be updated"""
    where: epoch_param_bool_exp!
  ): epoch_param_mutation_response

  """
  update single row of the table: "epoch_param"
  """
  update_epoch_param_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: epoch_param_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: epoch_param_set_input
    pk_columns: epoch_param_pk_columns_input!
  ): epoch_param

  """
  update multiples rows of table: "epoch_param"
  """
  update_epoch_param_many(
    """updates to execute, in order"""
    updates: [epoch_param_updates!]!
  ): [epoch_param_mutation_response]

  """
  update data of the table: "gov_action_proposal"
  """
  update_gov_action_proposal(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: gov_action_proposal_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: gov_action_proposal_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: gov_action_proposal_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: gov_action_proposal_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: gov_action_proposal_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: gov_action_proposal_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: gov_action_proposal_set_input

    """filter the rows which have to be updated"""
    where: gov_action_proposal_bool_exp!
  ): gov_action_proposal_mutation_response

  """
  update single row of the table: "gov_action_proposal"
  """
  update_gov_action_proposal_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: gov_action_proposal_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: gov_action_proposal_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: gov_action_proposal_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: gov_action_proposal_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: gov_action_proposal_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: gov_action_proposal_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: gov_action_proposal_set_input
    pk_columns: gov_action_proposal_pk_columns_input!
  ): gov_action_proposal

  """
  update multiples rows of table: "gov_action_proposal"
  """
  update_gov_action_proposal_many(
    """updates to execute, in order"""
    updates: [gov_action_proposal_updates!]!
  ): [gov_action_proposal_mutation_response]

  """
  update data of the table: "off_chain_vote_author"
  """
  update_off_chain_vote_author(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_author_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_author_set_input

    """filter the rows which have to be updated"""
    where: off_chain_vote_author_bool_exp!
  ): off_chain_vote_author_mutation_response

  """
  update single row of the table: "off_chain_vote_author"
  """
  update_off_chain_vote_author_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_author_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_author_set_input
    pk_columns: off_chain_vote_author_pk_columns_input!
  ): off_chain_vote_author

  """
  update multiples rows of table: "off_chain_vote_author"
  """
  update_off_chain_vote_author_many(
    """updates to execute, in order"""
    updates: [off_chain_vote_author_updates!]!
  ): [off_chain_vote_author_mutation_response]

  """
  update data of the table: "off_chain_vote_data"
  """
  update_off_chain_vote_data(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: off_chain_vote_data_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: off_chain_vote_data_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: off_chain_vote_data_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: off_chain_vote_data_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_data_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: off_chain_vote_data_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_data_set_input

    """filter the rows which have to be updated"""
    where: off_chain_vote_data_bool_exp!
  ): off_chain_vote_data_mutation_response

  """
  update single row of the table: "off_chain_vote_data"
  """
  update_off_chain_vote_data_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: off_chain_vote_data_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: off_chain_vote_data_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: off_chain_vote_data_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: off_chain_vote_data_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_data_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: off_chain_vote_data_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_data_set_input
    pk_columns: off_chain_vote_data_pk_columns_input!
  ): off_chain_vote_data

  """
  update multiples rows of table: "off_chain_vote_data"
  """
  update_off_chain_vote_data_many(
    """updates to execute, in order"""
    updates: [off_chain_vote_data_updates!]!
  ): [off_chain_vote_data_mutation_response]

  """
  update data of the table: "off_chain_vote_drep_data"
  """
  update_off_chain_vote_drep_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_drep_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_drep_data_set_input

    """filter the rows which have to be updated"""
    where: off_chain_vote_drep_data_bool_exp!
  ): off_chain_vote_drep_data_mutation_response

  """
  update single row of the table: "off_chain_vote_drep_data"
  """
  update_off_chain_vote_drep_data_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_drep_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_drep_data_set_input
    pk_columns: off_chain_vote_drep_data_pk_columns_input!
  ): off_chain_vote_drep_data

  """
  update multiples rows of table: "off_chain_vote_drep_data"
  """
  update_off_chain_vote_drep_data_many(
    """updates to execute, in order"""
    updates: [off_chain_vote_drep_data_updates!]!
  ): [off_chain_vote_drep_data_mutation_response]

  """
  update data of the table: "off_chain_vote_gov_action_data"
  """
  update_off_chain_vote_gov_action_data(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_gov_action_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_gov_action_data_set_input

    """filter the rows which have to be updated"""
    where: off_chain_vote_gov_action_data_bool_exp!
  ): off_chain_vote_gov_action_data_mutation_response

  """
  update single row of the table: "off_chain_vote_gov_action_data"
  """
  update_off_chain_vote_gov_action_data_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_gov_action_data_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_gov_action_data_set_input
    pk_columns: off_chain_vote_gov_action_data_pk_columns_input!
  ): off_chain_vote_gov_action_data

  """
  update multiples rows of table: "off_chain_vote_gov_action_data"
  """
  update_off_chain_vote_gov_action_data_many(
    """updates to execute, in order"""
    updates: [off_chain_vote_gov_action_data_updates!]!
  ): [off_chain_vote_gov_action_data_mutation_response]

  """
  update data of the table: "off_chain_vote_reference"
  """
  update_off_chain_vote_reference(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_reference_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_reference_set_input

    """filter the rows which have to be updated"""
    where: off_chain_vote_reference_bool_exp!
  ): off_chain_vote_reference_mutation_response

  """
  update single row of the table: "off_chain_vote_reference"
  """
  update_off_chain_vote_reference_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: off_chain_vote_reference_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: off_chain_vote_reference_set_input
    pk_columns: off_chain_vote_reference_pk_columns_input!
  ): off_chain_vote_reference

  """
  update multiples rows of table: "off_chain_vote_reference"
  """
  update_off_chain_vote_reference_many(
    """updates to execute, in order"""
    updates: [off_chain_vote_reference_updates!]!
  ): [off_chain_vote_reference_mutation_response]

  """
  update data of the table: "pool_hash"
  """
  update_pool_hash(
    """increments the numeric columns with given value of the filtered values"""
    _inc: pool_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_hash_set_input

    """filter the rows which have to be updated"""
    where: pool_hash_bool_exp!
  ): pool_hash_mutation_response

  """
  update single row of the table: "pool_hash"
  """
  update_pool_hash_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: pool_hash_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_hash_set_input
    pk_columns: pool_hash_pk_columns_input!
  ): pool_hash

  """
  update multiples rows of table: "pool_hash"
  """
  update_pool_hash_many(
    """updates to execute, in order"""
    updates: [pool_hash_updates!]!
  ): [pool_hash_mutation_response]

  """
  update data of the table: "pool_relay"
  """
  update_pool_relay(
    """increments the numeric columns with given value of the filtered values"""
    _inc: pool_relay_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_relay_set_input

    """filter the rows which have to be updated"""
    where: pool_relay_bool_exp!
  ): pool_relay_mutation_response

  """
  update single row of the table: "pool_relay"
  """
  update_pool_relay_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: pool_relay_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_relay_set_input
    pk_columns: pool_relay_pk_columns_input!
  ): pool_relay

  """
  update multiples rows of table: "pool_relay"
  """
  update_pool_relay_many(
    """updates to execute, in order"""
    updates: [pool_relay_updates!]!
  ): [pool_relay_mutation_response]

  """
  update data of the table: "pool_stat"
  """
  update_pool_stat(
    """increments the numeric columns with given value of the filtered values"""
    _inc: pool_stat_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_stat_set_input

    """filter the rows which have to be updated"""
    where: pool_stat_bool_exp!
  ): pool_stat_mutation_response

  """
  update single row of the table: "pool_stat"
  """
  update_pool_stat_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: pool_stat_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pool_stat_set_input
    pk_columns: pool_stat_pk_columns_input!
  ): pool_stat

  """
  update multiples rows of table: "pool_stat"
  """
  update_pool_stat_many(
    """updates to execute, in order"""
    updates: [pool_stat_updates!]!
  ): [pool_stat_mutation_response]

  """
  update data of the table: "reserve"
  """
  update_reserve(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reserve_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reserve_set_input

    """filter the rows which have to be updated"""
    where: reserve_bool_exp!
  ): reserve_mutation_response

  """
  update single row of the table: "reserve"
  """
  update_reserve_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: reserve_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: reserve_set_input
    pk_columns: reserve_pk_columns_input!
  ): reserve

  """
  update multiples rows of table: "reserve"
  """
  update_reserve_many(
    """updates to execute, in order"""
    updates: [reserve_updates!]!
  ): [reserve_mutation_response]

  """
  update data of the table: "stake_address"
  """
  update_stake_address(
    """increments the numeric columns with given value of the filtered values"""
    _inc: stake_address_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_address_set_input

    """filter the rows which have to be updated"""
    where: stake_address_bool_exp!
  ): stake_address_mutation_response

  """
  update single row of the table: "stake_address"
  """
  update_stake_address_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: stake_address_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: stake_address_set_input
    pk_columns: stake_address_pk_columns_input!
  ): stake_address

  """
  update multiples rows of table: "stake_address"
  """
  update_stake_address_many(
    """updates to execute, in order"""
    updates: [stake_address_updates!]!
  ): [stake_address_mutation_response]

  """
  update data of the table: "treasury_withdrawal"
  """
  update_treasury_withdrawal(
    """increments the numeric columns with given value of the filtered values"""
    _inc: treasury_withdrawal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: treasury_withdrawal_set_input

    """filter the rows which have to be updated"""
    where: treasury_withdrawal_bool_exp!
  ): treasury_withdrawal_mutation_response

  """
  update single row of the table: "treasury_withdrawal"
  """
  update_treasury_withdrawal_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: treasury_withdrawal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: treasury_withdrawal_set_input
    pk_columns: treasury_withdrawal_pk_columns_input!
  ): treasury_withdrawal

  """
  update multiples rows of table: "treasury_withdrawal"
  """
  update_treasury_withdrawal_many(
    """updates to execute, in order"""
    updates: [treasury_withdrawal_updates!]!
  ): [treasury_withdrawal_mutation_response]

  """
  update data of the table: "tx"
  """
  update_tx(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tx_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_set_input

    """filter the rows which have to be updated"""
    where: tx_bool_exp!
  ): tx_mutation_response

  """
  update single row of the table: "tx"
  """
  update_tx_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tx_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_set_input
    pk_columns: tx_pk_columns_input!
  ): tx

  """
  update multiples rows of table: "tx"
  """
  update_tx_many(
    """updates to execute, in order"""
    updates: [tx_updates!]!
  ): [tx_mutation_response]

  """
  update data of the table: "tx_metadata"
  """
  update_tx_metadata(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: tx_metadata_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: tx_metadata_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: tx_metadata_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: tx_metadata_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: tx_metadata_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: tx_metadata_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_metadata_set_input

    """filter the rows which have to be updated"""
    where: tx_metadata_bool_exp!
  ): tx_metadata_mutation_response

  """
  update single row of the table: "tx_metadata"
  """
  update_tx_metadata_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: tx_metadata_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: tx_metadata_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: tx_metadata_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: tx_metadata_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: tx_metadata_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: tx_metadata_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: tx_metadata_set_input
    pk_columns: tx_metadata_pk_columns_input!
  ): tx_metadata

  """
  update multiples rows of table: "tx_metadata"
  """
  update_tx_metadata_many(
    """updates to execute, in order"""
    updates: [tx_metadata_updates!]!
  ): [tx_metadata_mutation_response]

  """
  update data of the table: "voting_anchor"
  """
  update_voting_anchor(
    """increments the numeric columns with given value of the filtered values"""
    _inc: voting_anchor_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: voting_anchor_set_input

    """filter the rows which have to be updated"""
    where: voting_anchor_bool_exp!
  ): voting_anchor_mutation_response

  """
  update single row of the table: "voting_anchor"
  """
  update_voting_anchor_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: voting_anchor_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: voting_anchor_set_input
    pk_columns: voting_anchor_pk_columns_input!
  ): voting_anchor

  """
  update multiples rows of table: "voting_anchor"
  """
  update_voting_anchor_many(
    """updates to execute, in order"""
    updates: [voting_anchor_updates!]!
  ): [voting_anchor_mutation_response]

  """
  update data of the table: "voting_procedure"
  """
  update_voting_procedure(
    """increments the numeric columns with given value of the filtered values"""
    _inc: voting_procedure_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: voting_procedure_set_input

    """filter the rows which have to be updated"""
    where: voting_procedure_bool_exp!
  ): voting_procedure_mutation_response

  """
  update single row of the table: "voting_procedure"
  """
  update_voting_procedure_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: voting_procedure_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: voting_procedure_set_input
    pk_columns: voting_procedure_pk_columns_input!
  ): voting_procedure

  """
  update multiples rows of table: "voting_procedure"
  """
  update_voting_procedure_many(
    """updates to execute, in order"""
    updates: [voting_procedure_updates!]!
  ): [voting_procedure_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
columns and relationships of "off_chain_vote_author"
"""
type off_chain_vote_author {
  id: bigint!
  name: String

  """An object relationship"""
  offChainVoteData: off_chain_vote_data
  off_chain_vote_data_id: bigint!
  public_key: String!
  signature: String!
  warning: String
  witness_algorithm: String!
}

"""
aggregated selection of "off_chain_vote_author"
"""
type off_chain_vote_author_aggregate {
  aggregate: off_chain_vote_author_aggregate_fields
  nodes: [off_chain_vote_author!]!
}

"""
aggregate fields of "off_chain_vote_author"
"""
type off_chain_vote_author_aggregate_fields {
  avg: off_chain_vote_author_avg_fields
  count(columns: [off_chain_vote_author_select_column!], distinct: Boolean): Int!
  max: off_chain_vote_author_max_fields
  min: off_chain_vote_author_min_fields
  stddev: off_chain_vote_author_stddev_fields
  stddev_pop: off_chain_vote_author_stddev_pop_fields
  stddev_samp: off_chain_vote_author_stddev_samp_fields
  sum: off_chain_vote_author_sum_fields
  var_pop: off_chain_vote_author_var_pop_fields
  var_samp: off_chain_vote_author_var_samp_fields
  variance: off_chain_vote_author_variance_fields
}

"""aggregate avg on columns"""
type off_chain_vote_author_avg_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Boolean expression to filter rows from the table "off_chain_vote_author". All fields are combined with a logical 'AND'.
"""
input off_chain_vote_author_bool_exp {
  _and: [off_chain_vote_author_bool_exp!]
  _not: off_chain_vote_author_bool_exp
  _or: [off_chain_vote_author_bool_exp!]
  id: bigint_comparison_exp
  name: String_comparison_exp
  offChainVoteData: off_chain_vote_data_bool_exp
  off_chain_vote_data_id: bigint_comparison_exp
  public_key: String_comparison_exp
  signature: String_comparison_exp
  warning: String_comparison_exp
  witness_algorithm: String_comparison_exp
}

"""
unique or primary key constraints on table "off_chain_vote_author"
"""
enum off_chain_vote_author_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  off_chain_vote_author_pkey
}

"""
input type for incrementing numeric columns in table "off_chain_vote_author"
"""
input off_chain_vote_author_inc_input {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
input type for inserting data into table "off_chain_vote_author"
"""
input off_chain_vote_author_insert_input {
  id: bigint
  name: String
  offChainVoteData: off_chain_vote_data_obj_rel_insert_input
  off_chain_vote_data_id: bigint
  public_key: String
  signature: String
  warning: String
  witness_algorithm: String
}

"""aggregate max on columns"""
type off_chain_vote_author_max_fields {
  id: bigint
  name: String
  off_chain_vote_data_id: bigint
  public_key: String
  signature: String
  warning: String
  witness_algorithm: String
}

"""aggregate min on columns"""
type off_chain_vote_author_min_fields {
  id: bigint
  name: String
  off_chain_vote_data_id: bigint
  public_key: String
  signature: String
  warning: String
  witness_algorithm: String
}

"""
response of any mutation on the table "off_chain_vote_author"
"""
type off_chain_vote_author_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [off_chain_vote_author!]!
}

"""
input type for inserting object relation for remote table "off_chain_vote_author"
"""
input off_chain_vote_author_obj_rel_insert_input {
  data: off_chain_vote_author_insert_input!

  """upsert condition"""
  on_conflict: off_chain_vote_author_on_conflict
}

"""
on_conflict condition type for table "off_chain_vote_author"
"""
input off_chain_vote_author_on_conflict {
  constraint: off_chain_vote_author_constraint!
  update_columns: [off_chain_vote_author_update_column!]! = []
  where: off_chain_vote_author_bool_exp
}

"""Ordering options when selecting data from "off_chain_vote_author"."""
input off_chain_vote_author_order_by {
  id: order_by
  name: order_by
  offChainVoteData: off_chain_vote_data_order_by
  off_chain_vote_data_id: order_by
  public_key: order_by
  signature: order_by
  warning: order_by
  witness_algorithm: order_by
}

"""primary key columns input for table: off_chain_vote_author"""
input off_chain_vote_author_pk_columns_input {
  id: bigint!
}

"""
select columns of table "off_chain_vote_author"
"""
enum off_chain_vote_author_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  off_chain_vote_data_id

  """column name"""
  public_key

  """column name"""
  signature

  """column name"""
  warning

  """column name"""
  witness_algorithm
}

"""
input type for updating data in table "off_chain_vote_author"
"""
input off_chain_vote_author_set_input {
  id: bigint
  name: String
  off_chain_vote_data_id: bigint
  public_key: String
  signature: String
  warning: String
  witness_algorithm: String
}

"""aggregate stddev on columns"""
type off_chain_vote_author_stddev_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_pop on columns"""
type off_chain_vote_author_stddev_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_samp on columns"""
type off_chain_vote_author_stddev_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Streaming cursor of the table "off_chain_vote_author"
"""
input off_chain_vote_author_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: off_chain_vote_author_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input off_chain_vote_author_stream_cursor_value_input {
  id: bigint
  name: String
  off_chain_vote_data_id: bigint
  public_key: String
  signature: String
  warning: String
  witness_algorithm: String
}

"""aggregate sum on columns"""
type off_chain_vote_author_sum_fields {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
update columns of table "off_chain_vote_author"
"""
enum off_chain_vote_author_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  off_chain_vote_data_id

  """column name"""
  public_key

  """column name"""
  signature

  """column name"""
  warning

  """column name"""
  witness_algorithm
}

input off_chain_vote_author_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: off_chain_vote_author_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: off_chain_vote_author_set_input

  """filter the rows which have to be updated"""
  where: off_chain_vote_author_bool_exp!
}

"""aggregate var_pop on columns"""
type off_chain_vote_author_var_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate var_samp on columns"""
type off_chain_vote_author_var_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate variance on columns"""
type off_chain_vote_author_variance_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
columns and relationships of "off_chain_vote_data"
"""
type off_chain_vote_data {
  bytes: bytea!
  comment: String
  hash: bytea!
  id: bigint!
  is_valid: Boolean
  json(
    """JSON select path"""
    path: String
  ): jsonb!
  language: String!

  """An object relationship"""
  ofChainVoteReference: off_chain_vote_reference

  """An object relationship"""
  offChainVoteAuthor: off_chain_vote_author

  """An object relationship"""
  offChainVoteDrepData: off_chain_vote_drep_data

  """An object relationship"""
  offChainVoteGovActionData: off_chain_vote_gov_action_data
  voting_anchor_id: bigint!
  warning: String
}

"""
aggregated selection of "off_chain_vote_data"
"""
type off_chain_vote_data_aggregate {
  aggregate: off_chain_vote_data_aggregate_fields
  nodes: [off_chain_vote_data!]!
}

"""
aggregate fields of "off_chain_vote_data"
"""
type off_chain_vote_data_aggregate_fields {
  avg: off_chain_vote_data_avg_fields
  count(columns: [off_chain_vote_data_select_column!], distinct: Boolean): Int!
  max: off_chain_vote_data_max_fields
  min: off_chain_vote_data_min_fields
  stddev: off_chain_vote_data_stddev_fields
  stddev_pop: off_chain_vote_data_stddev_pop_fields
  stddev_samp: off_chain_vote_data_stddev_samp_fields
  sum: off_chain_vote_data_sum_fields
  var_pop: off_chain_vote_data_var_pop_fields
  var_samp: off_chain_vote_data_var_samp_fields
  variance: off_chain_vote_data_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input off_chain_vote_data_append_input {
  json: jsonb
}

"""aggregate avg on columns"""
type off_chain_vote_data_avg_fields {
  id: Float
  voting_anchor_id: Float
}

"""
Boolean expression to filter rows from the table "off_chain_vote_data". All fields are combined with a logical 'AND'.
"""
input off_chain_vote_data_bool_exp {
  _and: [off_chain_vote_data_bool_exp!]
  _not: off_chain_vote_data_bool_exp
  _or: [off_chain_vote_data_bool_exp!]
  bytes: bytea_comparison_exp
  comment: String_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  is_valid: Boolean_comparison_exp
  json: jsonb_comparison_exp
  language: String_comparison_exp
  ofChainVoteReference: off_chain_vote_reference_bool_exp
  offChainVoteAuthor: off_chain_vote_author_bool_exp
  offChainVoteDrepData: off_chain_vote_drep_data_bool_exp
  offChainVoteGovActionData: off_chain_vote_gov_action_data_bool_exp
  voting_anchor_id: bigint_comparison_exp
  warning: String_comparison_exp
}

"""
unique or primary key constraints on table "off_chain_vote_data"
"""
enum off_chain_vote_data_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  off_chain_vote_data_pkey

  """
  unique or primary key constraint on columns "hash", "voting_anchor_id"
  """
  unique_off_chain_vote_data
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input off_chain_vote_data_delete_at_path_input {
  json: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input off_chain_vote_data_delete_elem_input {
  json: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input off_chain_vote_data_delete_key_input {
  json: String
}

"""
input type for incrementing numeric columns in table "off_chain_vote_data"
"""
input off_chain_vote_data_inc_input {
  id: bigint
  voting_anchor_id: bigint
}

"""
input type for inserting data into table "off_chain_vote_data"
"""
input off_chain_vote_data_insert_input {
  bytes: bytea
  comment: String
  hash: bytea
  id: bigint
  is_valid: Boolean
  json: jsonb
  language: String
  ofChainVoteReference: off_chain_vote_reference_obj_rel_insert_input
  offChainVoteAuthor: off_chain_vote_author_obj_rel_insert_input
  offChainVoteDrepData: off_chain_vote_drep_data_obj_rel_insert_input
  offChainVoteGovActionData: off_chain_vote_gov_action_data_obj_rel_insert_input
  voting_anchor_id: bigint
  warning: String
}

"""aggregate max on columns"""
type off_chain_vote_data_max_fields {
  comment: String
  id: bigint
  language: String
  voting_anchor_id: bigint
  warning: String
}

"""aggregate min on columns"""
type off_chain_vote_data_min_fields {
  comment: String
  id: bigint
  language: String
  voting_anchor_id: bigint
  warning: String
}

"""
response of any mutation on the table "off_chain_vote_data"
"""
type off_chain_vote_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [off_chain_vote_data!]!
}

"""
input type for inserting object relation for remote table "off_chain_vote_data"
"""
input off_chain_vote_data_obj_rel_insert_input {
  data: off_chain_vote_data_insert_input!

  """upsert condition"""
  on_conflict: off_chain_vote_data_on_conflict
}

"""
on_conflict condition type for table "off_chain_vote_data"
"""
input off_chain_vote_data_on_conflict {
  constraint: off_chain_vote_data_constraint!
  update_columns: [off_chain_vote_data_update_column!]! = []
  where: off_chain_vote_data_bool_exp
}

"""Ordering options when selecting data from "off_chain_vote_data"."""
input off_chain_vote_data_order_by {
  bytes: order_by
  comment: order_by
  hash: order_by
  id: order_by
  is_valid: order_by
  json: order_by
  language: order_by
  ofChainVoteReference: off_chain_vote_reference_order_by
  offChainVoteAuthor: off_chain_vote_author_order_by
  offChainVoteDrepData: off_chain_vote_drep_data_order_by
  offChainVoteGovActionData: off_chain_vote_gov_action_data_order_by
  voting_anchor_id: order_by
  warning: order_by
}

"""primary key columns input for table: off_chain_vote_data"""
input off_chain_vote_data_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input off_chain_vote_data_prepend_input {
  json: jsonb
}

"""
select columns of table "off_chain_vote_data"
"""
enum off_chain_vote_data_select_column {
  """column name"""
  bytes

  """column name"""
  comment

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  is_valid

  """column name"""
  json

  """column name"""
  language

  """column name"""
  voting_anchor_id

  """column name"""
  warning
}

"""
input type for updating data in table "off_chain_vote_data"
"""
input off_chain_vote_data_set_input {
  bytes: bytea
  comment: String
  hash: bytea
  id: bigint
  is_valid: Boolean
  json: jsonb
  language: String
  voting_anchor_id: bigint
  warning: String
}

"""aggregate stddev on columns"""
type off_chain_vote_data_stddev_fields {
  id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_pop on columns"""
type off_chain_vote_data_stddev_pop_fields {
  id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_samp on columns"""
type off_chain_vote_data_stddev_samp_fields {
  id: Float
  voting_anchor_id: Float
}

"""
Streaming cursor of the table "off_chain_vote_data"
"""
input off_chain_vote_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: off_chain_vote_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input off_chain_vote_data_stream_cursor_value_input {
  bytes: bytea
  comment: String
  hash: bytea
  id: bigint
  is_valid: Boolean
  json: jsonb
  language: String
  voting_anchor_id: bigint
  warning: String
}

"""aggregate sum on columns"""
type off_chain_vote_data_sum_fields {
  id: bigint
  voting_anchor_id: bigint
}

"""
update columns of table "off_chain_vote_data"
"""
enum off_chain_vote_data_update_column {
  """column name"""
  bytes

  """column name"""
  comment

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  is_valid

  """column name"""
  json

  """column name"""
  language

  """column name"""
  voting_anchor_id

  """column name"""
  warning
}

input off_chain_vote_data_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: off_chain_vote_data_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: off_chain_vote_data_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: off_chain_vote_data_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: off_chain_vote_data_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: off_chain_vote_data_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: off_chain_vote_data_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: off_chain_vote_data_set_input

  """filter the rows which have to be updated"""
  where: off_chain_vote_data_bool_exp!
}

"""aggregate var_pop on columns"""
type off_chain_vote_data_var_pop_fields {
  id: Float
  voting_anchor_id: Float
}

"""aggregate var_samp on columns"""
type off_chain_vote_data_var_samp_fields {
  id: Float
  voting_anchor_id: Float
}

"""aggregate variance on columns"""
type off_chain_vote_data_variance_fields {
  id: Float
  voting_anchor_id: Float
}

"""
columns and relationships of "off_chain_vote_drep_data"
"""
type off_chain_vote_drep_data {
  given_name: String!
  id: bigint!
  image_hash: String
  image_url: String
  motivations: String
  objectives: String

  """An object relationship"""
  offChainVoteData: off_chain_vote_data
  off_chain_vote_data_id: bigint!
  payment_address: String
  qualifications: String
}

"""
aggregated selection of "off_chain_vote_drep_data"
"""
type off_chain_vote_drep_data_aggregate {
  aggregate: off_chain_vote_drep_data_aggregate_fields
  nodes: [off_chain_vote_drep_data!]!
}

"""
aggregate fields of "off_chain_vote_drep_data"
"""
type off_chain_vote_drep_data_aggregate_fields {
  avg: off_chain_vote_drep_data_avg_fields
  count(columns: [off_chain_vote_drep_data_select_column!], distinct: Boolean): Int!
  max: off_chain_vote_drep_data_max_fields
  min: off_chain_vote_drep_data_min_fields
  stddev: off_chain_vote_drep_data_stddev_fields
  stddev_pop: off_chain_vote_drep_data_stddev_pop_fields
  stddev_samp: off_chain_vote_drep_data_stddev_samp_fields
  sum: off_chain_vote_drep_data_sum_fields
  var_pop: off_chain_vote_drep_data_var_pop_fields
  var_samp: off_chain_vote_drep_data_var_samp_fields
  variance: off_chain_vote_drep_data_variance_fields
}

"""aggregate avg on columns"""
type off_chain_vote_drep_data_avg_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Boolean expression to filter rows from the table "off_chain_vote_drep_data". All fields are combined with a logical 'AND'.
"""
input off_chain_vote_drep_data_bool_exp {
  _and: [off_chain_vote_drep_data_bool_exp!]
  _not: off_chain_vote_drep_data_bool_exp
  _or: [off_chain_vote_drep_data_bool_exp!]
  given_name: String_comparison_exp
  id: bigint_comparison_exp
  image_hash: String_comparison_exp
  image_url: String_comparison_exp
  motivations: String_comparison_exp
  objectives: String_comparison_exp
  offChainVoteData: off_chain_vote_data_bool_exp
  off_chain_vote_data_id: bigint_comparison_exp
  payment_address: String_comparison_exp
  qualifications: String_comparison_exp
}

"""
unique or primary key constraints on table "off_chain_vote_drep_data"
"""
enum off_chain_vote_drep_data_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  off_chain_vote_drep_data_pkey
}

"""
input type for incrementing numeric columns in table "off_chain_vote_drep_data"
"""
input off_chain_vote_drep_data_inc_input {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
input type for inserting data into table "off_chain_vote_drep_data"
"""
input off_chain_vote_drep_data_insert_input {
  given_name: String
  id: bigint
  image_hash: String
  image_url: String
  motivations: String
  objectives: String
  offChainVoteData: off_chain_vote_data_obj_rel_insert_input
  off_chain_vote_data_id: bigint
  payment_address: String
  qualifications: String
}

"""aggregate max on columns"""
type off_chain_vote_drep_data_max_fields {
  given_name: String
  id: bigint
  image_hash: String
  image_url: String
  motivations: String
  objectives: String
  off_chain_vote_data_id: bigint
  payment_address: String
  qualifications: String
}

"""aggregate min on columns"""
type off_chain_vote_drep_data_min_fields {
  given_name: String
  id: bigint
  image_hash: String
  image_url: String
  motivations: String
  objectives: String
  off_chain_vote_data_id: bigint
  payment_address: String
  qualifications: String
}

"""
response of any mutation on the table "off_chain_vote_drep_data"
"""
type off_chain_vote_drep_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [off_chain_vote_drep_data!]!
}

"""
input type for inserting object relation for remote table "off_chain_vote_drep_data"
"""
input off_chain_vote_drep_data_obj_rel_insert_input {
  data: off_chain_vote_drep_data_insert_input!

  """upsert condition"""
  on_conflict: off_chain_vote_drep_data_on_conflict
}

"""
on_conflict condition type for table "off_chain_vote_drep_data"
"""
input off_chain_vote_drep_data_on_conflict {
  constraint: off_chain_vote_drep_data_constraint!
  update_columns: [off_chain_vote_drep_data_update_column!]! = []
  where: off_chain_vote_drep_data_bool_exp
}

"""Ordering options when selecting data from "off_chain_vote_drep_data"."""
input off_chain_vote_drep_data_order_by {
  given_name: order_by
  id: order_by
  image_hash: order_by
  image_url: order_by
  motivations: order_by
  objectives: order_by
  offChainVoteData: off_chain_vote_data_order_by
  off_chain_vote_data_id: order_by
  payment_address: order_by
  qualifications: order_by
}

"""primary key columns input for table: off_chain_vote_drep_data"""
input off_chain_vote_drep_data_pk_columns_input {
  id: bigint!
}

"""
select columns of table "off_chain_vote_drep_data"
"""
enum off_chain_vote_drep_data_select_column {
  """column name"""
  given_name

  """column name"""
  id

  """column name"""
  image_hash

  """column name"""
  image_url

  """column name"""
  motivations

  """column name"""
  objectives

  """column name"""
  off_chain_vote_data_id

  """column name"""
  payment_address

  """column name"""
  qualifications
}

"""
input type for updating data in table "off_chain_vote_drep_data"
"""
input off_chain_vote_drep_data_set_input {
  given_name: String
  id: bigint
  image_hash: String
  image_url: String
  motivations: String
  objectives: String
  off_chain_vote_data_id: bigint
  payment_address: String
  qualifications: String
}

"""aggregate stddev on columns"""
type off_chain_vote_drep_data_stddev_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_pop on columns"""
type off_chain_vote_drep_data_stddev_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_samp on columns"""
type off_chain_vote_drep_data_stddev_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Streaming cursor of the table "off_chain_vote_drep_data"
"""
input off_chain_vote_drep_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: off_chain_vote_drep_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input off_chain_vote_drep_data_stream_cursor_value_input {
  given_name: String
  id: bigint
  image_hash: String
  image_url: String
  motivations: String
  objectives: String
  off_chain_vote_data_id: bigint
  payment_address: String
  qualifications: String
}

"""aggregate sum on columns"""
type off_chain_vote_drep_data_sum_fields {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
update columns of table "off_chain_vote_drep_data"
"""
enum off_chain_vote_drep_data_update_column {
  """column name"""
  given_name

  """column name"""
  id

  """column name"""
  image_hash

  """column name"""
  image_url

  """column name"""
  motivations

  """column name"""
  objectives

  """column name"""
  off_chain_vote_data_id

  """column name"""
  payment_address

  """column name"""
  qualifications
}

input off_chain_vote_drep_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: off_chain_vote_drep_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: off_chain_vote_drep_data_set_input

  """filter the rows which have to be updated"""
  where: off_chain_vote_drep_data_bool_exp!
}

"""aggregate var_pop on columns"""
type off_chain_vote_drep_data_var_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate var_samp on columns"""
type off_chain_vote_drep_data_var_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate variance on columns"""
type off_chain_vote_drep_data_variance_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
columns and relationships of "off_chain_vote_gov_action_data"
"""
type off_chain_vote_gov_action_data {
  """An object relationship"""
  OffChainVoteData: off_chain_vote_data
  abstract: String!
  id: bigint!
  motivation: String!
  off_chain_vote_data_id: bigint!
  rationale: String!
  title: String!
}

"""
aggregated selection of "off_chain_vote_gov_action_data"
"""
type off_chain_vote_gov_action_data_aggregate {
  aggregate: off_chain_vote_gov_action_data_aggregate_fields
  nodes: [off_chain_vote_gov_action_data!]!
}

"""
aggregate fields of "off_chain_vote_gov_action_data"
"""
type off_chain_vote_gov_action_data_aggregate_fields {
  avg: off_chain_vote_gov_action_data_avg_fields
  count(columns: [off_chain_vote_gov_action_data_select_column!], distinct: Boolean): Int!
  max: off_chain_vote_gov_action_data_max_fields
  min: off_chain_vote_gov_action_data_min_fields
  stddev: off_chain_vote_gov_action_data_stddev_fields
  stddev_pop: off_chain_vote_gov_action_data_stddev_pop_fields
  stddev_samp: off_chain_vote_gov_action_data_stddev_samp_fields
  sum: off_chain_vote_gov_action_data_sum_fields
  var_pop: off_chain_vote_gov_action_data_var_pop_fields
  var_samp: off_chain_vote_gov_action_data_var_samp_fields
  variance: off_chain_vote_gov_action_data_variance_fields
}

"""aggregate avg on columns"""
type off_chain_vote_gov_action_data_avg_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Boolean expression to filter rows from the table "off_chain_vote_gov_action_data". All fields are combined with a logical 'AND'.
"""
input off_chain_vote_gov_action_data_bool_exp {
  OffChainVoteData: off_chain_vote_data_bool_exp
  _and: [off_chain_vote_gov_action_data_bool_exp!]
  _not: off_chain_vote_gov_action_data_bool_exp
  _or: [off_chain_vote_gov_action_data_bool_exp!]
  abstract: String_comparison_exp
  id: bigint_comparison_exp
  motivation: String_comparison_exp
  off_chain_vote_data_id: bigint_comparison_exp
  rationale: String_comparison_exp
  title: String_comparison_exp
}

"""
unique or primary key constraints on table "off_chain_vote_gov_action_data"
"""
enum off_chain_vote_gov_action_data_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  off_chain_vote_gov_action_data_pkey
}

"""
input type for incrementing numeric columns in table "off_chain_vote_gov_action_data"
"""
input off_chain_vote_gov_action_data_inc_input {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
input type for inserting data into table "off_chain_vote_gov_action_data"
"""
input off_chain_vote_gov_action_data_insert_input {
  OffChainVoteData: off_chain_vote_data_obj_rel_insert_input
  abstract: String
  id: bigint
  motivation: String
  off_chain_vote_data_id: bigint
  rationale: String
  title: String
}

"""aggregate max on columns"""
type off_chain_vote_gov_action_data_max_fields {
  abstract: String
  id: bigint
  motivation: String
  off_chain_vote_data_id: bigint
  rationale: String
  title: String
}

"""aggregate min on columns"""
type off_chain_vote_gov_action_data_min_fields {
  abstract: String
  id: bigint
  motivation: String
  off_chain_vote_data_id: bigint
  rationale: String
  title: String
}

"""
response of any mutation on the table "off_chain_vote_gov_action_data"
"""
type off_chain_vote_gov_action_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [off_chain_vote_gov_action_data!]!
}

"""
input type for inserting object relation for remote table "off_chain_vote_gov_action_data"
"""
input off_chain_vote_gov_action_data_obj_rel_insert_input {
  data: off_chain_vote_gov_action_data_insert_input!

  """upsert condition"""
  on_conflict: off_chain_vote_gov_action_data_on_conflict
}

"""
on_conflict condition type for table "off_chain_vote_gov_action_data"
"""
input off_chain_vote_gov_action_data_on_conflict {
  constraint: off_chain_vote_gov_action_data_constraint!
  update_columns: [off_chain_vote_gov_action_data_update_column!]! = []
  where: off_chain_vote_gov_action_data_bool_exp
}

"""
Ordering options when selecting data from "off_chain_vote_gov_action_data".
"""
input off_chain_vote_gov_action_data_order_by {
  OffChainVoteData: off_chain_vote_data_order_by
  abstract: order_by
  id: order_by
  motivation: order_by
  off_chain_vote_data_id: order_by
  rationale: order_by
  title: order_by
}

"""primary key columns input for table: off_chain_vote_gov_action_data"""
input off_chain_vote_gov_action_data_pk_columns_input {
  id: bigint!
}

"""
select columns of table "off_chain_vote_gov_action_data"
"""
enum off_chain_vote_gov_action_data_select_column {
  """column name"""
  abstract

  """column name"""
  id

  """column name"""
  motivation

  """column name"""
  off_chain_vote_data_id

  """column name"""
  rationale

  """column name"""
  title
}

"""
input type for updating data in table "off_chain_vote_gov_action_data"
"""
input off_chain_vote_gov_action_data_set_input {
  abstract: String
  id: bigint
  motivation: String
  off_chain_vote_data_id: bigint
  rationale: String
  title: String
}

"""aggregate stddev on columns"""
type off_chain_vote_gov_action_data_stddev_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_pop on columns"""
type off_chain_vote_gov_action_data_stddev_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_samp on columns"""
type off_chain_vote_gov_action_data_stddev_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Streaming cursor of the table "off_chain_vote_gov_action_data"
"""
input off_chain_vote_gov_action_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: off_chain_vote_gov_action_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input off_chain_vote_gov_action_data_stream_cursor_value_input {
  abstract: String
  id: bigint
  motivation: String
  off_chain_vote_data_id: bigint
  rationale: String
  title: String
}

"""aggregate sum on columns"""
type off_chain_vote_gov_action_data_sum_fields {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
update columns of table "off_chain_vote_gov_action_data"
"""
enum off_chain_vote_gov_action_data_update_column {
  """column name"""
  abstract

  """column name"""
  id

  """column name"""
  motivation

  """column name"""
  off_chain_vote_data_id

  """column name"""
  rationale

  """column name"""
  title
}

input off_chain_vote_gov_action_data_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: off_chain_vote_gov_action_data_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: off_chain_vote_gov_action_data_set_input

  """filter the rows which have to be updated"""
  where: off_chain_vote_gov_action_data_bool_exp!
}

"""aggregate var_pop on columns"""
type off_chain_vote_gov_action_data_var_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate var_samp on columns"""
type off_chain_vote_gov_action_data_var_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate variance on columns"""
type off_chain_vote_gov_action_data_variance_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
columns and relationships of "off_chain_vote_reference"
"""
type off_chain_vote_reference {
  """An object relationship"""
  OffChainVoteData: off_chain_vote_data
  hash_algorithm: String
  hash_digest: String
  id: bigint!
  label: String!
  off_chain_vote_data_id: bigint!
  uri: String!
}

"""
aggregated selection of "off_chain_vote_reference"
"""
type off_chain_vote_reference_aggregate {
  aggregate: off_chain_vote_reference_aggregate_fields
  nodes: [off_chain_vote_reference!]!
}

"""
aggregate fields of "off_chain_vote_reference"
"""
type off_chain_vote_reference_aggregate_fields {
  avg: off_chain_vote_reference_avg_fields
  count(columns: [off_chain_vote_reference_select_column!], distinct: Boolean): Int!
  max: off_chain_vote_reference_max_fields
  min: off_chain_vote_reference_min_fields
  stddev: off_chain_vote_reference_stddev_fields
  stddev_pop: off_chain_vote_reference_stddev_pop_fields
  stddev_samp: off_chain_vote_reference_stddev_samp_fields
  sum: off_chain_vote_reference_sum_fields
  var_pop: off_chain_vote_reference_var_pop_fields
  var_samp: off_chain_vote_reference_var_samp_fields
  variance: off_chain_vote_reference_variance_fields
}

"""aggregate avg on columns"""
type off_chain_vote_reference_avg_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Boolean expression to filter rows from the table "off_chain_vote_reference". All fields are combined with a logical 'AND'.
"""
input off_chain_vote_reference_bool_exp {
  OffChainVoteData: off_chain_vote_data_bool_exp
  _and: [off_chain_vote_reference_bool_exp!]
  _not: off_chain_vote_reference_bool_exp
  _or: [off_chain_vote_reference_bool_exp!]
  hash_algorithm: String_comparison_exp
  hash_digest: String_comparison_exp
  id: bigint_comparison_exp
  label: String_comparison_exp
  off_chain_vote_data_id: bigint_comparison_exp
  uri: String_comparison_exp
}

"""
unique or primary key constraints on table "off_chain_vote_reference"
"""
enum off_chain_vote_reference_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  off_chain_vote_reference_pkey
}

"""
input type for incrementing numeric columns in table "off_chain_vote_reference"
"""
input off_chain_vote_reference_inc_input {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
input type for inserting data into table "off_chain_vote_reference"
"""
input off_chain_vote_reference_insert_input {
  OffChainVoteData: off_chain_vote_data_obj_rel_insert_input
  hash_algorithm: String
  hash_digest: String
  id: bigint
  label: String
  off_chain_vote_data_id: bigint
  uri: String
}

"""aggregate max on columns"""
type off_chain_vote_reference_max_fields {
  hash_algorithm: String
  hash_digest: String
  id: bigint
  label: String
  off_chain_vote_data_id: bigint
  uri: String
}

"""aggregate min on columns"""
type off_chain_vote_reference_min_fields {
  hash_algorithm: String
  hash_digest: String
  id: bigint
  label: String
  off_chain_vote_data_id: bigint
  uri: String
}

"""
response of any mutation on the table "off_chain_vote_reference"
"""
type off_chain_vote_reference_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [off_chain_vote_reference!]!
}

"""
input type for inserting object relation for remote table "off_chain_vote_reference"
"""
input off_chain_vote_reference_obj_rel_insert_input {
  data: off_chain_vote_reference_insert_input!

  """upsert condition"""
  on_conflict: off_chain_vote_reference_on_conflict
}

"""
on_conflict condition type for table "off_chain_vote_reference"
"""
input off_chain_vote_reference_on_conflict {
  constraint: off_chain_vote_reference_constraint!
  update_columns: [off_chain_vote_reference_update_column!]! = []
  where: off_chain_vote_reference_bool_exp
}

"""Ordering options when selecting data from "off_chain_vote_reference"."""
input off_chain_vote_reference_order_by {
  OffChainVoteData: off_chain_vote_data_order_by
  hash_algorithm: order_by
  hash_digest: order_by
  id: order_by
  label: order_by
  off_chain_vote_data_id: order_by
  uri: order_by
}

"""primary key columns input for table: off_chain_vote_reference"""
input off_chain_vote_reference_pk_columns_input {
  id: bigint!
}

"""
select columns of table "off_chain_vote_reference"
"""
enum off_chain_vote_reference_select_column {
  """column name"""
  hash_algorithm

  """column name"""
  hash_digest

  """column name"""
  id

  """column name"""
  label

  """column name"""
  off_chain_vote_data_id

  """column name"""
  uri
}

"""
input type for updating data in table "off_chain_vote_reference"
"""
input off_chain_vote_reference_set_input {
  hash_algorithm: String
  hash_digest: String
  id: bigint
  label: String
  off_chain_vote_data_id: bigint
  uri: String
}

"""aggregate stddev on columns"""
type off_chain_vote_reference_stddev_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_pop on columns"""
type off_chain_vote_reference_stddev_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate stddev_samp on columns"""
type off_chain_vote_reference_stddev_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""
Streaming cursor of the table "off_chain_vote_reference"
"""
input off_chain_vote_reference_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: off_chain_vote_reference_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input off_chain_vote_reference_stream_cursor_value_input {
  hash_algorithm: String
  hash_digest: String
  id: bigint
  label: String
  off_chain_vote_data_id: bigint
  uri: String
}

"""aggregate sum on columns"""
type off_chain_vote_reference_sum_fields {
  id: bigint
  off_chain_vote_data_id: bigint
}

"""
update columns of table "off_chain_vote_reference"
"""
enum off_chain_vote_reference_update_column {
  """column name"""
  hash_algorithm

  """column name"""
  hash_digest

  """column name"""
  id

  """column name"""
  label

  """column name"""
  off_chain_vote_data_id

  """column name"""
  uri
}

input off_chain_vote_reference_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: off_chain_vote_reference_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: off_chain_vote_reference_set_input

  """filter the rows which have to be updated"""
  where: off_chain_vote_reference_bool_exp!
}

"""aggregate var_pop on columns"""
type off_chain_vote_reference_var_pop_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate var_samp on columns"""
type off_chain_vote_reference_var_samp_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""aggregate variance on columns"""
type off_chain_vote_reference_variance_fields {
  id: Float
  off_chain_vote_data_id: Float
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "pool_hash"
"""
type pool_hash {
  hash_raw: bytea!
  id: bigint!
  view: String!
}

"""
aggregated selection of "pool_hash"
"""
type pool_hash_aggregate {
  aggregate: pool_hash_aggregate_fields
  nodes: [pool_hash!]!
}

"""
aggregate fields of "pool_hash"
"""
type pool_hash_aggregate_fields {
  avg: pool_hash_avg_fields
  count(columns: [pool_hash_select_column!], distinct: Boolean): Int!
  max: pool_hash_max_fields
  min: pool_hash_min_fields
  stddev: pool_hash_stddev_fields
  stddev_pop: pool_hash_stddev_pop_fields
  stddev_samp: pool_hash_stddev_samp_fields
  sum: pool_hash_sum_fields
  var_pop: pool_hash_var_pop_fields
  var_samp: pool_hash_var_samp_fields
  variance: pool_hash_variance_fields
}

"""aggregate avg on columns"""
type pool_hash_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "pool_hash". All fields are combined with a logical 'AND'.
"""
input pool_hash_bool_exp {
  _and: [pool_hash_bool_exp!]
  _not: pool_hash_bool_exp
  _or: [pool_hash_bool_exp!]
  hash_raw: bytea_comparison_exp
  id: bigint_comparison_exp
  view: String_comparison_exp
}

"""
unique or primary key constraints on table "pool_hash"
"""
enum pool_hash_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  pool_hash_pkey

  """
  unique or primary key constraint on columns "hash_raw"
  """
  unique_pool_hash
}

"""
input type for incrementing numeric columns in table "pool_hash"
"""
input pool_hash_inc_input {
  id: bigint
}

"""
input type for inserting data into table "pool_hash"
"""
input pool_hash_insert_input {
  hash_raw: bytea
  id: bigint
  view: String
}

"""aggregate max on columns"""
type pool_hash_max_fields {
  id: bigint
  view: String
}

"""aggregate min on columns"""
type pool_hash_min_fields {
  id: bigint
  view: String
}

"""
response of any mutation on the table "pool_hash"
"""
type pool_hash_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pool_hash!]!
}

"""
input type for inserting object relation for remote table "pool_hash"
"""
input pool_hash_obj_rel_insert_input {
  data: pool_hash_insert_input!

  """upsert condition"""
  on_conflict: pool_hash_on_conflict
}

"""
on_conflict condition type for table "pool_hash"
"""
input pool_hash_on_conflict {
  constraint: pool_hash_constraint!
  update_columns: [pool_hash_update_column!]! = []
  where: pool_hash_bool_exp
}

"""Ordering options when selecting data from "pool_hash"."""
input pool_hash_order_by {
  hash_raw: order_by
  id: order_by
  view: order_by
}

"""primary key columns input for table: pool_hash"""
input pool_hash_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_hash"
"""
enum pool_hash_select_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  view
}

"""
input type for updating data in table "pool_hash"
"""
input pool_hash_set_input {
  hash_raw: bytea
  id: bigint
  view: String
}

"""aggregate stddev on columns"""
type pool_hash_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type pool_hash_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type pool_hash_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "pool_hash"
"""
input pool_hash_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: pool_hash_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input pool_hash_stream_cursor_value_input {
  hash_raw: bytea
  id: bigint
  view: String
}

"""aggregate sum on columns"""
type pool_hash_sum_fields {
  id: bigint
}

"""
update columns of table "pool_hash"
"""
enum pool_hash_update_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  view
}

input pool_hash_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: pool_hash_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: pool_hash_set_input

  """filter the rows which have to be updated"""
  where: pool_hash_bool_exp!
}

"""aggregate var_pop on columns"""
type pool_hash_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type pool_hash_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type pool_hash_variance_fields {
  id: Float
}

"""
columns and relationships of "pool_relay"
"""
type pool_relay {
  dnsName: String
  dnsSrvName: String
  id: bigint!
  ipv4: String
  ipv6: String
  port: Int

  """An object relationship"""
  stakePool: StakePool
  update_id: bigint!
}

"""
aggregated selection of "pool_relay"
"""
type pool_relay_aggregate {
  aggregate: pool_relay_aggregate_fields
  nodes: [pool_relay!]!
}

input pool_relay_aggregate_bool_exp {
  count: pool_relay_aggregate_bool_exp_count
}

input pool_relay_aggregate_bool_exp_count {
  arguments: [pool_relay_select_column!]
  distinct: Boolean
  filter: pool_relay_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "pool_relay"
"""
type pool_relay_aggregate_fields {
  avg: pool_relay_avg_fields
  count(columns: [pool_relay_select_column!], distinct: Boolean): Int!
  max: pool_relay_max_fields
  min: pool_relay_min_fields
  stddev: pool_relay_stddev_fields
  stddev_pop: pool_relay_stddev_pop_fields
  stddev_samp: pool_relay_stddev_samp_fields
  sum: pool_relay_sum_fields
  var_pop: pool_relay_var_pop_fields
  var_samp: pool_relay_var_samp_fields
  variance: pool_relay_variance_fields
}

"""
order by aggregate values of table "pool_relay"
"""
input pool_relay_aggregate_order_by {
  avg: pool_relay_avg_order_by
  count: order_by
  max: pool_relay_max_order_by
  min: pool_relay_min_order_by
  stddev: pool_relay_stddev_order_by
  stddev_pop: pool_relay_stddev_pop_order_by
  stddev_samp: pool_relay_stddev_samp_order_by
  sum: pool_relay_sum_order_by
  var_pop: pool_relay_var_pop_order_by
  var_samp: pool_relay_var_samp_order_by
  variance: pool_relay_variance_order_by
}

"""
input type for inserting array relation for remote table "pool_relay"
"""
input pool_relay_arr_rel_insert_input {
  data: [pool_relay_insert_input!]!

  """upsert condition"""
  on_conflict: pool_relay_on_conflict
}

"""aggregate avg on columns"""
type pool_relay_avg_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by avg() on columns of table "pool_relay"
"""
input pool_relay_avg_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
Boolean expression to filter rows from the table "pool_relay". All fields are combined with a logical 'AND'.
"""
input pool_relay_bool_exp {
  _and: [pool_relay_bool_exp!]
  _not: pool_relay_bool_exp
  _or: [pool_relay_bool_exp!]
  dnsName: String_comparison_exp
  dnsSrvName: String_comparison_exp
  id: bigint_comparison_exp
  ipv4: String_comparison_exp
  ipv6: String_comparison_exp
  port: Int_comparison_exp
  stakePool: StakePool_bool_exp
  update_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "pool_relay"
"""
enum pool_relay_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  pool_relay_pkey

  """
  unique or primary key constraint on columns "update_id", "dns_name", "ipv6", "ipv4"
  """
  unique_pool_relay
}

"""
input type for incrementing numeric columns in table "pool_relay"
"""
input pool_relay_inc_input {
  id: bigint
  port: Int
  update_id: bigint
}

"""
input type for inserting data into table "pool_relay"
"""
input pool_relay_insert_input {
  dnsName: String
  dnsSrvName: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  stakePool: StakePool_obj_rel_insert_input
  update_id: bigint
}

"""aggregate max on columns"""
type pool_relay_max_fields {
  dnsName: String
  dnsSrvName: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""
order by max() on columns of table "pool_relay"
"""
input pool_relay_max_order_by {
  dnsName: order_by
  dnsSrvName: order_by
  id: order_by
  ipv4: order_by
  ipv6: order_by
  port: order_by
  update_id: order_by
}

"""aggregate min on columns"""
type pool_relay_min_fields {
  dnsName: String
  dnsSrvName: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""
order by min() on columns of table "pool_relay"
"""
input pool_relay_min_order_by {
  dnsName: order_by
  dnsSrvName: order_by
  id: order_by
  ipv4: order_by
  ipv6: order_by
  port: order_by
  update_id: order_by
}

"""
response of any mutation on the table "pool_relay"
"""
type pool_relay_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pool_relay!]!
}

"""
on_conflict condition type for table "pool_relay"
"""
input pool_relay_on_conflict {
  constraint: pool_relay_constraint!
  update_columns: [pool_relay_update_column!]! = []
  where: pool_relay_bool_exp
}

"""Ordering options when selecting data from "pool_relay"."""
input pool_relay_order_by {
  dnsName: order_by
  dnsSrvName: order_by
  id: order_by
  ipv4: order_by
  ipv6: order_by
  port: order_by
  stakePool: StakePool_order_by
  update_id: order_by
}

"""primary key columns input for table: pool_relay"""
input pool_relay_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_relay"
"""
enum pool_relay_select_column {
  """column name"""
  dnsName

  """column name"""
  dnsSrvName

  """column name"""
  id

  """column name"""
  ipv4

  """column name"""
  ipv6

  """column name"""
  port

  """column name"""
  update_id
}

"""
input type for updating data in table "pool_relay"
"""
input pool_relay_set_input {
  dnsName: String
  dnsSrvName: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""aggregate stddev on columns"""
type pool_relay_stddev_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by stddev() on columns of table "pool_relay"
"""
input pool_relay_stddev_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate stddev_pop on columns"""
type pool_relay_stddev_pop_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by stddev_pop() on columns of table "pool_relay"
"""
input pool_relay_stddev_pop_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate stddev_samp on columns"""
type pool_relay_stddev_samp_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by stddev_samp() on columns of table "pool_relay"
"""
input pool_relay_stddev_samp_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
Streaming cursor of the table "pool_relay"
"""
input pool_relay_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: pool_relay_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input pool_relay_stream_cursor_value_input {
  dnsName: String
  dnsSrvName: String
  id: bigint
  ipv4: String
  ipv6: String
  port: Int
  update_id: bigint
}

"""aggregate sum on columns"""
type pool_relay_sum_fields {
  id: bigint
  port: Int
  update_id: bigint
}

"""
order by sum() on columns of table "pool_relay"
"""
input pool_relay_sum_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
update columns of table "pool_relay"
"""
enum pool_relay_update_column {
  """column name"""
  dnsName

  """column name"""
  dnsSrvName

  """column name"""
  id

  """column name"""
  ipv4

  """column name"""
  ipv6

  """column name"""
  port

  """column name"""
  update_id
}

input pool_relay_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: pool_relay_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: pool_relay_set_input

  """filter the rows which have to be updated"""
  where: pool_relay_bool_exp!
}

"""aggregate var_pop on columns"""
type pool_relay_var_pop_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by var_pop() on columns of table "pool_relay"
"""
input pool_relay_var_pop_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate var_samp on columns"""
type pool_relay_var_samp_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by var_samp() on columns of table "pool_relay"
"""
input pool_relay_var_samp_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""aggregate variance on columns"""
type pool_relay_variance_fields {
  id: Float
  port: Float
  update_id: Float
}

"""
order by variance() on columns of table "pool_relay"
"""
input pool_relay_variance_order_by {
  id: order_by
  port: order_by
  update_id: order_by
}

"""
columns and relationships of "pool_stat"
"""
type pool_stat {
  epoch_no: Int!
  id: bigint!
  number_of_blocks: numeric!
  number_of_delegators: numeric!
  pool_hash_id: bigint!
  stake: numeric!
  voting_power: numeric
}

"""
aggregated selection of "pool_stat"
"""
type pool_stat_aggregate {
  aggregate: pool_stat_aggregate_fields
  nodes: [pool_stat!]!
}

"""
aggregate fields of "pool_stat"
"""
type pool_stat_aggregate_fields {
  avg: pool_stat_avg_fields
  count(columns: [pool_stat_select_column!], distinct: Boolean): Int!
  max: pool_stat_max_fields
  min: pool_stat_min_fields
  stddev: pool_stat_stddev_fields
  stddev_pop: pool_stat_stddev_pop_fields
  stddev_samp: pool_stat_stddev_samp_fields
  sum: pool_stat_sum_fields
  var_pop: pool_stat_var_pop_fields
  var_samp: pool_stat_var_samp_fields
  variance: pool_stat_variance_fields
}

"""aggregate avg on columns"""
type pool_stat_avg_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

"""
Boolean expression to filter rows from the table "pool_stat". All fields are combined with a logical 'AND'.
"""
input pool_stat_bool_exp {
  _and: [pool_stat_bool_exp!]
  _not: pool_stat_bool_exp
  _or: [pool_stat_bool_exp!]
  epoch_no: Int_comparison_exp
  id: bigint_comparison_exp
  number_of_blocks: numeric_comparison_exp
  number_of_delegators: numeric_comparison_exp
  pool_hash_id: bigint_comparison_exp
  stake: numeric_comparison_exp
  voting_power: numeric_comparison_exp
}

"""
unique or primary key constraints on table "pool_stat"
"""
enum pool_stat_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  pool_stat_pkey
}

"""
input type for incrementing numeric columns in table "pool_stat"
"""
input pool_stat_inc_input {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""
input type for inserting data into table "pool_stat"
"""
input pool_stat_insert_input {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""aggregate max on columns"""
type pool_stat_max_fields {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""aggregate min on columns"""
type pool_stat_min_fields {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""
response of any mutation on the table "pool_stat"
"""
type pool_stat_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [pool_stat!]!
}

"""
on_conflict condition type for table "pool_stat"
"""
input pool_stat_on_conflict {
  constraint: pool_stat_constraint!
  update_columns: [pool_stat_update_column!]! = []
  where: pool_stat_bool_exp
}

"""Ordering options when selecting data from "pool_stat"."""
input pool_stat_order_by {
  epoch_no: order_by
  id: order_by
  number_of_blocks: order_by
  number_of_delegators: order_by
  pool_hash_id: order_by
  stake: order_by
  voting_power: order_by
}

"""primary key columns input for table: pool_stat"""
input pool_stat_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pool_stat"
"""
enum pool_stat_select_column {
  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  number_of_blocks

  """column name"""
  number_of_delegators

  """column name"""
  pool_hash_id

  """column name"""
  stake

  """column name"""
  voting_power
}

"""
input type for updating data in table "pool_stat"
"""
input pool_stat_set_input {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""aggregate stddev on columns"""
type pool_stat_stddev_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

"""aggregate stddev_pop on columns"""
type pool_stat_stddev_pop_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

"""aggregate stddev_samp on columns"""
type pool_stat_stddev_samp_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

"""
Streaming cursor of the table "pool_stat"
"""
input pool_stat_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: pool_stat_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input pool_stat_stream_cursor_value_input {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""aggregate sum on columns"""
type pool_stat_sum_fields {
  epoch_no: Int
  id: bigint
  number_of_blocks: numeric
  number_of_delegators: numeric
  pool_hash_id: bigint
  stake: numeric
  voting_power: numeric
}

"""
update columns of table "pool_stat"
"""
enum pool_stat_update_column {
  """column name"""
  epoch_no

  """column name"""
  id

  """column name"""
  number_of_blocks

  """column name"""
  number_of_delegators

  """column name"""
  pool_hash_id

  """column name"""
  stake

  """column name"""
  voting_power
}

input pool_stat_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: pool_stat_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: pool_stat_set_input

  """filter the rows which have to be updated"""
  where: pool_stat_bool_exp!
}

"""aggregate var_pop on columns"""
type pool_stat_var_pop_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

"""aggregate var_samp on columns"""
type pool_stat_var_samp_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

"""aggregate variance on columns"""
type pool_stat_variance_fields {
  epoch_no: Float
  id: Float
  number_of_blocks: Float
  number_of_delegators: Float
  pool_hash_id: Float
  stake: Float
  voting_power: Float
}

type query_root {
  """fetch data from the table: "Asset" using primary key columns"""
  Asset_by_pk(assetId: bytea!): Asset

  """
  fetch aggregated fields from the table: "Cardano"
  """
  Cardano_aggregate(
    """distinct select on columns"""
    distinct_on: [Cardano_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Cardano_order_by!]

    """filter the rows returned"""
    where: Cardano_bool_exp
  ): Cardano_aggregate!

  """
  fetch data from the table: "Datum"
  """
  Datum(
    """distinct select on columns"""
    distinct_on: [Datum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Datum_order_by!]

    """filter the rows returned"""
    where: Datum_bool_exp
  ): [Datum!]!

  """
  fetch aggregated fields from the table: "Datum"
  """
  Datum_aggregate(
    """distinct select on columns"""
    distinct_on: [Datum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Datum_order_by!]

    """filter the rows returned"""
    where: Datum_bool_exp
  ): Datum_aggregate!

  """
  fetch data from the table: "ProtocolParams"
  """
  ProtocolParams(
    """distinct select on columns"""
    distinct_on: [ProtocolParams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ProtocolParams_order_by!]

    """filter the rows returned"""
    where: ProtocolParams_bool_exp
  ): [ProtocolParams!]!

  """
  fetch aggregated fields from the table: "ProtocolParams"
  """
  ProtocolParams_aggregate(
    """distinct select on columns"""
    distinct_on: [ProtocolParams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ProtocolParams_order_by!]

    """filter the rows returned"""
    where: ProtocolParams_bool_exp
  ): ProtocolParams_aggregate!

  """
  fetch data from the table: "RedeemerDatum"
  """
  RedeemerDatum(
    """distinct select on columns"""
    distinct_on: [RedeemerDatum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [RedeemerDatum_order_by!]

    """filter the rows returned"""
    where: RedeemerDatum_bool_exp
  ): [RedeemerDatum!]!

  """
  fetch aggregated fields from the table: "RedeemerDatum"
  """
  RedeemerDatum_aggregate(
    """distinct select on columns"""
    distinct_on: [RedeemerDatum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [RedeemerDatum_order_by!]

    """filter the rows returned"""
    where: RedeemerDatum_bool_exp
  ): RedeemerDatum_aggregate!

  """
  fetch data from the table: "ReferenceInput"
  """
  ReferenceInput(
    """distinct select on columns"""
    distinct_on: [ReferenceInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ReferenceInput_order_by!]

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): [ReferenceInput!]!

  """
  fetch aggregated fields from the table: "ReferenceInput"
  """
  ReferenceInput_aggregate(
    """distinct select on columns"""
    distinct_on: [ReferenceInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ReferenceInput_order_by!]

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): ReferenceInput_aggregate!

  """
  fetch data from the table: "SlotLeader"
  """
  SlotLeader(
    """distinct select on columns"""
    distinct_on: [SlotLeader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [SlotLeader_order_by!]

    """filter the rows returned"""
    where: SlotLeader_bool_exp
  ): [SlotLeader!]!

  """
  fetch aggregated fields from the table: "SlotLeader"
  """
  SlotLeader_aggregate(
    """distinct select on columns"""
    distinct_on: [SlotLeader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [SlotLeader_order_by!]

    """filter the rows returned"""
    where: SlotLeader_bool_exp
  ): SlotLeader_aggregate!

  """
  fetch data from the table: "StakePoolOwner"
  """
  StakePoolOwner(
    """distinct select on columns"""
    distinct_on: [StakePoolOwner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolOwner_order_by!]

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): [StakePoolOwner!]!

  """
  fetch aggregated fields from the table: "StakePoolOwner"
  """
  StakePoolOwner_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePoolOwner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolOwner_order_by!]

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): StakePoolOwner_aggregate!

  """
  fetch data from the table: "StakePoolRetirement"
  """
  StakePoolRetirement(
    """distinct select on columns"""
    distinct_on: [StakePoolRetirement_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolRetirement_order_by!]

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): [StakePoolRetirement!]!

  """
  fetch aggregated fields from the table: "StakePoolRetirement"
  """
  StakePoolRetirement_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePoolRetirement_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolRetirement_order_by!]

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): StakePoolRetirement_aggregate!

  """
  fetch data from the table: "TokenInOutput"
  """
  TokenInOutput(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """
  fetch aggregated fields from the table: "TokenInOutput"
  """
  TokenInOutput_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """
  fetch data from the table: "TransactionInput"
  """
  TransactionInput(
    """distinct select on columns"""
    distinct_on: [TransactionInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionInput_order_by!]

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): [TransactionInput!]!

  """
  fetch aggregated fields from the table: "TransactionInput"
  """
  TransactionInput_aggregate(
    """distinct select on columns"""
    distinct_on: [TransactionInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionInput_order_by!]

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): TransactionInput_aggregate!

  """
  fetch data from the table: "TransactionOutput"
  """
  TransactionOutput(
    """distinct select on columns"""
    distinct_on: [TransactionOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionOutput_order_by!]

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): [TransactionOutput!]!

  """
  fetch aggregated fields from the table: "TransactionOutput"
  """
  TransactionOutput_aggregate(
    """distinct select on columns"""
    distinct_on: [TransactionOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionOutput_order_by!]

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): TransactionOutput_aggregate!

  """An array relationship"""
  activeStake(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): [ActiveStake!]!

  """An aggregate relationship"""
  activeStake_aggregate(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): ActiveStake_aggregate!

  """
  fetch data from the table: "ada_pots"
  """
  ada_pots(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): [ada_pots!]!

  """
  fetch aggregated fields from the table: "ada_pots"
  """
  ada_pots_aggregate(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): ada_pots_aggregate!

  """fetch data from the table: "ada_pots" using primary key columns"""
  ada_pots_by_pk(id: bigint!): ada_pots

  """
  fetch data from the table: "Asset"
  """
  assets(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): [Asset!]!

  """
  fetch aggregated fields from the table: "Asset"
  """
  assets_aggregate(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): Asset_aggregate!

  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): [Block!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): Block_aggregate!

  """
  fetch data from the table: "Cardano"
  """
  cardano(
    """distinct select on columns"""
    distinct_on: [Cardano_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Cardano_order_by!]

    """filter the rows returned"""
    where: Cardano_bool_exp
  ): [Cardano!]!

  """An array relationship"""
  collateralInputs(
    """distinct select on columns"""
    distinct_on: [CollateralInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralInput_order_by!]

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): [CollateralInput!]!

  """An aggregate relationship"""
  collateralInputs_aggregate(
    """distinct select on columns"""
    distinct_on: [CollateralInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralInput_order_by!]

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): CollateralInput_aggregate!

  """An array relationship"""
  collateralOutputs(
    """distinct select on columns"""
    distinct_on: [CollateralOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralOutput_order_by!]

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): [CollateralOutput!]!

  """An aggregate relationship"""
  collateralOutputs_aggregate(
    """distinct select on columns"""
    distinct_on: [CollateralOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralOutput_order_by!]

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): CollateralOutput_aggregate!

  """
  fetch data from the table: "committee"
  """
  committee(
    """distinct select on columns"""
    distinct_on: [committee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_order_by!]

    """filter the rows returned"""
    where: committee_bool_exp
  ): [committee!]!

  """
  fetch data from the table: "committee_de_registration"
  """
  committeeDeRegistration(
    """distinct select on columns"""
    distinct_on: [committee_de_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_de_registration_order_by!]

    """filter the rows returned"""
    where: committee_de_registration_bool_exp
  ): [committee_de_registration!]!

  """
  fetch aggregated fields from the table: "committee_de_registration"
  """
  committeeDeRegistration_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_de_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_de_registration_order_by!]

    """filter the rows returned"""
    where: committee_de_registration_bool_exp
  ): committee_de_registration_aggregate!

  """
  fetch data from the table: "committee_hash"
  """
  committeeHash(
    """distinct select on columns"""
    distinct_on: [committee_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_hash_order_by!]

    """filter the rows returned"""
    where: committee_hash_bool_exp
  ): [committee_hash!]!

  """
  fetch aggregated fields from the table: "committee_hash"
  """
  committeeHash_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_hash_order_by!]

    """filter the rows returned"""
    where: committee_hash_bool_exp
  ): committee_hash_aggregate!

  """
  fetch data from the table: "committee_member"
  """
  committeeMember(
    """distinct select on columns"""
    distinct_on: [committee_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_member_order_by!]

    """filter the rows returned"""
    where: committee_member_bool_exp
  ): [committee_member!]!

  """
  fetch aggregated fields from the table: "committee_member"
  """
  committeeMember_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_member_order_by!]

    """filter the rows returned"""
    where: committee_member_bool_exp
  ): committee_member_aggregate!

  """
  fetch data from the table: "committee_registration"
  """
  committeeRegistration(
    """distinct select on columns"""
    distinct_on: [committee_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_registration_order_by!]

    """filter the rows returned"""
    where: committee_registration_bool_exp
  ): [committee_registration!]!

  """
  fetch aggregated fields from the table: "committee_registration"
  """
  committeeRegistration_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_registration_order_by!]

    """filter the rows returned"""
    where: committee_registration_bool_exp
  ): committee_registration_aggregate!

  """
  fetch aggregated fields from the table: "committee"
  """
  committee_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_order_by!]

    """filter the rows returned"""
    where: committee_bool_exp
  ): committee_aggregate!

  """fetch data from the table: "committee" using primary key columns"""
  committee_by_pk(id: bigint!): committee

  """
  fetch data from the table: "committee_de_registration" using primary key columns
  """
  committee_de_registration_by_pk(id: bigint!): committee_de_registration

  """fetch data from the table: "committee_hash" using primary key columns"""
  committee_hash_by_pk(id: bigint!): committee_hash

  """
  fetch data from the table: "committee_member" using primary key columns
  """
  committee_member_by_pk(id: bigint!): committee_member

  """
  fetch data from the table: "committee_registration" using primary key columns
  """
  committee_registration_by_pk(id: bigint!): committee_registration

  """
  fetch data from the table: "DelegationVote"
  """
  delegationVotes(
    """distinct select on columns"""
    distinct_on: [DelegationVote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DelegationVote_order_by!]

    """filter the rows returned"""
    where: DelegationVote_bool_exp
  ): [DelegationVote!]!

  """
  fetch aggregated fields from the table: "DelegationVote"
  """
  delegationVotes_aggregate(
    """distinct select on columns"""
    distinct_on: [DelegationVote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DelegationVote_order_by!]

    """filter the rows returned"""
    where: DelegationVote_bool_exp
  ): DelegationVote_aggregate!

  """
  fetch data from the table: "Delegation"
  """
  delegations(
    """distinct select on columns"""
    distinct_on: [Delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Delegation_order_by!]

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): [Delegation!]!

  """
  fetch aggregated fields from the table: "Delegation"
  """
  delegations_aggregate(
    """distinct select on columns"""
    distinct_on: [Delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Delegation_order_by!]

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): Delegation_aggregate!

  """
  fetch data from the table: "drep_hash"
  """
  drepHash(
    """distinct select on columns"""
    distinct_on: [drep_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_hash_order_by!]

    """filter the rows returned"""
    where: drep_hash_bool_exp
  ): [drep_hash!]!

  """
  fetch aggregated fields from the table: "drep_hash"
  """
  drepHash_aggregate(
    """distinct select on columns"""
    distinct_on: [drep_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_hash_order_by!]

    """filter the rows returned"""
    where: drep_hash_bool_exp
  ): drep_hash_aggregate!

  """
  fetch data from the table: "DrepRegistration"
  """
  drepRegistrations(
    """distinct select on columns"""
    distinct_on: [DrepRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DrepRegistration_order_by!]

    """filter the rows returned"""
    where: DrepRegistration_bool_exp
  ): [DrepRegistration!]!

  """
  fetch aggregated fields from the table: "DrepRegistration"
  """
  drepRegistrations_aggregate(
    """distinct select on columns"""
    distinct_on: [DrepRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DrepRegistration_order_by!]

    """filter the rows returned"""
    where: DrepRegistration_bool_exp
  ): DrepRegistration_aggregate!

  """
  fetch data from the table: "drep_distr"
  """
  drep_distr(
    """distinct select on columns"""
    distinct_on: [drep_distr_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_distr_order_by!]

    """filter the rows returned"""
    where: drep_distr_bool_exp
  ): [drep_distr!]!

  """
  fetch aggregated fields from the table: "drep_distr"
  """
  drep_distr_aggregate(
    """distinct select on columns"""
    distinct_on: [drep_distr_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_distr_order_by!]

    """filter the rows returned"""
    where: drep_distr_bool_exp
  ): drep_distr_aggregate!

  """fetch data from the table: "drep_distr" using primary key columns"""
  drep_distr_by_pk(id: bigint!): drep_distr

  """fetch data from the table: "drep_hash" using primary key columns"""
  drep_hash_by_pk(id: bigint!): drep_hash

  """
  fetch data from the table: "epoch_param"
  """
  epoch_param(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): [epoch_param!]!

  """
  fetch aggregated fields from the table: "epoch_param"
  """
  epoch_param_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): epoch_param_aggregate!

  """fetch data from the table: "epoch_param" using primary key columns"""
  epoch_param_by_pk(id: bigint!): epoch_param

  """
  fetch data from the table: "Epoch"
  """
  epochs(
    """distinct select on columns"""
    distinct_on: [Epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Epoch_order_by!]

    """filter the rows returned"""
    where: Epoch_bool_exp
  ): [Epoch!]!

  """
  fetch aggregated fields from the table: "Epoch"
  """
  epochs_aggregate(
    """distinct select on columns"""
    distinct_on: [Epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Epoch_order_by!]

    """filter the rows returned"""
    where: Epoch_bool_exp
  ): Epoch_aggregate!

  """
  fetch data from the table: "gov_action_proposal"
  """
  govActionProposal(
    """distinct select on columns"""
    distinct_on: [gov_action_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gov_action_proposal_order_by!]

    """filter the rows returned"""
    where: gov_action_proposal_bool_exp
  ): [gov_action_proposal!]!

  """
  fetch aggregated fields from the table: "gov_action_proposal"
  """
  govActionProposal_aggregate(
    """distinct select on columns"""
    distinct_on: [gov_action_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gov_action_proposal_order_by!]

    """filter the rows returned"""
    where: gov_action_proposal_bool_exp
  ): gov_action_proposal_aggregate!

  """
  fetch data from the table: "gov_action_proposal" using primary key columns
  """
  gov_action_proposal_by_pk(id: bigint!): gov_action_proposal

  """
  fetch data from the table: "off_chain_vote_author"
  """
  offChainVoteAuthor(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_author_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_author_bool_exp
  ): [off_chain_vote_author!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_author"
  """
  offChainVoteAuthor_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_author_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_author_bool_exp
  ): off_chain_vote_author_aggregate!

  """
  fetch data from the table: "off_chain_vote_data"
  """
  offChainVoteData(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_data_bool_exp
  ): [off_chain_vote_data!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_data"
  """
  offChainVoteData_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_data_bool_exp
  ): off_chain_vote_data_aggregate!

  """
  fetch data from the table: "off_chain_vote_drep_data"
  """
  offChainVoteDrepData(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_drep_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_drep_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_drep_data_bool_exp
  ): [off_chain_vote_drep_data!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_drep_data"
  """
  offChainVoteDrepData_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_drep_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_drep_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_drep_data_bool_exp
  ): off_chain_vote_drep_data_aggregate!

  """
  fetch data from the table: "off_chain_vote_gov_action_data"
  """
  offChainVoteGovActionData(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_gov_action_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_gov_action_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_gov_action_data_bool_exp
  ): [off_chain_vote_gov_action_data!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_gov_action_data"
  """
  offChainVoteGovActionData_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_gov_action_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_gov_action_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_gov_action_data_bool_exp
  ): off_chain_vote_gov_action_data_aggregate!

  """
  fetch data from the table: "off_chain_vote_reference"
  """
  offChainVoteReference(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_reference_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_reference_bool_exp
  ): [off_chain_vote_reference!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_reference"
  """
  offChainVoteReference_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_reference_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_reference_bool_exp
  ): off_chain_vote_reference_aggregate!

  """
  fetch data from the table: "off_chain_vote_author" using primary key columns
  """
  off_chain_vote_author_by_pk(id: bigint!): off_chain_vote_author

  """
  fetch data from the table: "off_chain_vote_data" using primary key columns
  """
  off_chain_vote_data_by_pk(id: bigint!): off_chain_vote_data

  """
  fetch data from the table: "off_chain_vote_drep_data" using primary key columns
  """
  off_chain_vote_drep_data_by_pk(id: bigint!): off_chain_vote_drep_data

  """
  fetch data from the table: "off_chain_vote_gov_action_data" using primary key columns
  """
  off_chain_vote_gov_action_data_by_pk(id: bigint!): off_chain_vote_gov_action_data

  """
  fetch data from the table: "off_chain_vote_reference" using primary key columns
  """
  off_chain_vote_reference_by_pk(id: bigint!): off_chain_vote_reference

  """
  fetch data from the table: "pool_hash"
  """
  pool_hash(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): [pool_hash!]!

  """
  fetch aggregated fields from the table: "pool_hash"
  """
  pool_hash_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): pool_hash_aggregate!

  """fetch data from the table: "pool_hash" using primary key columns"""
  pool_hash_by_pk(id: bigint!): pool_hash

  """
  fetch data from the table: "pool_relay"
  """
  pool_relay(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): [pool_relay!]!

  """
  fetch aggregated fields from the table: "pool_relay"
  """
  pool_relay_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): pool_relay_aggregate!

  """fetch data from the table: "pool_relay" using primary key columns"""
  pool_relay_by_pk(id: bigint!): pool_relay

  """
  fetch data from the table: "pool_stat"
  """
  pool_stat(
    """distinct select on columns"""
    distinct_on: [pool_stat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_stat_order_by!]

    """filter the rows returned"""
    where: pool_stat_bool_exp
  ): [pool_stat!]!

  """
  fetch aggregated fields from the table: "pool_stat"
  """
  pool_stat_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_stat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_stat_order_by!]

    """filter the rows returned"""
    where: pool_stat_bool_exp
  ): pool_stat_aggregate!

  """fetch data from the table: "pool_stat" using primary key columns"""
  pool_stat_by_pk(id: bigint!): pool_stat

  """An array relationship"""
  redeemers(
    """distinct select on columns"""
    distinct_on: [Redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Redeemer_order_by!]

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): [Redeemer!]!

  """An aggregate relationship"""
  redeemers_aggregate(
    """distinct select on columns"""
    distinct_on: [Redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Redeemer_order_by!]

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): Redeemer_aggregate!

  """
  fetch data from the table: "reserve"
  """
  reserve(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): [reserve!]!

  """
  fetch aggregated fields from the table: "reserve"
  """
  reserve_aggregate(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): reserve_aggregate!

  """fetch data from the table: "reserve" using primary key columns"""
  reserve_by_pk(id: bigint!): reserve

  """An array relationship"""
  rewards(
    """distinct select on columns"""
    distinct_on: [Reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Reward_order_by!]

    """filter the rows returned"""
    where: Reward_bool_exp
  ): [Reward!]!

  """An aggregate relationship"""
  rewards_aggregate(
    """distinct select on columns"""
    distinct_on: [Reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Reward_order_by!]

    """filter the rows returned"""
    where: Reward_bool_exp
  ): Reward_aggregate!

  """An array relationship"""
  scripts(
    """distinct select on columns"""
    distinct_on: [Script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Script_order_by!]

    """filter the rows returned"""
    where: Script_bool_exp
  ): [Script!]!

  """An aggregate relationship"""
  scripts_aggregate(
    """distinct select on columns"""
    distinct_on: [Script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Script_order_by!]

    """filter the rows returned"""
    where: Script_bool_exp
  ): Script_aggregate!

  """
  fetch data from the table: "StakeDeregistration"
  """
  stakeDeregistrations(
    """distinct select on columns"""
    distinct_on: [StakeDeregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeDeregistration_order_by!]

    """filter the rows returned"""
    where: StakeDeregistration_bool_exp
  ): [StakeDeregistration!]!

  """
  fetch aggregated fields from the table: "StakeDeregistration"
  """
  stakeDeregistrations_aggregate(
    """distinct select on columns"""
    distinct_on: [StakeDeregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeDeregistration_order_by!]

    """filter the rows returned"""
    where: StakeDeregistration_bool_exp
  ): StakeDeregistration_aggregate!

  """
  fetch data from the table: "StakePool"
  """
  stakePools(
    """distinct select on columns"""
    distinct_on: [StakePool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePool_order_by!]

    """filter the rows returned"""
    where: StakePool_bool_exp
  ): [StakePool!]!

  """
  fetch aggregated fields from the table: "StakePool"
  """
  stakePools_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePool_order_by!]

    """filter the rows returned"""
    where: StakePool_bool_exp
  ): StakePool_aggregate!

  """
  fetch data from the table: "StakeRegistration"
  """
  stakeRegistrations(
    """distinct select on columns"""
    distinct_on: [StakeRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeRegistration_order_by!]

    """filter the rows returned"""
    where: StakeRegistration_bool_exp
  ): [StakeRegistration!]!

  """
  fetch aggregated fields from the table: "StakeRegistration"
  """
  stakeRegistrations_aggregate(
    """distinct select on columns"""
    distinct_on: [StakeRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeRegistration_order_by!]

    """filter the rows returned"""
    where: StakeRegistration_bool_exp
  ): StakeRegistration_aggregate!

  """
  fetch data from the table: "stake_address"
  """
  stake_address(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): [stake_address!]!

  """
  fetch aggregated fields from the table: "stake_address"
  """
  stake_address_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): stake_address_aggregate!

  """fetch data from the table: "stake_address" using primary key columns"""
  stake_address_by_pk(id: bigint!): stake_address

  """An array relationship"""
  tokenMints(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): [TokenMint!]!

  """An aggregate relationship"""
  tokenMints_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): TokenMint_aggregate!

  """An array relationship"""
  transactions(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!

  """An aggregate relationship"""
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): Transaction_aggregate!

  """
  fetch data from the table: "treasury_withdrawal"
  """
  treasury_withdrawal(
    """distinct select on columns"""
    distinct_on: [treasury_withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_withdrawal_order_by!]

    """filter the rows returned"""
    where: treasury_withdrawal_bool_exp
  ): [treasury_withdrawal!]!

  """
  fetch aggregated fields from the table: "treasury_withdrawal"
  """
  treasury_withdrawal_aggregate(
    """distinct select on columns"""
    distinct_on: [treasury_withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_withdrawal_order_by!]

    """filter the rows returned"""
    where: treasury_withdrawal_bool_exp
  ): treasury_withdrawal_aggregate!

  """
  fetch data from the table: "treasury_withdrawal" using primary key columns
  """
  treasury_withdrawal_by_pk(id: bigint!): treasury_withdrawal

  """
  fetch data from the table: "tx"
  """
  tx(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): [tx!]!

  """
  fetch aggregated fields from the table: "tx"
  """
  tx_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): tx_aggregate!

  """fetch data from the table: "tx" using primary key columns"""
  tx_by_pk(id: bigint!): tx

  """
  fetch data from the table: "tx_metadata"
  """
  tx_metadata(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): [tx_metadata!]!

  """
  fetch aggregated fields from the table: "tx_metadata"
  """
  tx_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): tx_metadata_aggregate!

  """fetch data from the table: "tx_metadata" using primary key columns"""
  tx_metadata_by_pk(id: bigint!): tx_metadata

  """
  fetch data from the table: "Utxo"
  """
  utxos(
    """distinct select on columns"""
    distinct_on: [Utxo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Utxo_order_by!]

    """filter the rows returned"""
    where: Utxo_bool_exp
  ): [Utxo!]!

  """
  fetch aggregated fields from the table: "Utxo"
  """
  utxos_aggregate(
    """distinct select on columns"""
    distinct_on: [Utxo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Utxo_order_by!]

    """filter the rows returned"""
    where: Utxo_bool_exp
  ): Utxo_aggregate!

  """
  fetch data from the table: "voting_procedure"
  """
  voteProcedure(
    """distinct select on columns"""
    distinct_on: [voting_procedure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_procedure_order_by!]

    """filter the rows returned"""
    where: voting_procedure_bool_exp
  ): [voting_procedure!]!

  """
  fetch aggregated fields from the table: "voting_procedure"
  """
  voteProcedure_aggregate(
    """distinct select on columns"""
    distinct_on: [voting_procedure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_procedure_order_by!]

    """filter the rows returned"""
    where: voting_procedure_bool_exp
  ): voting_procedure_aggregate!

  """
  fetch data from the table: "voting_anchor"
  """
  votingAnchor(
    """distinct select on columns"""
    distinct_on: [voting_anchor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_anchor_order_by!]

    """filter the rows returned"""
    where: voting_anchor_bool_exp
  ): [voting_anchor!]!

  """
  fetch aggregated fields from the table: "voting_anchor"
  """
  votingAnchor_aggregate(
    """distinct select on columns"""
    distinct_on: [voting_anchor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_anchor_order_by!]

    """filter the rows returned"""
    where: voting_anchor_bool_exp
  ): voting_anchor_aggregate!

  """fetch data from the table: "voting_anchor" using primary key columns"""
  voting_anchor_by_pk(id: bigint!): voting_anchor

  """
  fetch data from the table: "voting_procedure" using primary key columns
  """
  voting_procedure_by_pk(id: bigint!): voting_procedure

  """An array relationship"""
  withdrawals(
    """distinct select on columns"""
    distinct_on: [Withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Withdrawal_order_by!]

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): [Withdrawal!]!

  """An aggregate relationship"""
  withdrawals_aggregate(
    """distinct select on columns"""
    distinct_on: [Withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Withdrawal_order_by!]

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): Withdrawal_aggregate!
}

"""
columns and relationships of "reserve"
"""
type reserve {
  addr_id: bigint!
  amount: numeric!
  cert_index: Int!
  id: bigint!
  tx_id: bigint!
}

"""
aggregated selection of "reserve"
"""
type reserve_aggregate {
  aggregate: reserve_aggregate_fields
  nodes: [reserve!]!
}

"""
aggregate fields of "reserve"
"""
type reserve_aggregate_fields {
  avg: reserve_avg_fields
  count(columns: [reserve_select_column!], distinct: Boolean): Int!
  max: reserve_max_fields
  min: reserve_min_fields
  stddev: reserve_stddev_fields
  stddev_pop: reserve_stddev_pop_fields
  stddev_samp: reserve_stddev_samp_fields
  sum: reserve_sum_fields
  var_pop: reserve_var_pop_fields
  var_samp: reserve_var_samp_fields
  variance: reserve_variance_fields
}

"""aggregate avg on columns"""
type reserve_avg_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
Boolean expression to filter rows from the table "reserve". All fields are combined with a logical 'AND'.
"""
input reserve_bool_exp {
  _and: [reserve_bool_exp!]
  _not: reserve_bool_exp
  _or: [reserve_bool_exp!]
  addr_id: bigint_comparison_exp
  amount: numeric_comparison_exp
  cert_index: Int_comparison_exp
  id: bigint_comparison_exp
  tx_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "reserve"
"""
enum reserve_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  reserve_pkey

  """
  unique or primary key constraint on columns "cert_index", "addr_id", "tx_id"
  """
  unique_reserves
}

"""
input type for incrementing numeric columns in table "reserve"
"""
input reserve_inc_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
input type for inserting data into table "reserve"
"""
input reserve_insert_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate max on columns"""
type reserve_max_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate min on columns"""
type reserve_min_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
response of any mutation on the table "reserve"
"""
type reserve_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [reserve!]!
}

"""
on_conflict condition type for table "reserve"
"""
input reserve_on_conflict {
  constraint: reserve_constraint!
  update_columns: [reserve_update_column!]! = []
  where: reserve_bool_exp
}

"""Ordering options when selecting data from "reserve"."""
input reserve_order_by {
  addr_id: order_by
  amount: order_by
  cert_index: order_by
  id: order_by
  tx_id: order_by
}

"""primary key columns input for table: reserve"""
input reserve_pk_columns_input {
  id: bigint!
}

"""
select columns of table "reserve"
"""
enum reserve_select_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  tx_id
}

"""
input type for updating data in table "reserve"
"""
input reserve_set_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate stddev on columns"""
type reserve_stddev_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""aggregate stddev_pop on columns"""
type reserve_stddev_pop_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""aggregate stddev_samp on columns"""
type reserve_stddev_samp_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""
Streaming cursor of the table "reserve"
"""
input reserve_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: reserve_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input reserve_stream_cursor_value_input {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""aggregate sum on columns"""
type reserve_sum_fields {
  addr_id: bigint
  amount: numeric
  cert_index: Int
  id: bigint
  tx_id: bigint
}

"""
update columns of table "reserve"
"""
enum reserve_update_column {
  """column name"""
  addr_id

  """column name"""
  amount

  """column name"""
  cert_index

  """column name"""
  id

  """column name"""
  tx_id
}

input reserve_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: reserve_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: reserve_set_input

  """filter the rows which have to be updated"""
  where: reserve_bool_exp!
}

"""aggregate var_pop on columns"""
type reserve_var_pop_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""aggregate var_samp on columns"""
type reserve_var_samp_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

"""aggregate variance on columns"""
type reserve_variance_fields {
  addr_id: Float
  amount: Float
  cert_index: Float
  id: Float
  tx_id: Float
}

scalar rewardtype

"""
Boolean expression to compare columns of type "rewardtype". All fields are combined with logical 'AND'.
"""
input rewardtype_comparison_exp {
  _eq: rewardtype
  _gt: rewardtype
  _gte: rewardtype
  _in: [rewardtype!]
  _is_null: Boolean
  _lt: rewardtype
  _lte: rewardtype
  _neq: rewardtype
  _nin: [rewardtype!]
}

scalar scriptpurposetype

"""
Boolean expression to compare columns of type "scriptpurposetype". All fields are combined with logical 'AND'.
"""
input scriptpurposetype_comparison_exp {
  _eq: scriptpurposetype
  _gt: scriptpurposetype
  _gte: scriptpurposetype
  _in: [scriptpurposetype!]
  _is_null: Boolean
  _lt: scriptpurposetype
  _lte: scriptpurposetype
  _neq: scriptpurposetype
  _nin: [scriptpurposetype!]
}

scalar scripttype

"""
Boolean expression to compare columns of type "scripttype". All fields are combined with logical 'AND'.
"""
input scripttype_comparison_exp {
  _eq: scripttype
  _gt: scripttype
  _gte: scripttype
  _in: [scripttype!]
  _is_null: Boolean
  _lt: scripttype
  _lte: scripttype
  _neq: scripttype
  _nin: [scripttype!]
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

"""
columns and relationships of "stake_address"
"""
type stake_address {
  hash_raw: bytea!
  id: bigint!
  script_hash: bytea
  view: String!
}

"""
aggregated selection of "stake_address"
"""
type stake_address_aggregate {
  aggregate: stake_address_aggregate_fields
  nodes: [stake_address!]!
}

"""
aggregate fields of "stake_address"
"""
type stake_address_aggregate_fields {
  avg: stake_address_avg_fields
  count(columns: [stake_address_select_column!], distinct: Boolean): Int!
  max: stake_address_max_fields
  min: stake_address_min_fields
  stddev: stake_address_stddev_fields
  stddev_pop: stake_address_stddev_pop_fields
  stddev_samp: stake_address_stddev_samp_fields
  sum: stake_address_sum_fields
  var_pop: stake_address_var_pop_fields
  var_samp: stake_address_var_samp_fields
  variance: stake_address_variance_fields
}

"""aggregate avg on columns"""
type stake_address_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "stake_address". All fields are combined with a logical 'AND'.
"""
input stake_address_bool_exp {
  _and: [stake_address_bool_exp!]
  _not: stake_address_bool_exp
  _or: [stake_address_bool_exp!]
  hash_raw: bytea_comparison_exp
  id: bigint_comparison_exp
  script_hash: bytea_comparison_exp
  view: String_comparison_exp
}

"""
unique or primary key constraints on table "stake_address"
"""
enum stake_address_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  stake_address_pkey

  """
  unique or primary key constraint on columns "hash_raw"
  """
  unique_stake_address
}

"""
input type for incrementing numeric columns in table "stake_address"
"""
input stake_address_inc_input {
  id: bigint
}

"""
input type for inserting data into table "stake_address"
"""
input stake_address_insert_input {
  hash_raw: bytea
  id: bigint
  script_hash: bytea
  view: String
}

"""aggregate max on columns"""
type stake_address_max_fields {
  id: bigint
  view: String
}

"""aggregate min on columns"""
type stake_address_min_fields {
  id: bigint
  view: String
}

"""
response of any mutation on the table "stake_address"
"""
type stake_address_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [stake_address!]!
}

"""
input type for inserting object relation for remote table "stake_address"
"""
input stake_address_obj_rel_insert_input {
  data: stake_address_insert_input!

  """upsert condition"""
  on_conflict: stake_address_on_conflict
}

"""
on_conflict condition type for table "stake_address"
"""
input stake_address_on_conflict {
  constraint: stake_address_constraint!
  update_columns: [stake_address_update_column!]! = []
  where: stake_address_bool_exp
}

"""Ordering options when selecting data from "stake_address"."""
input stake_address_order_by {
  hash_raw: order_by
  id: order_by
  script_hash: order_by
  view: order_by
}

"""primary key columns input for table: stake_address"""
input stake_address_pk_columns_input {
  id: bigint!
}

"""
select columns of table "stake_address"
"""
enum stake_address_select_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  script_hash

  """column name"""
  view
}

"""
input type for updating data in table "stake_address"
"""
input stake_address_set_input {
  hash_raw: bytea
  id: bigint
  script_hash: bytea
  view: String
}

"""aggregate stddev on columns"""
type stake_address_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type stake_address_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type stake_address_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "stake_address"
"""
input stake_address_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: stake_address_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input stake_address_stream_cursor_value_input {
  hash_raw: bytea
  id: bigint
  script_hash: bytea
  view: String
}

"""aggregate sum on columns"""
type stake_address_sum_fields {
  id: bigint
}

"""
update columns of table "stake_address"
"""
enum stake_address_update_column {
  """column name"""
  hash_raw

  """column name"""
  id

  """column name"""
  script_hash

  """column name"""
  view
}

input stake_address_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: stake_address_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: stake_address_set_input

  """filter the rows which have to be updated"""
  where: stake_address_bool_exp!
}

"""aggregate var_pop on columns"""
type stake_address_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type stake_address_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type stake_address_variance_fields {
  id: Float
}

type subscription_root {
  """
  fetch data from the table in a streaming manner: "ActiveStake"
  """
  ActiveStake_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ActiveStake_stream_cursor_input]!

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): [ActiveStake!]!

  """fetch data from the table: "Asset" using primary key columns"""
  Asset_by_pk(assetId: bytea!): Asset

  """
  fetch data from the table in a streaming manner: "Asset"
  """
  Asset_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Asset_stream_cursor_input]!

    """filter the rows returned"""
    where: Asset_bool_exp
  ): [Asset!]!

  """
  fetch data from the table in a streaming manner: "Block"
  """
  Block_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Block_stream_cursor_input]!

    """filter the rows returned"""
    where: Block_bool_exp
  ): [Block!]!

  """
  fetch aggregated fields from the table: "Cardano"
  """
  Cardano_aggregate(
    """distinct select on columns"""
    distinct_on: [Cardano_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Cardano_order_by!]

    """filter the rows returned"""
    where: Cardano_bool_exp
  ): Cardano_aggregate!

  """
  fetch data from the table in a streaming manner: "Cardano"
  """
  Cardano_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Cardano_stream_cursor_input]!

    """filter the rows returned"""
    where: Cardano_bool_exp
  ): [Cardano!]!

  """
  fetch data from the table in a streaming manner: "CollateralInput"
  """
  CollateralInput_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CollateralInput_stream_cursor_input]!

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): [CollateralInput!]!

  """
  fetch data from the table in a streaming manner: "CollateralOutput"
  """
  CollateralOutput_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CollateralOutput_stream_cursor_input]!

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): [CollateralOutput!]!

  """
  fetch data from the table: "Datum"
  """
  Datum(
    """distinct select on columns"""
    distinct_on: [Datum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Datum_order_by!]

    """filter the rows returned"""
    where: Datum_bool_exp
  ): [Datum!]!

  """
  fetch aggregated fields from the table: "Datum"
  """
  Datum_aggregate(
    """distinct select on columns"""
    distinct_on: [Datum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Datum_order_by!]

    """filter the rows returned"""
    where: Datum_bool_exp
  ): Datum_aggregate!

  """
  fetch data from the table in a streaming manner: "Datum"
  """
  Datum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Datum_stream_cursor_input]!

    """filter the rows returned"""
    where: Datum_bool_exp
  ): [Datum!]!

  """
  fetch data from the table in a streaming manner: "DelegationVote"
  """
  DelegationVote_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [DelegationVote_stream_cursor_input]!

    """filter the rows returned"""
    where: DelegationVote_bool_exp
  ): [DelegationVote!]!

  """
  fetch data from the table in a streaming manner: "Delegation"
  """
  Delegation_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Delegation_stream_cursor_input]!

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): [Delegation!]!

  """
  fetch data from the table in a streaming manner: "DrepRegistration"
  """
  DrepRegistration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [DrepRegistration_stream_cursor_input]!

    """filter the rows returned"""
    where: DrepRegistration_bool_exp
  ): [DrepRegistration!]!

  """
  fetch data from the table in a streaming manner: "Epoch"
  """
  Epoch_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Epoch_stream_cursor_input]!

    """filter the rows returned"""
    where: Epoch_bool_exp
  ): [Epoch!]!

  """
  fetch data from the table: "ProtocolParams"
  """
  ProtocolParams(
    """distinct select on columns"""
    distinct_on: [ProtocolParams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ProtocolParams_order_by!]

    """filter the rows returned"""
    where: ProtocolParams_bool_exp
  ): [ProtocolParams!]!

  """
  fetch aggregated fields from the table: "ProtocolParams"
  """
  ProtocolParams_aggregate(
    """distinct select on columns"""
    distinct_on: [ProtocolParams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ProtocolParams_order_by!]

    """filter the rows returned"""
    where: ProtocolParams_bool_exp
  ): ProtocolParams_aggregate!

  """
  fetch data from the table in a streaming manner: "ProtocolParams"
  """
  ProtocolParams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ProtocolParams_stream_cursor_input]!

    """filter the rows returned"""
    where: ProtocolParams_bool_exp
  ): [ProtocolParams!]!

  """
  fetch data from the table: "RedeemerDatum"
  """
  RedeemerDatum(
    """distinct select on columns"""
    distinct_on: [RedeemerDatum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [RedeemerDatum_order_by!]

    """filter the rows returned"""
    where: RedeemerDatum_bool_exp
  ): [RedeemerDatum!]!

  """
  fetch aggregated fields from the table: "RedeemerDatum"
  """
  RedeemerDatum_aggregate(
    """distinct select on columns"""
    distinct_on: [RedeemerDatum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [RedeemerDatum_order_by!]

    """filter the rows returned"""
    where: RedeemerDatum_bool_exp
  ): RedeemerDatum_aggregate!

  """
  fetch data from the table in a streaming manner: "RedeemerDatum"
  """
  RedeemerDatum_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [RedeemerDatum_stream_cursor_input]!

    """filter the rows returned"""
    where: RedeemerDatum_bool_exp
  ): [RedeemerDatum!]!

  """
  fetch data from the table in a streaming manner: "Redeemer"
  """
  Redeemer_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Redeemer_stream_cursor_input]!

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): [Redeemer!]!

  """
  fetch data from the table: "ReferenceInput"
  """
  ReferenceInput(
    """distinct select on columns"""
    distinct_on: [ReferenceInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ReferenceInput_order_by!]

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): [ReferenceInput!]!

  """
  fetch aggregated fields from the table: "ReferenceInput"
  """
  ReferenceInput_aggregate(
    """distinct select on columns"""
    distinct_on: [ReferenceInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ReferenceInput_order_by!]

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): ReferenceInput_aggregate!

  """
  fetch data from the table in a streaming manner: "ReferenceInput"
  """
  ReferenceInput_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ReferenceInput_stream_cursor_input]!

    """filter the rows returned"""
    where: ReferenceInput_bool_exp
  ): [ReferenceInput!]!

  """
  fetch data from the table in a streaming manner: "Reward"
  """
  Reward_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Reward_stream_cursor_input]!

    """filter the rows returned"""
    where: Reward_bool_exp
  ): [Reward!]!

  """
  fetch data from the table in a streaming manner: "Script"
  """
  Script_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Script_stream_cursor_input]!

    """filter the rows returned"""
    where: Script_bool_exp
  ): [Script!]!

  """
  fetch data from the table: "SlotLeader"
  """
  SlotLeader(
    """distinct select on columns"""
    distinct_on: [SlotLeader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [SlotLeader_order_by!]

    """filter the rows returned"""
    where: SlotLeader_bool_exp
  ): [SlotLeader!]!

  """
  fetch aggregated fields from the table: "SlotLeader"
  """
  SlotLeader_aggregate(
    """distinct select on columns"""
    distinct_on: [SlotLeader_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [SlotLeader_order_by!]

    """filter the rows returned"""
    where: SlotLeader_bool_exp
  ): SlotLeader_aggregate!

  """
  fetch data from the table in a streaming manner: "SlotLeader"
  """
  SlotLeader_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [SlotLeader_stream_cursor_input]!

    """filter the rows returned"""
    where: SlotLeader_bool_exp
  ): [SlotLeader!]!

  """
  fetch data from the table in a streaming manner: "StakeDeregistration"
  """
  StakeDeregistration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [StakeDeregistration_stream_cursor_input]!

    """filter the rows returned"""
    where: StakeDeregistration_bool_exp
  ): [StakeDeregistration!]!

  """
  fetch data from the table: "StakePoolOwner"
  """
  StakePoolOwner(
    """distinct select on columns"""
    distinct_on: [StakePoolOwner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolOwner_order_by!]

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): [StakePoolOwner!]!

  """
  fetch aggregated fields from the table: "StakePoolOwner"
  """
  StakePoolOwner_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePoolOwner_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolOwner_order_by!]

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): StakePoolOwner_aggregate!

  """
  fetch data from the table in a streaming manner: "StakePoolOwner"
  """
  StakePoolOwner_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [StakePoolOwner_stream_cursor_input]!

    """filter the rows returned"""
    where: StakePoolOwner_bool_exp
  ): [StakePoolOwner!]!

  """
  fetch data from the table: "StakePoolRetirement"
  """
  StakePoolRetirement(
    """distinct select on columns"""
    distinct_on: [StakePoolRetirement_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolRetirement_order_by!]

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): [StakePoolRetirement!]!

  """
  fetch aggregated fields from the table: "StakePoolRetirement"
  """
  StakePoolRetirement_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePoolRetirement_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePoolRetirement_order_by!]

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): StakePoolRetirement_aggregate!

  """
  fetch data from the table in a streaming manner: "StakePoolRetirement"
  """
  StakePoolRetirement_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [StakePoolRetirement_stream_cursor_input]!

    """filter the rows returned"""
    where: StakePoolRetirement_bool_exp
  ): [StakePoolRetirement!]!

  """
  fetch data from the table in a streaming manner: "StakePool"
  """
  StakePool_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [StakePool_stream_cursor_input]!

    """filter the rows returned"""
    where: StakePool_bool_exp
  ): [StakePool!]!

  """
  fetch data from the table in a streaming manner: "StakeRegistration"
  """
  StakeRegistration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [StakeRegistration_stream_cursor_input]!

    """filter the rows returned"""
    where: StakeRegistration_bool_exp
  ): [StakeRegistration!]!

  """
  fetch data from the table: "TokenInOutput"
  """
  TokenInOutput(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """
  fetch aggregated fields from the table: "TokenInOutput"
  """
  TokenInOutput_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenInOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenInOutput_order_by!]

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): TokenInOutput_aggregate!

  """
  fetch data from the table in a streaming manner: "TokenInOutput"
  """
  TokenInOutput_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TokenInOutput_stream_cursor_input]!

    """filter the rows returned"""
    where: TokenInOutput_bool_exp
  ): [TokenInOutput!]!

  """
  fetch data from the table in a streaming manner: "TokenMint"
  """
  TokenMint_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TokenMint_stream_cursor_input]!

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): [TokenMint!]!

  """
  fetch data from the table: "TransactionInput"
  """
  TransactionInput(
    """distinct select on columns"""
    distinct_on: [TransactionInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionInput_order_by!]

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): [TransactionInput!]!

  """
  fetch aggregated fields from the table: "TransactionInput"
  """
  TransactionInput_aggregate(
    """distinct select on columns"""
    distinct_on: [TransactionInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionInput_order_by!]

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): TransactionInput_aggregate!

  """
  fetch data from the table in a streaming manner: "TransactionInput"
  """
  TransactionInput_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TransactionInput_stream_cursor_input]!

    """filter the rows returned"""
    where: TransactionInput_bool_exp
  ): [TransactionInput!]!

  """
  fetch data from the table: "TransactionOutput"
  """
  TransactionOutput(
    """distinct select on columns"""
    distinct_on: [TransactionOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionOutput_order_by!]

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): [TransactionOutput!]!

  """
  fetch aggregated fields from the table: "TransactionOutput"
  """
  TransactionOutput_aggregate(
    """distinct select on columns"""
    distinct_on: [TransactionOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TransactionOutput_order_by!]

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): TransactionOutput_aggregate!

  """
  fetch data from the table in a streaming manner: "TransactionOutput"
  """
  TransactionOutput_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TransactionOutput_stream_cursor_input]!

    """filter the rows returned"""
    where: TransactionOutput_bool_exp
  ): [TransactionOutput!]!

  """
  fetch data from the table in a streaming manner: "Transaction"
  """
  Transaction_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Transaction_stream_cursor_input]!

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!

  """
  fetch data from the table in a streaming manner: "Utxo"
  """
  Utxo_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Utxo_stream_cursor_input]!

    """filter the rows returned"""
    where: Utxo_bool_exp
  ): [Utxo!]!

  """
  fetch data from the table in a streaming manner: "Withdrawal"
  """
  Withdrawal_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Withdrawal_stream_cursor_input]!

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): [Withdrawal!]!

  """An array relationship"""
  activeStake(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): [ActiveStake!]!

  """An aggregate relationship"""
  activeStake_aggregate(
    """distinct select on columns"""
    distinct_on: [ActiveStake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ActiveStake_order_by!]

    """filter the rows returned"""
    where: ActiveStake_bool_exp
  ): ActiveStake_aggregate!

  """
  fetch data from the table: "ada_pots"
  """
  ada_pots(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): [ada_pots!]!

  """
  fetch aggregated fields from the table: "ada_pots"
  """
  ada_pots_aggregate(
    """distinct select on columns"""
    distinct_on: [ada_pots_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ada_pots_order_by!]

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): ada_pots_aggregate!

  """fetch data from the table: "ada_pots" using primary key columns"""
  ada_pots_by_pk(id: bigint!): ada_pots

  """
  fetch data from the table in a streaming manner: "ada_pots"
  """
  ada_pots_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ada_pots_stream_cursor_input]!

    """filter the rows returned"""
    where: ada_pots_bool_exp
  ): [ada_pots!]!

  """
  fetch data from the table: "Asset"
  """
  assets(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): [Asset!]!

  """
  fetch aggregated fields from the table: "Asset"
  """
  assets_aggregate(
    """distinct select on columns"""
    distinct_on: [Asset_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Asset_order_by!]

    """filter the rows returned"""
    where: Asset_bool_exp
  ): Asset_aggregate!

  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): [Block!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [Block_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Block_order_by!]

    """filter the rows returned"""
    where: Block_bool_exp
  ): Block_aggregate!

  """
  fetch data from the table: "Cardano"
  """
  cardano(
    """distinct select on columns"""
    distinct_on: [Cardano_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Cardano_order_by!]

    """filter the rows returned"""
    where: Cardano_bool_exp
  ): [Cardano!]!

  """An array relationship"""
  collateralInputs(
    """distinct select on columns"""
    distinct_on: [CollateralInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralInput_order_by!]

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): [CollateralInput!]!

  """An aggregate relationship"""
  collateralInputs_aggregate(
    """distinct select on columns"""
    distinct_on: [CollateralInput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralInput_order_by!]

    """filter the rows returned"""
    where: CollateralInput_bool_exp
  ): CollateralInput_aggregate!

  """An array relationship"""
  collateralOutputs(
    """distinct select on columns"""
    distinct_on: [CollateralOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralOutput_order_by!]

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): [CollateralOutput!]!

  """An aggregate relationship"""
  collateralOutputs_aggregate(
    """distinct select on columns"""
    distinct_on: [CollateralOutput_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [CollateralOutput_order_by!]

    """filter the rows returned"""
    where: CollateralOutput_bool_exp
  ): CollateralOutput_aggregate!

  """
  fetch data from the table: "committee"
  """
  committee(
    """distinct select on columns"""
    distinct_on: [committee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_order_by!]

    """filter the rows returned"""
    where: committee_bool_exp
  ): [committee!]!

  """
  fetch data from the table: "committee_de_registration"
  """
  committeeDeRegistration(
    """distinct select on columns"""
    distinct_on: [committee_de_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_de_registration_order_by!]

    """filter the rows returned"""
    where: committee_de_registration_bool_exp
  ): [committee_de_registration!]!

  """
  fetch aggregated fields from the table: "committee_de_registration"
  """
  committeeDeRegistration_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_de_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_de_registration_order_by!]

    """filter the rows returned"""
    where: committee_de_registration_bool_exp
  ): committee_de_registration_aggregate!

  """
  fetch data from the table: "committee_hash"
  """
  committeeHash(
    """distinct select on columns"""
    distinct_on: [committee_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_hash_order_by!]

    """filter the rows returned"""
    where: committee_hash_bool_exp
  ): [committee_hash!]!

  """
  fetch aggregated fields from the table: "committee_hash"
  """
  committeeHash_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_hash_order_by!]

    """filter the rows returned"""
    where: committee_hash_bool_exp
  ): committee_hash_aggregate!

  """
  fetch data from the table: "committee_member"
  """
  committeeMember(
    """distinct select on columns"""
    distinct_on: [committee_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_member_order_by!]

    """filter the rows returned"""
    where: committee_member_bool_exp
  ): [committee_member!]!

  """
  fetch aggregated fields from the table: "committee_member"
  """
  committeeMember_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_member_order_by!]

    """filter the rows returned"""
    where: committee_member_bool_exp
  ): committee_member_aggregate!

  """
  fetch data from the table: "committee_registration"
  """
  committeeRegistration(
    """distinct select on columns"""
    distinct_on: [committee_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_registration_order_by!]

    """filter the rows returned"""
    where: committee_registration_bool_exp
  ): [committee_registration!]!

  """
  fetch aggregated fields from the table: "committee_registration"
  """
  committeeRegistration_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_registration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_registration_order_by!]

    """filter the rows returned"""
    where: committee_registration_bool_exp
  ): committee_registration_aggregate!

  """
  fetch aggregated fields from the table: "committee"
  """
  committee_aggregate(
    """distinct select on columns"""
    distinct_on: [committee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [committee_order_by!]

    """filter the rows returned"""
    where: committee_bool_exp
  ): committee_aggregate!

  """fetch data from the table: "committee" using primary key columns"""
  committee_by_pk(id: bigint!): committee

  """
  fetch data from the table: "committee_de_registration" using primary key columns
  """
  committee_de_registration_by_pk(id: bigint!): committee_de_registration

  """
  fetch data from the table in a streaming manner: "committee_de_registration"
  """
  committee_de_registration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [committee_de_registration_stream_cursor_input]!

    """filter the rows returned"""
    where: committee_de_registration_bool_exp
  ): [committee_de_registration!]!

  """fetch data from the table: "committee_hash" using primary key columns"""
  committee_hash_by_pk(id: bigint!): committee_hash

  """
  fetch data from the table in a streaming manner: "committee_hash"
  """
  committee_hash_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [committee_hash_stream_cursor_input]!

    """filter the rows returned"""
    where: committee_hash_bool_exp
  ): [committee_hash!]!

  """
  fetch data from the table: "committee_member" using primary key columns
  """
  committee_member_by_pk(id: bigint!): committee_member

  """
  fetch data from the table in a streaming manner: "committee_member"
  """
  committee_member_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [committee_member_stream_cursor_input]!

    """filter the rows returned"""
    where: committee_member_bool_exp
  ): [committee_member!]!

  """
  fetch data from the table: "committee_registration" using primary key columns
  """
  committee_registration_by_pk(id: bigint!): committee_registration

  """
  fetch data from the table in a streaming manner: "committee_registration"
  """
  committee_registration_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [committee_registration_stream_cursor_input]!

    """filter the rows returned"""
    where: committee_registration_bool_exp
  ): [committee_registration!]!

  """
  fetch data from the table in a streaming manner: "committee"
  """
  committee_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [committee_stream_cursor_input]!

    """filter the rows returned"""
    where: committee_bool_exp
  ): [committee!]!

  """
  fetch data from the table: "DelegationVote"
  """
  delegationVotes(
    """distinct select on columns"""
    distinct_on: [DelegationVote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DelegationVote_order_by!]

    """filter the rows returned"""
    where: DelegationVote_bool_exp
  ): [DelegationVote!]!

  """
  fetch aggregated fields from the table: "DelegationVote"
  """
  delegationVotes_aggregate(
    """distinct select on columns"""
    distinct_on: [DelegationVote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DelegationVote_order_by!]

    """filter the rows returned"""
    where: DelegationVote_bool_exp
  ): DelegationVote_aggregate!

  """
  fetch data from the table: "Delegation"
  """
  delegations(
    """distinct select on columns"""
    distinct_on: [Delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Delegation_order_by!]

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): [Delegation!]!

  """
  fetch aggregated fields from the table: "Delegation"
  """
  delegations_aggregate(
    """distinct select on columns"""
    distinct_on: [Delegation_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Delegation_order_by!]

    """filter the rows returned"""
    where: Delegation_bool_exp
  ): Delegation_aggregate!

  """
  fetch data from the table: "drep_hash"
  """
  drepHash(
    """distinct select on columns"""
    distinct_on: [drep_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_hash_order_by!]

    """filter the rows returned"""
    where: drep_hash_bool_exp
  ): [drep_hash!]!

  """
  fetch aggregated fields from the table: "drep_hash"
  """
  drepHash_aggregate(
    """distinct select on columns"""
    distinct_on: [drep_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_hash_order_by!]

    """filter the rows returned"""
    where: drep_hash_bool_exp
  ): drep_hash_aggregate!

  """
  fetch data from the table: "DrepRegistration"
  """
  drepRegistrations(
    """distinct select on columns"""
    distinct_on: [DrepRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DrepRegistration_order_by!]

    """filter the rows returned"""
    where: DrepRegistration_bool_exp
  ): [DrepRegistration!]!

  """
  fetch aggregated fields from the table: "DrepRegistration"
  """
  drepRegistrations_aggregate(
    """distinct select on columns"""
    distinct_on: [DrepRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [DrepRegistration_order_by!]

    """filter the rows returned"""
    where: DrepRegistration_bool_exp
  ): DrepRegistration_aggregate!

  """
  fetch data from the table: "drep_distr"
  """
  drep_distr(
    """distinct select on columns"""
    distinct_on: [drep_distr_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_distr_order_by!]

    """filter the rows returned"""
    where: drep_distr_bool_exp
  ): [drep_distr!]!

  """
  fetch aggregated fields from the table: "drep_distr"
  """
  drep_distr_aggregate(
    """distinct select on columns"""
    distinct_on: [drep_distr_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [drep_distr_order_by!]

    """filter the rows returned"""
    where: drep_distr_bool_exp
  ): drep_distr_aggregate!

  """fetch data from the table: "drep_distr" using primary key columns"""
  drep_distr_by_pk(id: bigint!): drep_distr

  """
  fetch data from the table in a streaming manner: "drep_distr"
  """
  drep_distr_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [drep_distr_stream_cursor_input]!

    """filter the rows returned"""
    where: drep_distr_bool_exp
  ): [drep_distr!]!

  """fetch data from the table: "drep_hash" using primary key columns"""
  drep_hash_by_pk(id: bigint!): drep_hash

  """
  fetch data from the table in a streaming manner: "drep_hash"
  """
  drep_hash_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [drep_hash_stream_cursor_input]!

    """filter the rows returned"""
    where: drep_hash_bool_exp
  ): [drep_hash!]!

  """
  fetch data from the table: "epoch_param"
  """
  epoch_param(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): [epoch_param!]!

  """
  fetch aggregated fields from the table: "epoch_param"
  """
  epoch_param_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_param_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [epoch_param_order_by!]

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): epoch_param_aggregate!

  """fetch data from the table: "epoch_param" using primary key columns"""
  epoch_param_by_pk(id: bigint!): epoch_param

  """
  fetch data from the table in a streaming manner: "epoch_param"
  """
  epoch_param_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [epoch_param_stream_cursor_input]!

    """filter the rows returned"""
    where: epoch_param_bool_exp
  ): [epoch_param!]!

  """
  fetch data from the table: "Epoch"
  """
  epochs(
    """distinct select on columns"""
    distinct_on: [Epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Epoch_order_by!]

    """filter the rows returned"""
    where: Epoch_bool_exp
  ): [Epoch!]!

  """
  fetch aggregated fields from the table: "Epoch"
  """
  epochs_aggregate(
    """distinct select on columns"""
    distinct_on: [Epoch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Epoch_order_by!]

    """filter the rows returned"""
    where: Epoch_bool_exp
  ): Epoch_aggregate!

  """
  fetch data from the table: "gov_action_proposal"
  """
  govActionProposal(
    """distinct select on columns"""
    distinct_on: [gov_action_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gov_action_proposal_order_by!]

    """filter the rows returned"""
    where: gov_action_proposal_bool_exp
  ): [gov_action_proposal!]!

  """
  fetch aggregated fields from the table: "gov_action_proposal"
  """
  govActionProposal_aggregate(
    """distinct select on columns"""
    distinct_on: [gov_action_proposal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gov_action_proposal_order_by!]

    """filter the rows returned"""
    where: gov_action_proposal_bool_exp
  ): gov_action_proposal_aggregate!

  """
  fetch data from the table: "gov_action_proposal" using primary key columns
  """
  gov_action_proposal_by_pk(id: bigint!): gov_action_proposal

  """
  fetch data from the table in a streaming manner: "gov_action_proposal"
  """
  gov_action_proposal_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gov_action_proposal_stream_cursor_input]!

    """filter the rows returned"""
    where: gov_action_proposal_bool_exp
  ): [gov_action_proposal!]!

  """
  fetch data from the table: "off_chain_vote_author"
  """
  offChainVoteAuthor(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_author_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_author_bool_exp
  ): [off_chain_vote_author!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_author"
  """
  offChainVoteAuthor_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_author_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_author_bool_exp
  ): off_chain_vote_author_aggregate!

  """
  fetch data from the table: "off_chain_vote_data"
  """
  offChainVoteData(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_data_bool_exp
  ): [off_chain_vote_data!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_data"
  """
  offChainVoteData_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_data_bool_exp
  ): off_chain_vote_data_aggregate!

  """
  fetch data from the table: "off_chain_vote_drep_data"
  """
  offChainVoteDrepData(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_drep_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_drep_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_drep_data_bool_exp
  ): [off_chain_vote_drep_data!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_drep_data"
  """
  offChainVoteDrepData_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_drep_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_drep_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_drep_data_bool_exp
  ): off_chain_vote_drep_data_aggregate!

  """
  fetch data from the table: "off_chain_vote_gov_action_data"
  """
  offChainVoteGovActionData(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_gov_action_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_gov_action_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_gov_action_data_bool_exp
  ): [off_chain_vote_gov_action_data!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_gov_action_data"
  """
  offChainVoteGovActionData_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_gov_action_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_gov_action_data_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_gov_action_data_bool_exp
  ): off_chain_vote_gov_action_data_aggregate!

  """
  fetch data from the table: "off_chain_vote_reference"
  """
  offChainVoteReference(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_reference_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_reference_bool_exp
  ): [off_chain_vote_reference!]!

  """
  fetch aggregated fields from the table: "off_chain_vote_reference"
  """
  offChainVoteReference_aggregate(
    """distinct select on columns"""
    distinct_on: [off_chain_vote_reference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [off_chain_vote_reference_order_by!]

    """filter the rows returned"""
    where: off_chain_vote_reference_bool_exp
  ): off_chain_vote_reference_aggregate!

  """
  fetch data from the table: "off_chain_vote_author" using primary key columns
  """
  off_chain_vote_author_by_pk(id: bigint!): off_chain_vote_author

  """
  fetch data from the table in a streaming manner: "off_chain_vote_author"
  """
  off_chain_vote_author_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [off_chain_vote_author_stream_cursor_input]!

    """filter the rows returned"""
    where: off_chain_vote_author_bool_exp
  ): [off_chain_vote_author!]!

  """
  fetch data from the table: "off_chain_vote_data" using primary key columns
  """
  off_chain_vote_data_by_pk(id: bigint!): off_chain_vote_data

  """
  fetch data from the table in a streaming manner: "off_chain_vote_data"
  """
  off_chain_vote_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [off_chain_vote_data_stream_cursor_input]!

    """filter the rows returned"""
    where: off_chain_vote_data_bool_exp
  ): [off_chain_vote_data!]!

  """
  fetch data from the table: "off_chain_vote_drep_data" using primary key columns
  """
  off_chain_vote_drep_data_by_pk(id: bigint!): off_chain_vote_drep_data

  """
  fetch data from the table in a streaming manner: "off_chain_vote_drep_data"
  """
  off_chain_vote_drep_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [off_chain_vote_drep_data_stream_cursor_input]!

    """filter the rows returned"""
    where: off_chain_vote_drep_data_bool_exp
  ): [off_chain_vote_drep_data!]!

  """
  fetch data from the table: "off_chain_vote_gov_action_data" using primary key columns
  """
  off_chain_vote_gov_action_data_by_pk(id: bigint!): off_chain_vote_gov_action_data

  """
  fetch data from the table in a streaming manner: "off_chain_vote_gov_action_data"
  """
  off_chain_vote_gov_action_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [off_chain_vote_gov_action_data_stream_cursor_input]!

    """filter the rows returned"""
    where: off_chain_vote_gov_action_data_bool_exp
  ): [off_chain_vote_gov_action_data!]!

  """
  fetch data from the table: "off_chain_vote_reference" using primary key columns
  """
  off_chain_vote_reference_by_pk(id: bigint!): off_chain_vote_reference

  """
  fetch data from the table in a streaming manner: "off_chain_vote_reference"
  """
  off_chain_vote_reference_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [off_chain_vote_reference_stream_cursor_input]!

    """filter the rows returned"""
    where: off_chain_vote_reference_bool_exp
  ): [off_chain_vote_reference!]!

  """
  fetch data from the table: "pool_hash"
  """
  pool_hash(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): [pool_hash!]!

  """
  fetch aggregated fields from the table: "pool_hash"
  """
  pool_hash_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_hash_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_hash_order_by!]

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): pool_hash_aggregate!

  """fetch data from the table: "pool_hash" using primary key columns"""
  pool_hash_by_pk(id: bigint!): pool_hash

  """
  fetch data from the table in a streaming manner: "pool_hash"
  """
  pool_hash_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [pool_hash_stream_cursor_input]!

    """filter the rows returned"""
    where: pool_hash_bool_exp
  ): [pool_hash!]!

  """
  fetch data from the table: "pool_relay"
  """
  pool_relay(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): [pool_relay!]!

  """
  fetch aggregated fields from the table: "pool_relay"
  """
  pool_relay_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_relay_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_relay_order_by!]

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): pool_relay_aggregate!

  """fetch data from the table: "pool_relay" using primary key columns"""
  pool_relay_by_pk(id: bigint!): pool_relay

  """
  fetch data from the table in a streaming manner: "pool_relay"
  """
  pool_relay_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [pool_relay_stream_cursor_input]!

    """filter the rows returned"""
    where: pool_relay_bool_exp
  ): [pool_relay!]!

  """
  fetch data from the table: "pool_stat"
  """
  pool_stat(
    """distinct select on columns"""
    distinct_on: [pool_stat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_stat_order_by!]

    """filter the rows returned"""
    where: pool_stat_bool_exp
  ): [pool_stat!]!

  """
  fetch aggregated fields from the table: "pool_stat"
  """
  pool_stat_aggregate(
    """distinct select on columns"""
    distinct_on: [pool_stat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pool_stat_order_by!]

    """filter the rows returned"""
    where: pool_stat_bool_exp
  ): pool_stat_aggregate!

  """fetch data from the table: "pool_stat" using primary key columns"""
  pool_stat_by_pk(id: bigint!): pool_stat

  """
  fetch data from the table in a streaming manner: "pool_stat"
  """
  pool_stat_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [pool_stat_stream_cursor_input]!

    """filter the rows returned"""
    where: pool_stat_bool_exp
  ): [pool_stat!]!

  """An array relationship"""
  redeemers(
    """distinct select on columns"""
    distinct_on: [Redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Redeemer_order_by!]

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): [Redeemer!]!

  """An aggregate relationship"""
  redeemers_aggregate(
    """distinct select on columns"""
    distinct_on: [Redeemer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Redeemer_order_by!]

    """filter the rows returned"""
    where: Redeemer_bool_exp
  ): Redeemer_aggregate!

  """
  fetch data from the table: "reserve"
  """
  reserve(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): [reserve!]!

  """
  fetch aggregated fields from the table: "reserve"
  """
  reserve_aggregate(
    """distinct select on columns"""
    distinct_on: [reserve_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reserve_order_by!]

    """filter the rows returned"""
    where: reserve_bool_exp
  ): reserve_aggregate!

  """fetch data from the table: "reserve" using primary key columns"""
  reserve_by_pk(id: bigint!): reserve

  """
  fetch data from the table in a streaming manner: "reserve"
  """
  reserve_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [reserve_stream_cursor_input]!

    """filter the rows returned"""
    where: reserve_bool_exp
  ): [reserve!]!

  """An array relationship"""
  rewards(
    """distinct select on columns"""
    distinct_on: [Reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Reward_order_by!]

    """filter the rows returned"""
    where: Reward_bool_exp
  ): [Reward!]!

  """An aggregate relationship"""
  rewards_aggregate(
    """distinct select on columns"""
    distinct_on: [Reward_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Reward_order_by!]

    """filter the rows returned"""
    where: Reward_bool_exp
  ): Reward_aggregate!

  """An array relationship"""
  scripts(
    """distinct select on columns"""
    distinct_on: [Script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Script_order_by!]

    """filter the rows returned"""
    where: Script_bool_exp
  ): [Script!]!

  """An aggregate relationship"""
  scripts_aggregate(
    """distinct select on columns"""
    distinct_on: [Script_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Script_order_by!]

    """filter the rows returned"""
    where: Script_bool_exp
  ): Script_aggregate!

  """
  fetch data from the table: "StakeDeregistration"
  """
  stakeDeregistrations(
    """distinct select on columns"""
    distinct_on: [StakeDeregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeDeregistration_order_by!]

    """filter the rows returned"""
    where: StakeDeregistration_bool_exp
  ): [StakeDeregistration!]!

  """
  fetch aggregated fields from the table: "StakeDeregistration"
  """
  stakeDeregistrations_aggregate(
    """distinct select on columns"""
    distinct_on: [StakeDeregistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeDeregistration_order_by!]

    """filter the rows returned"""
    where: StakeDeregistration_bool_exp
  ): StakeDeregistration_aggregate!

  """
  fetch data from the table: "StakePool"
  """
  stakePools(
    """distinct select on columns"""
    distinct_on: [StakePool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePool_order_by!]

    """filter the rows returned"""
    where: StakePool_bool_exp
  ): [StakePool!]!

  """
  fetch aggregated fields from the table: "StakePool"
  """
  stakePools_aggregate(
    """distinct select on columns"""
    distinct_on: [StakePool_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakePool_order_by!]

    """filter the rows returned"""
    where: StakePool_bool_exp
  ): StakePool_aggregate!

  """
  fetch data from the table: "StakeRegistration"
  """
  stakeRegistrations(
    """distinct select on columns"""
    distinct_on: [StakeRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeRegistration_order_by!]

    """filter the rows returned"""
    where: StakeRegistration_bool_exp
  ): [StakeRegistration!]!

  """
  fetch aggregated fields from the table: "StakeRegistration"
  """
  stakeRegistrations_aggregate(
    """distinct select on columns"""
    distinct_on: [StakeRegistration_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [StakeRegistration_order_by!]

    """filter the rows returned"""
    where: StakeRegistration_bool_exp
  ): StakeRegistration_aggregate!

  """
  fetch data from the table: "stake_address"
  """
  stake_address(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): [stake_address!]!

  """
  fetch aggregated fields from the table: "stake_address"
  """
  stake_address_aggregate(
    """distinct select on columns"""
    distinct_on: [stake_address_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [stake_address_order_by!]

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): stake_address_aggregate!

  """fetch data from the table: "stake_address" using primary key columns"""
  stake_address_by_pk(id: bigint!): stake_address

  """
  fetch data from the table in a streaming manner: "stake_address"
  """
  stake_address_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [stake_address_stream_cursor_input]!

    """filter the rows returned"""
    where: stake_address_bool_exp
  ): [stake_address!]!

  """An array relationship"""
  tokenMints(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): [TokenMint!]!

  """An aggregate relationship"""
  tokenMints_aggregate(
    """distinct select on columns"""
    distinct_on: [TokenMint_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TokenMint_order_by!]

    """filter the rows returned"""
    where: TokenMint_bool_exp
  ): TokenMint_aggregate!

  """An array relationship"""
  transactions(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): [Transaction!]!

  """An aggregate relationship"""
  transactions_aggregate(
    """distinct select on columns"""
    distinct_on: [Transaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Transaction_order_by!]

    """filter the rows returned"""
    where: Transaction_bool_exp
  ): Transaction_aggregate!

  """
  fetch data from the table: "treasury_withdrawal"
  """
  treasury_withdrawal(
    """distinct select on columns"""
    distinct_on: [treasury_withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_withdrawal_order_by!]

    """filter the rows returned"""
    where: treasury_withdrawal_bool_exp
  ): [treasury_withdrawal!]!

  """
  fetch aggregated fields from the table: "treasury_withdrawal"
  """
  treasury_withdrawal_aggregate(
    """distinct select on columns"""
    distinct_on: [treasury_withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [treasury_withdrawal_order_by!]

    """filter the rows returned"""
    where: treasury_withdrawal_bool_exp
  ): treasury_withdrawal_aggregate!

  """
  fetch data from the table: "treasury_withdrawal" using primary key columns
  """
  treasury_withdrawal_by_pk(id: bigint!): treasury_withdrawal

  """
  fetch data from the table in a streaming manner: "treasury_withdrawal"
  """
  treasury_withdrawal_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [treasury_withdrawal_stream_cursor_input]!

    """filter the rows returned"""
    where: treasury_withdrawal_bool_exp
  ): [treasury_withdrawal!]!

  """
  fetch data from the table: "tx"
  """
  tx(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): [tx!]!

  """
  fetch aggregated fields from the table: "tx"
  """
  tx_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_order_by!]

    """filter the rows returned"""
    where: tx_bool_exp
  ): tx_aggregate!

  """fetch data from the table: "tx" using primary key columns"""
  tx_by_pk(id: bigint!): tx

  """
  fetch data from the table: "tx_metadata"
  """
  tx_metadata(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): [tx_metadata!]!

  """
  fetch aggregated fields from the table: "tx_metadata"
  """
  tx_metadata_aggregate(
    """distinct select on columns"""
    distinct_on: [tx_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tx_metadata_order_by!]

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): tx_metadata_aggregate!

  """fetch data from the table: "tx_metadata" using primary key columns"""
  tx_metadata_by_pk(id: bigint!): tx_metadata

  """
  fetch data from the table in a streaming manner: "tx_metadata"
  """
  tx_metadata_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tx_metadata_stream_cursor_input]!

    """filter the rows returned"""
    where: tx_metadata_bool_exp
  ): [tx_metadata!]!

  """
  fetch data from the table in a streaming manner: "tx"
  """
  tx_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tx_stream_cursor_input]!

    """filter the rows returned"""
    where: tx_bool_exp
  ): [tx!]!

  """
  fetch data from the table: "Utxo"
  """
  utxos(
    """distinct select on columns"""
    distinct_on: [Utxo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Utxo_order_by!]

    """filter the rows returned"""
    where: Utxo_bool_exp
  ): [Utxo!]!

  """
  fetch aggregated fields from the table: "Utxo"
  """
  utxos_aggregate(
    """distinct select on columns"""
    distinct_on: [Utxo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Utxo_order_by!]

    """filter the rows returned"""
    where: Utxo_bool_exp
  ): Utxo_aggregate!

  """
  fetch data from the table: "voting_procedure"
  """
  voteProcedure(
    """distinct select on columns"""
    distinct_on: [voting_procedure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_procedure_order_by!]

    """filter the rows returned"""
    where: voting_procedure_bool_exp
  ): [voting_procedure!]!

  """
  fetch aggregated fields from the table: "voting_procedure"
  """
  voteProcedure_aggregate(
    """distinct select on columns"""
    distinct_on: [voting_procedure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_procedure_order_by!]

    """filter the rows returned"""
    where: voting_procedure_bool_exp
  ): voting_procedure_aggregate!

  """
  fetch data from the table: "voting_anchor"
  """
  votingAnchor(
    """distinct select on columns"""
    distinct_on: [voting_anchor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_anchor_order_by!]

    """filter the rows returned"""
    where: voting_anchor_bool_exp
  ): [voting_anchor!]!

  """
  fetch aggregated fields from the table: "voting_anchor"
  """
  votingAnchor_aggregate(
    """distinct select on columns"""
    distinct_on: [voting_anchor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [voting_anchor_order_by!]

    """filter the rows returned"""
    where: voting_anchor_bool_exp
  ): voting_anchor_aggregate!

  """fetch data from the table: "voting_anchor" using primary key columns"""
  voting_anchor_by_pk(id: bigint!): voting_anchor

  """
  fetch data from the table in a streaming manner: "voting_anchor"
  """
  voting_anchor_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [voting_anchor_stream_cursor_input]!

    """filter the rows returned"""
    where: voting_anchor_bool_exp
  ): [voting_anchor!]!

  """
  fetch data from the table: "voting_procedure" using primary key columns
  """
  voting_procedure_by_pk(id: bigint!): voting_procedure

  """
  fetch data from the table in a streaming manner: "voting_procedure"
  """
  voting_procedure_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [voting_procedure_stream_cursor_input]!

    """filter the rows returned"""
    where: voting_procedure_bool_exp
  ): [voting_procedure!]!

  """An array relationship"""
  withdrawals(
    """distinct select on columns"""
    distinct_on: [Withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Withdrawal_order_by!]

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): [Withdrawal!]!

  """An aggregate relationship"""
  withdrawals_aggregate(
    """distinct select on columns"""
    distinct_on: [Withdrawal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Withdrawal_order_by!]

    """filter the rows returned"""
    where: Withdrawal_bool_exp
  ): Withdrawal_aggregate!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "treasury_withdrawal"
"""
type treasury_withdrawal {
  """An object relationship"""
  GovActionProposal: gov_action_proposal

  """An object relationship"""
  StakeAddress: stake_address
  amount: numeric!
  gov_action_proposal_id: bigint!
  id: bigint!
  stake_address_id: bigint!
}

"""
aggregated selection of "treasury_withdrawal"
"""
type treasury_withdrawal_aggregate {
  aggregate: treasury_withdrawal_aggregate_fields
  nodes: [treasury_withdrawal!]!
}

"""
aggregate fields of "treasury_withdrawal"
"""
type treasury_withdrawal_aggregate_fields {
  avg: treasury_withdrawal_avg_fields
  count(columns: [treasury_withdrawal_select_column!], distinct: Boolean): Int!
  max: treasury_withdrawal_max_fields
  min: treasury_withdrawal_min_fields
  stddev: treasury_withdrawal_stddev_fields
  stddev_pop: treasury_withdrawal_stddev_pop_fields
  stddev_samp: treasury_withdrawal_stddev_samp_fields
  sum: treasury_withdrawal_sum_fields
  var_pop: treasury_withdrawal_var_pop_fields
  var_samp: treasury_withdrawal_var_samp_fields
  variance: treasury_withdrawal_variance_fields
}

"""aggregate avg on columns"""
type treasury_withdrawal_avg_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""
Boolean expression to filter rows from the table "treasury_withdrawal". All fields are combined with a logical 'AND'.
"""
input treasury_withdrawal_bool_exp {
  GovActionProposal: gov_action_proposal_bool_exp
  StakeAddress: stake_address_bool_exp
  _and: [treasury_withdrawal_bool_exp!]
  _not: treasury_withdrawal_bool_exp
  _or: [treasury_withdrawal_bool_exp!]
  amount: numeric_comparison_exp
  gov_action_proposal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  stake_address_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "treasury_withdrawal"
"""
enum treasury_withdrawal_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  treasury_withdrawal_pkey
}

"""
input type for incrementing numeric columns in table "treasury_withdrawal"
"""
input treasury_withdrawal_inc_input {
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""
input type for inserting data into table "treasury_withdrawal"
"""
input treasury_withdrawal_insert_input {
  GovActionProposal: gov_action_proposal_obj_rel_insert_input
  StakeAddress: stake_address_obj_rel_insert_input
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""aggregate max on columns"""
type treasury_withdrawal_max_fields {
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""aggregate min on columns"""
type treasury_withdrawal_min_fields {
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""
response of any mutation on the table "treasury_withdrawal"
"""
type treasury_withdrawal_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [treasury_withdrawal!]!
}

"""
on_conflict condition type for table "treasury_withdrawal"
"""
input treasury_withdrawal_on_conflict {
  constraint: treasury_withdrawal_constraint!
  update_columns: [treasury_withdrawal_update_column!]! = []
  where: treasury_withdrawal_bool_exp
}

"""Ordering options when selecting data from "treasury_withdrawal"."""
input treasury_withdrawal_order_by {
  GovActionProposal: gov_action_proposal_order_by
  StakeAddress: stake_address_order_by
  amount: order_by
  gov_action_proposal_id: order_by
  id: order_by
  stake_address_id: order_by
}

"""primary key columns input for table: treasury_withdrawal"""
input treasury_withdrawal_pk_columns_input {
  id: bigint!
}

"""
select columns of table "treasury_withdrawal"
"""
enum treasury_withdrawal_select_column {
  """column name"""
  amount

  """column name"""
  gov_action_proposal_id

  """column name"""
  id

  """column name"""
  stake_address_id
}

"""
input type for updating data in table "treasury_withdrawal"
"""
input treasury_withdrawal_set_input {
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""aggregate stddev on columns"""
type treasury_withdrawal_stddev_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""aggregate stddev_pop on columns"""
type treasury_withdrawal_stddev_pop_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""aggregate stddev_samp on columns"""
type treasury_withdrawal_stddev_samp_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""
Streaming cursor of the table "treasury_withdrawal"
"""
input treasury_withdrawal_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: treasury_withdrawal_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input treasury_withdrawal_stream_cursor_value_input {
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""aggregate sum on columns"""
type treasury_withdrawal_sum_fields {
  amount: numeric
  gov_action_proposal_id: bigint
  id: bigint
  stake_address_id: bigint
}

"""
update columns of table "treasury_withdrawal"
"""
enum treasury_withdrawal_update_column {
  """column name"""
  amount

  """column name"""
  gov_action_proposal_id

  """column name"""
  id

  """column name"""
  stake_address_id
}

input treasury_withdrawal_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: treasury_withdrawal_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: treasury_withdrawal_set_input

  """filter the rows which have to be updated"""
  where: treasury_withdrawal_bool_exp!
}

"""aggregate var_pop on columns"""
type treasury_withdrawal_var_pop_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""aggregate var_samp on columns"""
type treasury_withdrawal_var_samp_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""aggregate variance on columns"""
type treasury_withdrawal_variance_fields {
  amount: Float
  gov_action_proposal_id: Float
  id: Float
  stake_address_id: Float
}

"""
columns and relationships of "tx"
"""
type tx {
  block_id: bigint!
  block_index: Int!
  deposit: bigint
  fee: numeric!
  hash: bytea!
  id: bigint!
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric!
  script_size: Int!
  size: Int!
  treasury_donation: numeric!
  valid_contract: Boolean!
}

"""
aggregated selection of "tx"
"""
type tx_aggregate {
  aggregate: tx_aggregate_fields
  nodes: [tx!]!
}

"""
aggregate fields of "tx"
"""
type tx_aggregate_fields {
  avg: tx_avg_fields
  count(columns: [tx_select_column!], distinct: Boolean): Int!
  max: tx_max_fields
  min: tx_min_fields
  stddev: tx_stddev_fields
  stddev_pop: tx_stddev_pop_fields
  stddev_samp: tx_stddev_samp_fields
  sum: tx_sum_fields
  var_pop: tx_var_pop_fields
  var_samp: tx_var_samp_fields
  variance: tx_variance_fields
}

"""aggregate avg on columns"""
type tx_avg_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

"""
Boolean expression to filter rows from the table "tx". All fields are combined with a logical 'AND'.
"""
input tx_bool_exp {
  _and: [tx_bool_exp!]
  _not: tx_bool_exp
  _or: [tx_bool_exp!]
  block_id: bigint_comparison_exp
  block_index: Int_comparison_exp
  deposit: bigint_comparison_exp
  fee: numeric_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  invalid_before: numeric_comparison_exp
  invalid_hereafter: numeric_comparison_exp
  out_sum: numeric_comparison_exp
  script_size: Int_comparison_exp
  size: Int_comparison_exp
  treasury_donation: numeric_comparison_exp
  valid_contract: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "tx"
"""
enum tx_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  tx_pkey

  """
  unique or primary key constraint on columns "hash"
  """
  unique_tx
}

"""
input type for incrementing numeric columns in table "tx"
"""
input tx_inc_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
}

"""
input type for inserting data into table "tx"
"""
input tx_insert_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
  valid_contract: Boolean
}

"""aggregate max on columns"""
type tx_max_fields {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
}

"""
columns and relationships of "tx_metadata"
"""
type tx_metadata {
  bytes: bytea!
  id: bigint!
  key: numeric!

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint!
  value(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "tx_metadata"
"""
type tx_metadata_aggregate {
  aggregate: tx_metadata_aggregate_fields
  nodes: [tx_metadata!]!
}

input tx_metadata_aggregate_bool_exp {
  count: tx_metadata_aggregate_bool_exp_count
}

input tx_metadata_aggregate_bool_exp_count {
  arguments: [tx_metadata_select_column!]
  distinct: Boolean
  filter: tx_metadata_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tx_metadata"
"""
type tx_metadata_aggregate_fields {
  avg: tx_metadata_avg_fields
  count(columns: [tx_metadata_select_column!], distinct: Boolean): Int!
  max: tx_metadata_max_fields
  min: tx_metadata_min_fields
  stddev: tx_metadata_stddev_fields
  stddev_pop: tx_metadata_stddev_pop_fields
  stddev_samp: tx_metadata_stddev_samp_fields
  sum: tx_metadata_sum_fields
  var_pop: tx_metadata_var_pop_fields
  var_samp: tx_metadata_var_samp_fields
  variance: tx_metadata_variance_fields
}

"""
order by aggregate values of table "tx_metadata"
"""
input tx_metadata_aggregate_order_by {
  avg: tx_metadata_avg_order_by
  count: order_by
  max: tx_metadata_max_order_by
  min: tx_metadata_min_order_by
  stddev: tx_metadata_stddev_order_by
  stddev_pop: tx_metadata_stddev_pop_order_by
  stddev_samp: tx_metadata_stddev_samp_order_by
  sum: tx_metadata_sum_order_by
  var_pop: tx_metadata_var_pop_order_by
  var_samp: tx_metadata_var_samp_order_by
  variance: tx_metadata_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input tx_metadata_append_input {
  value: jsonb
}

"""
input type for inserting array relation for remote table "tx_metadata"
"""
input tx_metadata_arr_rel_insert_input {
  data: [tx_metadata_insert_input!]!

  """upsert condition"""
  on_conflict: tx_metadata_on_conflict
}

"""aggregate avg on columns"""
type tx_metadata_avg_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by avg() on columns of table "tx_metadata"
"""
input tx_metadata_avg_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
Boolean expression to filter rows from the table "tx_metadata". All fields are combined with a logical 'AND'.
"""
input tx_metadata_bool_exp {
  _and: [tx_metadata_bool_exp!]
  _not: tx_metadata_bool_exp
  _or: [tx_metadata_bool_exp!]
  bytes: bytea_comparison_exp
  id: bigint_comparison_exp
  key: numeric_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
  value: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "tx_metadata"
"""
enum tx_metadata_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  tx_metadata_pkey

  """
  unique or primary key constraint on columns "key", "tx_id"
  """
  unique_tx_metadata
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input tx_metadata_delete_at_path_input {
  value: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input tx_metadata_delete_elem_input {
  value: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input tx_metadata_delete_key_input {
  value: String
}

"""
input type for incrementing numeric columns in table "tx_metadata"
"""
input tx_metadata_inc_input {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
input type for inserting data into table "tx_metadata"
"""
input tx_metadata_insert_input {
  bytes: bytea
  id: bigint
  key: numeric
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
  value: jsonb
}

"""aggregate max on columns"""
type tx_metadata_max_fields {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
order by max() on columns of table "tx_metadata"
"""
input tx_metadata_max_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type tx_metadata_min_fields {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
order by min() on columns of table "tx_metadata"
"""
input tx_metadata_min_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
response of any mutation on the table "tx_metadata"
"""
type tx_metadata_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tx_metadata!]!
}

"""
on_conflict condition type for table "tx_metadata"
"""
input tx_metadata_on_conflict {
  constraint: tx_metadata_constraint!
  update_columns: [tx_metadata_update_column!]! = []
  where: tx_metadata_bool_exp
}

"""Ordering options when selecting data from "tx_metadata"."""
input tx_metadata_order_by {
  bytes: order_by
  id: order_by
  key: order_by
  transaction: Transaction_order_by
  tx_id: order_by
  value: order_by
}

"""primary key columns input for table: tx_metadata"""
input tx_metadata_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input tx_metadata_prepend_input {
  value: jsonb
}

"""
select columns of table "tx_metadata"
"""
enum tx_metadata_select_column {
  """column name"""
  bytes

  """column name"""
  id

  """column name"""
  key

  """column name"""
  tx_id

  """column name"""
  value
}

"""
input type for updating data in table "tx_metadata"
"""
input tx_metadata_set_input {
  bytes: bytea
  id: bigint
  key: numeric
  tx_id: bigint
  value: jsonb
}

"""aggregate stddev on columns"""
type tx_metadata_stddev_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by stddev() on columns of table "tx_metadata"
"""
input tx_metadata_stddev_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate stddev_pop on columns"""
type tx_metadata_stddev_pop_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by stddev_pop() on columns of table "tx_metadata"
"""
input tx_metadata_stddev_pop_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate stddev_samp on columns"""
type tx_metadata_stddev_samp_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by stddev_samp() on columns of table "tx_metadata"
"""
input tx_metadata_stddev_samp_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
Streaming cursor of the table "tx_metadata"
"""
input tx_metadata_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tx_metadata_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tx_metadata_stream_cursor_value_input {
  bytes: bytea
  id: bigint
  key: numeric
  tx_id: bigint
  value: jsonb
}

"""aggregate sum on columns"""
type tx_metadata_sum_fields {
  id: bigint
  key: numeric
  tx_id: bigint
}

"""
order by sum() on columns of table "tx_metadata"
"""
input tx_metadata_sum_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""
update columns of table "tx_metadata"
"""
enum tx_metadata_update_column {
  """column name"""
  bytes

  """column name"""
  id

  """column name"""
  key

  """column name"""
  tx_id

  """column name"""
  value
}

input tx_metadata_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: tx_metadata_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: tx_metadata_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: tx_metadata_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: tx_metadata_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: tx_metadata_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: tx_metadata_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: tx_metadata_set_input

  """filter the rows which have to be updated"""
  where: tx_metadata_bool_exp!
}

"""aggregate var_pop on columns"""
type tx_metadata_var_pop_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by var_pop() on columns of table "tx_metadata"
"""
input tx_metadata_var_pop_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate var_samp on columns"""
type tx_metadata_var_samp_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by var_samp() on columns of table "tx_metadata"
"""
input tx_metadata_var_samp_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate variance on columns"""
type tx_metadata_variance_fields {
  id: Float
  key: Float
  tx_id: Float
}

"""
order by variance() on columns of table "tx_metadata"
"""
input tx_metadata_variance_order_by {
  id: order_by
  key: order_by
  tx_id: order_by
}

"""aggregate min on columns"""
type tx_min_fields {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
}

"""
response of any mutation on the table "tx"
"""
type tx_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tx!]!
}

"""
input type for inserting object relation for remote table "tx"
"""
input tx_obj_rel_insert_input {
  data: tx_insert_input!

  """upsert condition"""
  on_conflict: tx_on_conflict
}

"""
on_conflict condition type for table "tx"
"""
input tx_on_conflict {
  constraint: tx_constraint!
  update_columns: [tx_update_column!]! = []
  where: tx_bool_exp
}

"""Ordering options when selecting data from "tx"."""
input tx_order_by {
  block_id: order_by
  block_index: order_by
  deposit: order_by
  fee: order_by
  hash: order_by
  id: order_by
  invalid_before: order_by
  invalid_hereafter: order_by
  out_sum: order_by
  script_size: order_by
  size: order_by
  treasury_donation: order_by
  valid_contract: order_by
}

"""primary key columns input for table: tx"""
input tx_pk_columns_input {
  id: bigint!
}

"""
select columns of table "tx"
"""
enum tx_select_column {
  """column name"""
  block_id

  """column name"""
  block_index

  """column name"""
  deposit

  """column name"""
  fee

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  invalid_before

  """column name"""
  invalid_hereafter

  """column name"""
  out_sum

  """column name"""
  script_size

  """column name"""
  size

  """column name"""
  treasury_donation

  """column name"""
  valid_contract
}

"""
input type for updating data in table "tx"
"""
input tx_set_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
  valid_contract: Boolean
}

"""aggregate stddev on columns"""
type tx_stddev_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

"""aggregate stddev_pop on columns"""
type tx_stddev_pop_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

"""aggregate stddev_samp on columns"""
type tx_stddev_samp_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

"""
Streaming cursor of the table "tx"
"""
input tx_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tx_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tx_stream_cursor_value_input {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  hash: bytea
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
  valid_contract: Boolean
}

"""aggregate sum on columns"""
type tx_sum_fields {
  block_id: bigint
  block_index: Int
  deposit: bigint
  fee: numeric
  id: bigint
  invalid_before: numeric
  invalid_hereafter: numeric
  out_sum: numeric
  script_size: Int
  size: Int
  treasury_donation: numeric
}

"""
update columns of table "tx"
"""
enum tx_update_column {
  """column name"""
  block_id

  """column name"""
  block_index

  """column name"""
  deposit

  """column name"""
  fee

  """column name"""
  hash

  """column name"""
  id

  """column name"""
  invalid_before

  """column name"""
  invalid_hereafter

  """column name"""
  out_sum

  """column name"""
  script_size

  """column name"""
  size

  """column name"""
  treasury_donation

  """column name"""
  valid_contract
}

input tx_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tx_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tx_set_input

  """filter the rows which have to be updated"""
  where: tx_bool_exp!
}

"""aggregate var_pop on columns"""
type tx_var_pop_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

"""aggregate var_samp on columns"""
type tx_var_samp_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

"""aggregate variance on columns"""
type tx_variance_fields {
  block_id: Float
  block_index: Float
  deposit: Float
  fee: Float
  id: Float
  invalid_before: Float
  invalid_hereafter: Float
  out_sum: Float
  script_size: Float
  size: Float
  treasury_donation: Float
}

scalar vote

"""
Boolean expression to compare columns of type "vote". All fields are combined with logical 'AND'.
"""
input vote_comparison_exp {
  _eq: vote
  _gt: vote
  _gte: vote
  _in: [vote!]
  _is_null: Boolean
  _lt: vote
  _lte: vote
  _neq: vote
  _nin: [vote!]
}

scalar voterrole

"""
Boolean expression to compare columns of type "voterrole". All fields are combined with logical 'AND'.
"""
input voterrole_comparison_exp {
  _eq: voterrole
  _gt: voterrole
  _gte: voterrole
  _in: [voterrole!]
  _is_null: Boolean
  _lt: voterrole
  _lte: voterrole
  _neq: voterrole
  _nin: [voterrole!]
}

"""
columns and relationships of "voting_anchor"
"""
type voting_anchor {
  block_id: bigint!
  data_hash: bytea!
  id: bigint!

  """An object relationship"""
  offChainData: off_chain_vote_data
  type: anchortype!
  url: String!
}

"""
aggregated selection of "voting_anchor"
"""
type voting_anchor_aggregate {
  aggregate: voting_anchor_aggregate_fields
  nodes: [voting_anchor!]!
}

"""
aggregate fields of "voting_anchor"
"""
type voting_anchor_aggregate_fields {
  avg: voting_anchor_avg_fields
  count(columns: [voting_anchor_select_column!], distinct: Boolean): Int!
  max: voting_anchor_max_fields
  min: voting_anchor_min_fields
  stddev: voting_anchor_stddev_fields
  stddev_pop: voting_anchor_stddev_pop_fields
  stddev_samp: voting_anchor_stddev_samp_fields
  sum: voting_anchor_sum_fields
  var_pop: voting_anchor_var_pop_fields
  var_samp: voting_anchor_var_samp_fields
  variance: voting_anchor_variance_fields
}

"""aggregate avg on columns"""
type voting_anchor_avg_fields {
  block_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "voting_anchor". All fields are combined with a logical 'AND'.
"""
input voting_anchor_bool_exp {
  _and: [voting_anchor_bool_exp!]
  _not: voting_anchor_bool_exp
  _or: [voting_anchor_bool_exp!]
  block_id: bigint_comparison_exp
  data_hash: bytea_comparison_exp
  id: bigint_comparison_exp
  offChainData: off_chain_vote_data_bool_exp
  type: anchortype_comparison_exp
  url: String_comparison_exp
}

"""
unique or primary key constraints on table "voting_anchor"
"""
enum voting_anchor_constraint {
  """
  unique or primary key constraint on columns "type", "url", "data_hash"
  """
  unique_voting_anchor

  """
  unique or primary key constraint on columns "id"
  """
  voting_anchor_pkey
}

"""
input type for incrementing numeric columns in table "voting_anchor"
"""
input voting_anchor_inc_input {
  block_id: bigint
  id: bigint
}

"""
input type for inserting data into table "voting_anchor"
"""
input voting_anchor_insert_input {
  block_id: bigint
  data_hash: bytea
  id: bigint
  offChainData: off_chain_vote_data_obj_rel_insert_input
  type: anchortype
  url: String
}

"""aggregate max on columns"""
type voting_anchor_max_fields {
  block_id: bigint
  id: bigint
  type: anchortype
  url: String
}

"""aggregate min on columns"""
type voting_anchor_min_fields {
  block_id: bigint
  id: bigint
  type: anchortype
  url: String
}

"""
response of any mutation on the table "voting_anchor"
"""
type voting_anchor_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [voting_anchor!]!
}

"""
input type for inserting object relation for remote table "voting_anchor"
"""
input voting_anchor_obj_rel_insert_input {
  data: voting_anchor_insert_input!

  """upsert condition"""
  on_conflict: voting_anchor_on_conflict
}

"""
on_conflict condition type for table "voting_anchor"
"""
input voting_anchor_on_conflict {
  constraint: voting_anchor_constraint!
  update_columns: [voting_anchor_update_column!]! = []
  where: voting_anchor_bool_exp
}

"""Ordering options when selecting data from "voting_anchor"."""
input voting_anchor_order_by {
  block_id: order_by
  data_hash: order_by
  id: order_by
  offChainData: off_chain_vote_data_order_by
  type: order_by
  url: order_by
}

"""primary key columns input for table: voting_anchor"""
input voting_anchor_pk_columns_input {
  id: bigint!
}

"""
select columns of table "voting_anchor"
"""
enum voting_anchor_select_column {
  """column name"""
  block_id

  """column name"""
  data_hash

  """column name"""
  id

  """column name"""
  type

  """column name"""
  url
}

"""
input type for updating data in table "voting_anchor"
"""
input voting_anchor_set_input {
  block_id: bigint
  data_hash: bytea
  id: bigint
  type: anchortype
  url: String
}

"""aggregate stddev on columns"""
type voting_anchor_stddev_fields {
  block_id: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type voting_anchor_stddev_pop_fields {
  block_id: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type voting_anchor_stddev_samp_fields {
  block_id: Float
  id: Float
}

"""
Streaming cursor of the table "voting_anchor"
"""
input voting_anchor_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: voting_anchor_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input voting_anchor_stream_cursor_value_input {
  block_id: bigint
  data_hash: bytea
  id: bigint
  type: anchortype
  url: String
}

"""aggregate sum on columns"""
type voting_anchor_sum_fields {
  block_id: bigint
  id: bigint
}

"""
update columns of table "voting_anchor"
"""
enum voting_anchor_update_column {
  """column name"""
  block_id

  """column name"""
  data_hash

  """column name"""
  id

  """column name"""
  type

  """column name"""
  url
}

input voting_anchor_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: voting_anchor_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: voting_anchor_set_input

  """filter the rows which have to be updated"""
  where: voting_anchor_bool_exp!
}

"""aggregate var_pop on columns"""
type voting_anchor_var_pop_fields {
  block_id: Float
  id: Float
}

"""aggregate var_samp on columns"""
type voting_anchor_var_samp_fields {
  block_id: Float
  id: Float
}

"""aggregate variance on columns"""
type voting_anchor_variance_fields {
  block_id: Float
  id: Float
}

"""
columns and relationships of "voting_procedure"
"""
type voting_procedure {
  """An object relationship"""
  committeeVoter: committee_hash
  committee_voter: bigint

  """An object relationship"""
  drepVoter: drep_hash
  drep_voter: bigint

  """An object relationship"""
  govActionProposal: gov_action_proposal
  gov_action_proposal_id: bigint!
  id: bigint!
  index: Int!
  invalid: bigint

  """An object relationship"""
  poolVoter: pool_hash
  pool_voter: bigint

  """An object relationship"""
  transaction: Transaction
  tx_id: bigint!
  vote: vote!
  voter_role: voterrole!

  """An object relationship"""
  votingAnchor: voting_anchor
  voting_anchor_id: bigint
}

"""
aggregated selection of "voting_procedure"
"""
type voting_procedure_aggregate {
  aggregate: voting_procedure_aggregate_fields
  nodes: [voting_procedure!]!
}

"""
aggregate fields of "voting_procedure"
"""
type voting_procedure_aggregate_fields {
  avg: voting_procedure_avg_fields
  count(columns: [voting_procedure_select_column!], distinct: Boolean): Int!
  max: voting_procedure_max_fields
  min: voting_procedure_min_fields
  stddev: voting_procedure_stddev_fields
  stddev_pop: voting_procedure_stddev_pop_fields
  stddev_samp: voting_procedure_stddev_samp_fields
  sum: voting_procedure_sum_fields
  var_pop: voting_procedure_var_pop_fields
  var_samp: voting_procedure_var_samp_fields
  variance: voting_procedure_variance_fields
}

"""aggregate avg on columns"""
type voting_procedure_avg_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Boolean expression to filter rows from the table "voting_procedure". All fields are combined with a logical 'AND'.
"""
input voting_procedure_bool_exp {
  _and: [voting_procedure_bool_exp!]
  _not: voting_procedure_bool_exp
  _or: [voting_procedure_bool_exp!]
  committeeVoter: committee_hash_bool_exp
  committee_voter: bigint_comparison_exp
  drepVoter: drep_hash_bool_exp
  drep_voter: bigint_comparison_exp
  govActionProposal: gov_action_proposal_bool_exp
  gov_action_proposal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  index: Int_comparison_exp
  invalid: bigint_comparison_exp
  poolVoter: pool_hash_bool_exp
  pool_voter: bigint_comparison_exp
  transaction: Transaction_bool_exp
  tx_id: bigint_comparison_exp
  vote: vote_comparison_exp
  voter_role: voterrole_comparison_exp
  votingAnchor: voting_anchor_bool_exp
  voting_anchor_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "voting_procedure"
"""
enum voting_procedure_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  voting_procedure_pkey
}

"""
input type for incrementing numeric columns in table "voting_procedure"
"""
input voting_procedure_inc_input {
  committee_voter: bigint
  drep_voter: bigint
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  pool_voter: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
input type for inserting data into table "voting_procedure"
"""
input voting_procedure_insert_input {
  committeeVoter: committee_hash_obj_rel_insert_input
  committee_voter: bigint
  drepVoter: drep_hash_obj_rel_insert_input
  drep_voter: bigint
  govActionProposal: gov_action_proposal_obj_rel_insert_input
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  poolVoter: pool_hash_obj_rel_insert_input
  pool_voter: bigint
  transaction: Transaction_obj_rel_insert_input
  tx_id: bigint
  vote: vote
  voter_role: voterrole
  votingAnchor: voting_anchor_obj_rel_insert_input
  voting_anchor_id: bigint
}

"""aggregate max on columns"""
type voting_procedure_max_fields {
  committee_voter: bigint
  drep_voter: bigint
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  pool_voter: bigint
  tx_id: bigint
  vote: vote
  voter_role: voterrole
  voting_anchor_id: bigint
}

"""aggregate min on columns"""
type voting_procedure_min_fields {
  committee_voter: bigint
  drep_voter: bigint
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  pool_voter: bigint
  tx_id: bigint
  vote: vote
  voter_role: voterrole
  voting_anchor_id: bigint
}

"""
response of any mutation on the table "voting_procedure"
"""
type voting_procedure_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [voting_procedure!]!
}

"""
on_conflict condition type for table "voting_procedure"
"""
input voting_procedure_on_conflict {
  constraint: voting_procedure_constraint!
  update_columns: [voting_procedure_update_column!]! = []
  where: voting_procedure_bool_exp
}

"""Ordering options when selecting data from "voting_procedure"."""
input voting_procedure_order_by {
  committeeVoter: committee_hash_order_by
  committee_voter: order_by
  drepVoter: drep_hash_order_by
  drep_voter: order_by
  govActionProposal: gov_action_proposal_order_by
  gov_action_proposal_id: order_by
  id: order_by
  index: order_by
  invalid: order_by
  poolVoter: pool_hash_order_by
  pool_voter: order_by
  transaction: Transaction_order_by
  tx_id: order_by
  vote: order_by
  voter_role: order_by
  votingAnchor: voting_anchor_order_by
  voting_anchor_id: order_by
}

"""primary key columns input for table: voting_procedure"""
input voting_procedure_pk_columns_input {
  id: bigint!
}

"""
select columns of table "voting_procedure"
"""
enum voting_procedure_select_column {
  """column name"""
  committee_voter

  """column name"""
  drep_voter

  """column name"""
  gov_action_proposal_id

  """column name"""
  id

  """column name"""
  index

  """column name"""
  invalid

  """column name"""
  pool_voter

  """column name"""
  tx_id

  """column name"""
  vote

  """column name"""
  voter_role

  """column name"""
  voting_anchor_id
}

"""
input type for updating data in table "voting_procedure"
"""
input voting_procedure_set_input {
  committee_voter: bigint
  drep_voter: bigint
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  pool_voter: bigint
  tx_id: bigint
  vote: vote
  voter_role: voterrole
  voting_anchor_id: bigint
}

"""aggregate stddev on columns"""
type voting_procedure_stddev_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_pop on columns"""
type voting_procedure_stddev_pop_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate stddev_samp on columns"""
type voting_procedure_stddev_samp_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""
Streaming cursor of the table "voting_procedure"
"""
input voting_procedure_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: voting_procedure_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input voting_procedure_stream_cursor_value_input {
  committee_voter: bigint
  drep_voter: bigint
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  pool_voter: bigint
  tx_id: bigint
  vote: vote
  voter_role: voterrole
  voting_anchor_id: bigint
}

"""aggregate sum on columns"""
type voting_procedure_sum_fields {
  committee_voter: bigint
  drep_voter: bigint
  gov_action_proposal_id: bigint
  id: bigint
  index: Int
  invalid: bigint
  pool_voter: bigint
  tx_id: bigint
  voting_anchor_id: bigint
}

"""
update columns of table "voting_procedure"
"""
enum voting_procedure_update_column {
  """column name"""
  committee_voter

  """column name"""
  drep_voter

  """column name"""
  gov_action_proposal_id

  """column name"""
  id

  """column name"""
  index

  """column name"""
  invalid

  """column name"""
  pool_voter

  """column name"""
  tx_id

  """column name"""
  vote

  """column name"""
  voter_role

  """column name"""
  voting_anchor_id
}

input voting_procedure_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: voting_procedure_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: voting_procedure_set_input

  """filter the rows which have to be updated"""
  where: voting_procedure_bool_exp!
}

"""aggregate var_pop on columns"""
type voting_procedure_var_pop_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate var_samp on columns"""
type voting_procedure_var_samp_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}

"""aggregate variance on columns"""
type voting_procedure_variance_fields {
  committee_voter: Float
  drep_voter: Float
  gov_action_proposal_id: Float
  id: Float
  index: Float
  invalid: Float
  pool_voter: Float
  tx_id: Float
  voting_anchor_id: Float
}
